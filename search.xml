<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>mysql-install</title>
      <link href="/mysql-install.html"/>
      <url>/mysql-install.html</url>
      
        <content type="html"><![CDATA[<h1 id="MYSQL"><a href="#MYSQL" class="headerlink" title="MYSQL"></a>MYSQL</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>Ubuntu2004中直接apt安装：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> mysql-server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="修改密码"><a href="#修改密码" class="headerlink" title="修改密码"></a>修改密码</h2><h3 id="方法1"><a href="#方法1" class="headerlink" title="方法1"></a>方法1</h3><p>直接用sudo免密登录进去</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> mysql -u rootWelcome to the MySQL monitor.  Commands end with <span class="token punctuation">;</span> or <span class="token punctuation">\</span>g.Your MySQL connection <span class="token function">id</span> is <span class="token number">10</span>Server version: <span class="token number">8.0</span>.28-0ubuntu0.20.04.3 <span class="token punctuation">(</span>Ubuntu<span class="token punctuation">)</span>Copyright <span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token number">2000</span>, <span class="token number">2022</span>, Oracle and/or its affiliates.Oracle is a registered trademark of Oracle Corporation and/or itsaffiliates. Other names may be trademarks of their respectiveowners.Type <span class="token string">'help;'</span> or <span class="token string">'\h'</span> <span class="token keyword">for</span> help. Type <span class="token string">'\c'</span> to <span class="token function">clear</span> the current input statement.mysql<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p>查看默认用户和密码</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">cat</span> /etc/mysql/debian.cnf<span class="token punctuation">[</span>sudo<span class="token punctuation">]</span> password <span class="token keyword">for</span> dev:<span class="token comment"># Automatically generated for Debian scripts. DO NOT TOUCH!</span><span class="token punctuation">[</span>client<span class="token punctuation">]</span><span class="token function">host</span>     <span class="token operator">=</span> localhostuser     <span class="token operator">=</span> debian-sys-maintpassword <span class="token operator">=</span> zD010sDV3QSutKdZsocket   <span class="token operator">=</span> /var/run/mysqld/mysqld.sock<span class="token punctuation">[</span>mysql_upgrade<span class="token punctuation">]</span><span class="token function">host</span>     <span class="token operator">=</span> localhostuser     <span class="token operator">=</span> debian-sys-maintpassword <span class="token operator">=</span> zD010sDV3QSutKdZsocket   <span class="token operator">=</span> /var/run/mysqld/mysqld.sock<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用默认用户和密码登录进去</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ mysql -u debian-sys-maint -pEnter password:Welcome to the MySQL monitor.  Commands end with <span class="token punctuation">;</span> or <span class="token punctuation">\</span>g.Your MySQL connection <span class="token function">id</span> is <span class="token number">10</span>Server version: <span class="token number">8.0</span>.28-0ubuntu0.20.04.3 <span class="token punctuation">(</span>Ubuntu<span class="token punctuation">)</span>Copyright <span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token number">2000</span>, <span class="token number">2022</span>, Oracle and/or its affiliates.Oracle is a registered trademark of Oracle Corporation and/or itsaffiliates. Other names may be trademarks of their respectiveowners.Type <span class="token string">'help;'</span> or <span class="token string">'\h'</span> <span class="token keyword">for</span> help. Type <span class="token string">'\c'</span> to <span class="token function">clear</span> the current input statement.mysql<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="修改密码-1"><a href="#修改密码-1" class="headerlink" title="修改密码"></a>修改密码</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ mysql<span class="token operator">></span> use mysqlReading table information <span class="token keyword">for</span> completion of table and <span class="token function">column</span> namesYou can turn off this feature to get a quicker startup with -ADatabase changedmysql<span class="token operator">></span> alter user <span class="token string">'root'</span>@<span class="token string">'localhost'</span> identified with mysql_native_password by <span class="token string">'root'</span><span class="token punctuation">;</span>Query OK, <span class="token number">0</span> rows affected <span class="token punctuation">(</span><span class="token number">0.01</span> sec<span class="token punctuation">)</span>mysql<span class="token operator">></span> <span class="token builtin class-name">exit</span>Bye<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后就可以使用root更新的密码登录了。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ mysql -u root -pEnter password:Welcome to the MySQL monitor.  Commands end with <span class="token punctuation">;</span> or <span class="token punctuation">\</span>g.Your MySQL connection <span class="token function">id</span> is <span class="token number">25</span>Server version: <span class="token number">8.0</span>.28-0ubuntu0.20.04.3 <span class="token punctuation">(</span>Ubuntu<span class="token punctuation">)</span>Copyright <span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token number">2000</span>, <span class="token number">2022</span>, Oracle and/or its affiliates.Oracle is a registered trademark of Oracle Corporation and/or itsaffiliates. Other names may be trademarks of their respectiveowners.Type <span class="token string">'help;'</span> or <span class="token string">'\h'</span> <span class="token keyword">for</span> help. Type <span class="token string">'\c'</span> to <span class="token function">clear</span> the current input statement.mysql<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="允许远程登录"><a href="#允许远程登录" class="headerlink" title="允许远程登录"></a>允许远程登录</h2><pre class="line-numbers language-none"><code class="language-none">use mysql;GRANT ALL ON *.* TO &#39;root&#39;@&#39;%&#39;;flush privileges;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：1.放开服务器端口限制； 2. <code>/etc/mysql/mysql.conf.d/mysqld.cnf</code>中 <code>bind-address = 127.0.0.1</code>需要注释掉然后重启服务</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++ stack API</title>
      <link href="/C-stack-API.html"/>
      <url>/C-stack-API.html</url>
      
        <content type="html"><![CDATA[<h2 id="C-stack"><a href="#C-stack" class="headerlink" title="C++ stack"></a>C++ stack</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">Container</span> <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>deque<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token operator">></span> <span class="token keyword">class</span> <span class="token class-name">stack</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>std::stack</code> 类是容器适配器，它给予程序员栈的功能——特别是 FILO （先进后出）数据结构。</p><p>该类模板表现为底层容器的包装器——只提供特定函数集合。栈从被称作栈顶的容器尾部推弹元素。</p><h2 id="成员类型"><a href="#成员类型" class="headerlink" title="成员类型"></a>成员类型</h2><table><thead><tr><th>成员类型</th><th>定义</th></tr></thead><tbody><tr><td><code>container_type</code></td><td><code>Container</code></td></tr><tr><td><code>value_type</code></td><td><code>Container::value_type</code></td></tr><tr><td><code>size_type</code></td><td><code>Container::size_type</code></td></tr><tr><td><code>reference</code></td><td><code>Container::reference</code></td></tr><tr><td><code>const_reference</code></td><td><code>Container::const_reference</code></td></tr></tbody></table><h2 id="构造"><a href="#构造" class="headerlink" title="构造"></a>构造</h2><h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><ol><li><p>创建一个空容器. </p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token function">stack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">stack</span><span class="token punctuation">(</span><span class="token function">Container</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">Alloc</span> <span class="token operator">></span><span class="token keyword">explicit</span> <span class="token function">stack</span><span class="token punctuation">(</span> <span class="token keyword">const</span> Alloc<span class="token operator">&amp;</span> alloc <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>以指定内容构造</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">explicit</span> <span class="token function">stack</span><span class="token punctuation">(</span> <span class="token keyword">const</span> Container<span class="token operator">&amp;</span> cont <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">Alloc</span> <span class="token operator">></span><span class="token function">stack</span><span class="token punctuation">(</span> <span class="token keyword">const</span> Container<span class="token operator">&amp;</span> cont<span class="token punctuation">,</span> <span class="token keyword">const</span> Alloc<span class="token operator">&amp;</span> alloc <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">Alloc</span> <span class="token operator">></span><span class="token function">stack</span><span class="token punctuation">(</span> Container<span class="token operator">&amp;&amp;</span> cont<span class="token punctuation">,</span> <span class="token keyword">const</span> Alloc<span class="token operator">&amp;</span> alloc <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>以其他的容器创建</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token function">stack</span><span class="token punctuation">(</span> <span class="token keyword">const</span> stack<span class="token operator">&amp;</span> other <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">Alloc</span> <span class="token operator">></span><span class="token function">stack</span><span class="token punctuation">(</span> <span class="token keyword">const</span> stack<span class="token operator">&amp;</span> other<span class="token punctuation">,</span> <span class="token keyword">const</span> Alloc<span class="token operator">&amp;</span> alloc <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>还可以使用移动语义</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token function">stack</span><span class="token punctuation">(</span> stack<span class="token operator">&amp;&amp;</span> other <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">Alloc</span> <span class="token operator">></span><span class="token function">stack</span><span class="token punctuation">(</span> stack<span class="token operator">&amp;&amp;</span> other<span class="token punctuation">,</span> <span class="token keyword">const</span> Alloc<span class="token operator">&amp;</span> alloc <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="operator"><a href="#operator" class="headerlink" title="operator="></a>operator=</h3>   <pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">stack<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span> <span class="token keyword">const</span> stack<span class="token operator">&amp;</span> other <span class="token punctuation">)</span><span class="token punctuation">;</span>stack<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span> stack<span class="token operator">&amp;&amp;</span> other <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="元素访问"><a href="#元素访问" class="headerlink" title="元素访问"></a>元素访问</h2><h3 id="top"><a href="#top" class="headerlink" title="top"></a>top</h3><p>访问栈顶元素，返回 stack 中顶元素的引用。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">reference <span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>const_reference <span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="容量"><a href="#容量" class="headerlink" title="容量"></a>容量</h2><h3 id="empty"><a href="#empty" class="headerlink" title="empty"></a>empty</h3><p>判断容器是否为空，空则为true</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token punctuation">[</span><span class="token punctuation">[</span>nodiscard<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token keyword">bool</span> <span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="size"><a href="#size" class="headerlink" title="size"></a>size</h3><p>返回容器中的元素数 。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">size_type <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="修改器"><a href="#修改器" class="headerlink" title="修改器"></a>修改器</h2><h3 id="push"><a href="#push" class="headerlink" title="push"></a>push</h3><p>向栈顶插入元素。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span> <span class="token keyword">const</span> value_type<span class="token operator">&amp;</span> value <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span> value_type<span class="token operator">&amp;&amp;</span> value <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="emplace"><a href="#emplace" class="headerlink" title="emplace"></a>emplace</h3><p>推入新元素到 stack 顶。原位构造元素，即不进行移动或复制操作。等效地调用 <code>c.emplace_back(std::forward&lt;Args&gt;(args)...); </code>。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> Args <span class="token operator">></span><span class="token keyword">decltype</span><span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token punctuation">)</span> <span class="token function">emplace</span><span class="token punctuation">(</span> Args<span class="token operator">&amp;&amp;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="pop"><a href="#pop" class="headerlink" title="pop"></a>pop</h3><p>删除栈顶元素, 等效地调用<code>c.pop_back()</code>。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="swap"><a href="#swap" class="headerlink" title="swap"></a>swap</h3><p>将内容与其他容器交换。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span> stack<span class="token operator">&amp;</span> other <span class="token punctuation">)</span> <span class="token keyword">noexcept</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>is_nothrow_swappable<span class="token operator">&lt;</span>Container<span class="token operator">></span><span class="token double-colon punctuation">::</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="成员对象"><a href="#成员对象" class="headerlink" title="成员对象"></a>成员对象</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Container c <span class="token comment">// 底层容器</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="非成员函数"><a href="#非成员函数" class="headerlink" title="非成员函数"></a>非成员函数</h2><h3 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h3><ol><li><code>operator==</code>  2.<code>operator!=</code>  3.<code>operator&lt;</code>  4.<code>operator&lt;=</code>  5.<code>operator&gt;</code>  6.<code>operator&gt;=</code>  7.<code>operator&lt;=&gt;</code></li></ol><h3 id="swap-1"><a href="#swap-1" class="headerlink" title="swap"></a>swap</h3><p><code>std::swap(std::stack)</code>  特化 <code>std::swap</code> 算法</p><h2 id="辅助类"><a href="#辅助类" class="headerlink" title="辅助类"></a>辅助类</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>uses_allocator<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>stack<span class="token operator">></span> <span class="token comment">// 特化 std::uses_allocator 类型特征</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STL </tag>
            
            <tag> 容器适配器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++ unordered_multiset API</title>
      <link href="/C-unordered-multiset-API.html"/>
      <url>/C-unordered-multiset-API.html</url>
      
        <content type="html"><![CDATA[<h2 id="C-unordered-multiset"><a href="#C-unordered-multiset" class="headerlink" title="C++ unordered_multiset"></a>C++ unordered_multiset</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">Key</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">Hash</span> <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>hash<span class="token operator">&lt;</span>Key<span class="token operator">></span><span class="token punctuation">,</span>    <span class="token keyword">class</span> <span class="token class-name">KeyEqual</span> <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>equal_to<span class="token operator">&lt;</span>Key<span class="token operator">></span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">Allocator</span> <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>allocator<span class="token operator">&lt;</span>Key<span class="token operator">></span><span class="token operator">></span> <span class="token keyword">class</span> <span class="token class-name">unordered_multiset</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> pmr <span class="token punctuation">&#123;</span>    <span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">Key</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">Hash</span> <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>hash<span class="token operator">&lt;</span>Key<span class="token operator">></span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">Pred</span> <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>equal_to<span class="token operator">&lt;</span>Key<span class="token operator">>></span>    <span class="token keyword">using</span> unordered_multiset <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>unordered_multiset<span class="token operator">&lt;</span>Key<span class="token punctuation">,</span> Hash<span class="token punctuation">,</span> Pred<span class="token punctuation">,</span>                                   std<span class="token double-colon punctuation">::</span>pmr<span class="token double-colon punctuation">::</span>polymorphic_allocator<span class="token operator">&lt;</span>Key<span class="token operator">>></span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>unordered_multiset</code> 是关联容器，含有可能非唯一 Key 类型对象的集合。搜索、插入和移除拥有平均常数时间复杂度。</p><p>元素在内部并不以任何顺序排序，只是被组织到桶中。元素被放入哪个桶完全依赖其值的哈希。这允许快速访问单独的元素，因为一旦计算哈希，它就指代放置该元素的准确的桶。</p><h2 id="成员类型"><a href="#成员类型" class="headerlink" title="成员类型"></a>成员类型</h2><table><thead><tr><th>成员类型</th><th>定义</th></tr></thead><tbody><tr><td><code>key_type</code></td><td><code>Key</code></td></tr><tr><td><code>value_type</code></td><td><code>Key</code></td></tr><tr><td><code>size_type</code></td><td>无符号整数类型（通常是 <code>std::size_t</code> ）</td></tr><tr><td><code>difference_type</code></td><td>有符号整数类型（通常是 <code>std::ptrdiff_t</code> ）</td></tr><tr><td><code>hasher</code></td><td><code>Hash</code></td></tr><tr><td><code>key_equal</code></td><td><code>KeyEqual</code></td></tr><tr><td><code>allocator_type</code></td><td><code>Allocator</code></td></tr><tr><td><code>reference</code></td><td><code>value_type&amp;</code></td></tr><tr><td><code>const_reference</code></td><td><code>const value_type&amp;</code></td></tr><tr><td><code>pointer</code></td><td><code>std::allocator_traits&lt;Allocator&gt;::pointer</code></td></tr><tr><td><code>const_pointer</code></td><td><code>std::allocator_traits&lt;Allocator&gt;::const_pointer</code></td></tr><tr><td><code>iterator</code></td><td>常遗留向前迭代器 (LegacyForwardIterator)</td></tr><tr><td><code>const_iterator</code></td><td>常向前迭代器</td></tr><tr><td><code>local_iterator</code></td><td>类别、值、差、指针和引用类型都与 <code>iterator</code> 相同的迭代器类型。<br/>能用此迭代器在单个桶迭代，但不能跨桶。</td></tr><tr><td><code>const_local_iterator</code></td><td>类别、值、差、指针和引用类型都与 <code>const_iterator</code> 相同的迭代器类型。<br/>能用此迭代器在单个桶迭代，但不能跨桶。</td></tr><tr><td><code>node_type</code></td><td>表示容器结点的结点句柄特化</td></tr></tbody></table><h2 id="构造"><a href="#构造" class="headerlink" title="构造"></a>构造</h2><h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><ol><li><p>创建一个空<code>unordered_multiset</code>. </p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">explicit</span> <span class="token function">unordered_multiset</span><span class="token punctuation">(</span> size_type bucket_count<span class="token punctuation">,</span> <span class="token keyword">const</span> Hash<span class="token operator">&amp;</span> hash <span class="token operator">=</span> <span class="token function">Hash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                             <span class="token keyword">const</span> key_equal<span class="token operator">&amp;</span> equal <span class="token operator">=</span> <span class="token function">key_equal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                             <span class="token keyword">const</span> Allocator<span class="token operator">&amp;</span> alloc <span class="token operator">=</span> <span class="token function">Allocator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>初始化列表</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token function">unordered_multiset</span><span class="token punctuation">(</span> std<span class="token double-colon punctuation">::</span>initializer_list<span class="token operator">&lt;</span>value_type<span class="token operator">></span> init<span class="token punctuation">,</span>                    size_type bucket_count <span class="token operator">=</span> <span class="token comment">/*implementation-defined*/</span><span class="token punctuation">,</span>                    <span class="token keyword">const</span> Hash<span class="token operator">&amp;</span> hash <span class="token operator">=</span> <span class="token function">Hash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    <span class="token keyword">const</span> key_equal<span class="token operator">&amp;</span> equal <span class="token operator">=</span> <span class="token function">key_equal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    <span class="token keyword">const</span> Allocator<span class="token operator">&amp;</span> alloc <span class="token operator">=</span> <span class="token function">Allocator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>以一对迭代器创建</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">InputIt</span> <span class="token operator">></span><span class="token function">unordered_multiset</span><span class="token punctuation">(</span> InputIt first<span class="token punctuation">,</span> InputIt last<span class="token punctuation">,</span>                    size_type bucket_count <span class="token operator">=</span> <span class="token comment">/*implementation-defined*/</span><span class="token punctuation">,</span>                    <span class="token keyword">const</span> Hash<span class="token operator">&amp;</span> hash <span class="token operator">=</span> <span class="token function">Hash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    <span class="token keyword">const</span> key_equal<span class="token operator">&amp;</span> equal <span class="token operator">=</span> <span class="token function">key_equal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    <span class="token keyword">const</span> Allocator<span class="token operator">&amp;</span> alloc <span class="token operator">=</span> <span class="token function">Allocator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>以其他的容器创建</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token function">unordered_multiset</span><span class="token punctuation">(</span> <span class="token keyword">const</span> unordered_multiset<span class="token operator">&amp;</span> other <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">unordered_multiset</span><span class="token punctuation">(</span> <span class="token keyword">const</span> unordered_multiset<span class="token operator">&amp;</span> other<span class="token punctuation">,</span> <span class="token keyword">const</span> Allocator<span class="token operator">&amp;</span> alloc <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>还可以使用移动语义</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token function">unordered_multiset</span><span class="token punctuation">(</span> unordered_multiset<span class="token operator">&amp;&amp;</span> other <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">unordered_multiset</span><span class="token punctuation">(</span> unordered_multiset<span class="token operator">&amp;&amp;</span> other<span class="token punctuation">,</span> <span class="token keyword">const</span> Allocator<span class="token operator">&amp;</span> alloc <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="operator"><a href="#operator" class="headerlink" title="operator="></a>operator=</h3>   <pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">unordered_multiset<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span> <span class="token keyword">const</span> unordered_multiset<span class="token operator">&amp;</span> other <span class="token punctuation">)</span><span class="token punctuation">;</span>unordered_multiset<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span> unordered_multiset<span class="token operator">&amp;&amp;</span> other <span class="token punctuation">)</span> <span class="token keyword">noexcept</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>allocator_traits<span class="token operator">&lt;</span>Allocator<span class="token operator">></span><span class="token double-colon punctuation">::</span>is_always_equal<span class="token double-colon punctuation">::</span>value      <span class="token operator">&amp;&amp;</span> std<span class="token double-colon punctuation">::</span>is_nothrow_move_assignable<span class="token operator">&lt;</span>Hash<span class="token operator">></span><span class="token double-colon punctuation">::</span>value      <span class="token operator">&amp;&amp;</span> std<span class="token double-colon punctuation">::</span>is_nothrow_move_assignable<span class="token operator">&lt;</span>Pred<span class="token operator">></span><span class="token double-colon punctuation">::</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>unordered_multiset<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span> std<span class="token double-colon punctuation">::</span>initializer_list<span class="token operator">&lt;</span>value_type<span class="token operator">></span> ilist <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="get-allocator"><a href="#get-allocator" class="headerlink" title="get_allocator"></a>get_allocator</h3><p>返回与容器关联的分配器。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">allocator_type <span class="token function">get_allocator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">noexcept</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h2><h3 id="begin-end"><a href="#begin-end" class="headerlink" title="begin - end"></a>begin - end</h3><p>返回指向容器开头和结尾的迭代器。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">iterator <span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">noexcept</span><span class="token punctuation">;</span>const_iterator <span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">noexcept</span><span class="token punctuation">;</span>iterator <span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">noexcept</span><span class="token punctuation">;</span>const_iterator <span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">noexcept</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="cbegin-cend"><a href="#cbegin-cend" class="headerlink" title="cbegin - cend"></a>cbegin - cend</h3><p><code>const_iterator cbegin() const noexcept;</code>  <code>const_iterator cend() const noexcept;</code></p><p>返回指向容器开头和结尾的常量迭代器。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">const_iterator <span class="token function">cbegin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">noexcept</span><span class="token punctuation">;</span>const_iterator <span class="token function">cend</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">noexcept</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="容量"><a href="#容量" class="headerlink" title="容量"></a>容量</h2><h3 id="empty"><a href="#empty" class="headerlink" title="empty"></a>empty</h3><p>判断容器是否为空，空则为true</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token punctuation">[</span><span class="token punctuation">[</span>nodiscard<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token keyword">bool</span> <span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">noexcept</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="size"><a href="#size" class="headerlink" title="size"></a>size</h3><p>返回容器中的元素数, 即 std::distance(begin(), end()) 。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">size_type <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">noexcept</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="max-size"><a href="#max-size" class="headerlink" title="max_size"></a>max_size</h3><p>返回根据系统或库实现限制的容器可保有的元素最大数量</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">size_type <span class="token function">max_size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">noexcept</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="修改器"><a href="#修改器" class="headerlink" title="修改器"></a>修改器</h2><h3 id="clear"><a href="#clear" class="headerlink" title="clear"></a>clear</h3><p>擦除所有元素。此调用后 <code>size()</code> 返回零。非法化任何指代所含元素的引用、指针或迭代器。任何尾后迭代器亦被非法化</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">noexcept</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="insert"><a href="#insert" class="headerlink" title="insert"></a>insert</h3><p>插入元素到容器中的指定位置。</p><ol><li>插入 <code>value</code>返回由指向被插入元素（或阻止插入的元素）的迭代器</li></ol><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">iterator <span class="token function">insert</span><span class="token punctuation">(</span> <span class="token keyword">const</span> value_type<span class="token operator">&amp;</span> value <span class="token punctuation">)</span><span class="token punctuation">;</span>iterator <span class="token function">insert</span><span class="token punctuation">(</span> value_type<span class="token operator">&amp;&amp;</span> value <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="2"><li>插入 <code>value</code> 到尽可能接近，正好前于 <code>hint</code> 的位置。返回指向被插入元素。</li></ol><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">iterator <span class="token function">insert</span><span class="token punctuation">(</span> const_iterator hint<span class="token punctuation">,</span> <span class="token keyword">const</span> value_type<span class="token operator">&amp;</span> value <span class="token punctuation">)</span><span class="token punctuation">;</span>iterator <span class="token function">insert</span><span class="token punctuation">(</span> const_iterator hint<span class="token punctuation">,</span> value_type<span class="token operator">&amp;&amp;</span> value <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="3"><li>插入来自范围 <code>[first, last)</code> 的元素。</li></ol><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">InputIt</span> <span class="token operator">></span> <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span> InputIt first<span class="token punctuation">,</span> InputIt last <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="4"><li>插入来自 initializer_list <code>ilist</code> 的元素。</li></ol><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span> std<span class="token double-colon punctuation">::</span>initializer_list<span class="token operator">&lt;</span>value_type<span class="token operator">></span> ilist <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="5"><li> 若 nh 是空的结点句柄，则不做任何事。否则插入 nh 所占有的元素到容器.</li></ol><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">iterator <span class="token function">insert</span><span class="token punctuation">(</span>node_type<span class="token operator">&amp;&amp;</span> nh<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="6"><li>若 nh 是空的结点把柄，则不做任何事并返回尾迭代器。否则，插入 nh 所占有的元素到容器，元素被插入到尽可能接近正好先于 hint 的位置。</li></ol><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">iterator <span class="token function">insert</span><span class="token punctuation">(</span>const_iterator hint<span class="token punctuation">,</span> node_type<span class="token operator">&amp;&amp;</span> nh<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="emplace"><a href="#emplace" class="headerlink" title="emplace"></a>emplace</h3><p>若容器中无拥有该关键的元素，则插入以给定的 <code>args</code> 原位构造的新元素到容器。返回由指向被插入元素.若因插入发生重哈希，则所有迭代器都被非法化。否则迭代器不受影响。引用不被非法化。重哈希仅若新元素数量大于 <code>max_load_factor()*bucket_count() </code>才发生。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> Args <span class="token operator">></span> iterator <span class="token function">emplace</span><span class="token punctuation">(</span> Args<span class="token operator">&amp;&amp;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="emplace-hint"><a href="#emplace-hint" class="headerlink" title="emplace_hint"></a>emplace_hint</h3><p>插入新元素到容器中尽可能接近于恰在 <code>hint</code> 前的位置。原位构造元素，即不进行复制或移动操作。返回指向新插入元素的迭代器。若因插入发生重哈希，则所有迭代器都被非法化。否则迭代器不受影响。引用不被非法化。重哈希仅若新元素数量大于<code>max_load_factor()*bucket_count()</code>才发生。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> Args<span class="token operator">></span> iterator <span class="token function">emplace_hint</span><span class="token punctuation">(</span> const_iterator hint<span class="token punctuation">,</span> Args<span class="token operator">&amp;&amp;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="erase"><a href="#erase" class="headerlink" title="erase"></a>erase</h3><p>从容器擦除指定的元素。</p><p>1.移除位于pos的元素。返回指向下一个元素的迭代器。如一处的是最后一个，返回的是指向尾部的迭代器。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">iterator <span class="token function">erase</span><span class="token punctuation">(</span> iterator pos <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2.移除一定范围内的元素。返回指向下一个元素的迭代器。如一处的是最后一个，返回的是指向尾部的迭代器.</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">iterator <span class="token function">erase</span><span class="token punctuation">(</span> const_iterator first<span class="token punctuation">,</span> const_iterator last <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3.移除关键等于 <code>key</code> 的元素（若存在）。返回被移除的元素数。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">size_type <span class="token function">erase</span><span class="token punctuation">(</span> <span class="token keyword">const</span> key_type<span class="token operator">&amp;</span> key <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="swap"><a href="#swap" class="headerlink" title="swap"></a>swap</h3><p>将内容与其他容器交换。不在单独的元素上调用任何移动、复制或交换操作。所有迭代器和引用保持合法。尾后迭代器被非法化。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span> unordered_multiset<span class="token operator">&amp;</span> other <span class="token punctuation">)</span> <span class="token keyword">noexcept</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>allocator_traits<span class="token operator">&lt;</span>Allocator<span class="token operator">></span><span class="token double-colon punctuation">::</span>is_always_equal<span class="token double-colon punctuation">::</span>value   <span class="token operator">&amp;&amp;</span> std<span class="token double-colon punctuation">::</span>is_nothrow_swappable<span class="token operator">&lt;</span>Hash<span class="token operator">></span><span class="token double-colon punctuation">::</span>value    <span class="token operator">&amp;&amp;</span> std<span class="token double-colon punctuation">::</span>is_nothrow_swappable<span class="token operator">&lt;</span>key_equal<span class="token operator">></span><span class="token double-colon punctuation">::</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="extract"><a href="#extract" class="headerlink" title="extract"></a>extract</h3><p>任何情况下，均不复制或移动元素，只重指向容器结点的内部指针。释出结点只会非法化指向被释出元素的迭代器，并保持未被擦除元素的相对顺序。指向被释出元素的指针和引用保持合法，但在结点柄占有该元素时不能使用：若元素被插入容器，就能使用它们。</p><ol><li><p>解链含 position 所指向元素的结点并返回占有它的结点句柄。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">node_type <span class="token function">extract</span><span class="token punctuation">(</span> const_iterator position <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>若容器拥有元素而其键等于 <code>x</code> ，则从容器解链该元素并返回占有它的结点句柄。否则，返回空结点句柄。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">node_type <span class="token function">extract</span><span class="token punctuation">(</span> <span class="token keyword">const</span> key_type<span class="token operator">&amp;</span> x <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h3 id="merge"><a href="#merge" class="headerlink" title="merge"></a>merge</h3><p><code>template&lt;class H2, class P2&gt; void merge( std::unordered_set&lt;Key, H2, P2, Allocator&gt;&amp; source );</code><br><code>template&lt;class H2, class P2&gt; void merge( std::unordered_set&lt;Key, H2, P2, Allocator&gt;&amp;&amp; source );</code><br><code>template&lt;class H2, class P2&gt; void merge( std::unordered_multiset&lt;Key, H2, P2, Allocator&gt;&amp; source );</code><br><code>template&lt;class H2, class P2&gt; void merge( std::unordered_multiset&lt;Key, H2, P2, Allocator&gt;&amp;&amp; source );</code></p><p>试图提取其他<code>unordered_set</code>中的每个元素，并插入到当前容器 。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">H2</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">P2</span><span class="token operator">></span> <span class="token keyword">void</span> <span class="token function">merge</span><span class="token punctuation">(</span> std<span class="token double-colon punctuation">::</span>unordered_set<span class="token operator">&lt;</span>Key<span class="token punctuation">,</span> H2<span class="token punctuation">,</span> P2<span class="token punctuation">,</span> Allocator<span class="token operator">></span><span class="token operator">&amp;</span> source <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">H2</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">P2</span><span class="token operator">></span> <span class="token keyword">void</span> <span class="token function">merge</span><span class="token punctuation">(</span> std<span class="token double-colon punctuation">::</span>unordered_set<span class="token operator">&lt;</span>Key<span class="token punctuation">,</span> H2<span class="token punctuation">,</span> P2<span class="token punctuation">,</span> Allocator<span class="token operator">></span><span class="token operator">&amp;&amp;</span> source <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">H2</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">P2</span><span class="token operator">></span> <span class="token keyword">void</span> <span class="token function">merge</span><span class="token punctuation">(</span> std<span class="token double-colon punctuation">::</span>unordered_multiset<span class="token operator">&lt;</span>Key<span class="token punctuation">,</span> H2<span class="token punctuation">,</span> P2<span class="token punctuation">,</span> Allocator<span class="token operator">></span><span class="token operator">&amp;</span> source <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">H2</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">P2</span><span class="token operator">></span> <span class="token keyword">void</span> <span class="token function">merge</span><span class="token punctuation">(</span> std<span class="token double-colon punctuation">::</span>unordered_multiset<span class="token operator">&lt;</span>Key<span class="token punctuation">,</span> H2<span class="token punctuation">,</span> P2<span class="token punctuation">,</span> Allocator<span class="token operator">></span><span class="token operator">&amp;&amp;</span> source <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h2><h3 id="count"><a href="#count" class="headerlink" title="count"></a>count</h3><p>返回拥有键比较等价于指定参数的元素数。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">size_type <span class="token function">count</span><span class="token punctuation">(</span> <span class="token keyword">const</span> Key<span class="token operator">&amp;</span> key <span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">K</span> <span class="token operator">></span> size_type <span class="token function">count</span><span class="token punctuation">(</span> <span class="token keyword">const</span> K<span class="token operator">&amp;</span> x <span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="find"><a href="#find" class="headerlink" title="find"></a>find</h3><p>寻找带有特定键的元素。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">iterator <span class="token function">find</span><span class="token punctuation">(</span> <span class="token keyword">const</span> Key<span class="token operator">&amp;</span> key <span class="token punctuation">)</span><span class="token punctuation">;</span>const_iterator <span class="token function">find</span><span class="token punctuation">(</span> <span class="token keyword">const</span> Key<span class="token operator">&amp;</span> key <span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">K</span> <span class="token operator">></span> iterator <span class="token function">find</span><span class="token punctuation">(</span> <span class="token keyword">const</span> K<span class="token operator">&amp;</span> x <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">K</span> <span class="token operator">></span> const_iterator <span class="token function">find</span><span class="token punctuation">(</span> <span class="token keyword">const</span> K<span class="token operator">&amp;</span> x <span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="contains"><a href="#contains" class="headerlink" title="contains"></a>contains</h3><p>检查容器是否含有带特定键的元素。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">bool</span> <span class="token function">contains</span><span class="token punctuation">(</span> <span class="token keyword">const</span> Key<span class="token operator">&amp;</span> key <span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">K</span> <span class="token operator">></span> <span class="token keyword">bool</span> <span class="token function">contains</span><span class="token punctuation">(</span> <span class="token keyword">const</span> K<span class="token operator">&amp;</span> x <span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="equal-range"><a href="#equal-range" class="headerlink" title="equal_range"></a>equal_range</h3><p>返回容器中所有键等于 <code>key</code> 的元素范围。范围以二个迭代器定义，第一个指向所需范围的首元素，而第二个指向范围的尾后一位元素。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>pair<span class="token operator">&lt;</span>iterator<span class="token punctuation">,</span>iterator<span class="token operator">></span> <span class="token function">equal_range</span><span class="token punctuation">(</span> <span class="token keyword">const</span> Key<span class="token operator">&amp;</span> key <span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>pair<span class="token operator">&lt;</span>const_iterator<span class="token punctuation">,</span>const_iterator<span class="token operator">></span> <span class="token function">equal_range</span><span class="token punctuation">(</span> <span class="token keyword">const</span> Key<span class="token operator">&amp;</span> key <span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">K</span> <span class="token operator">></span> std<span class="token double-colon punctuation">::</span>pair<span class="token operator">&lt;</span>iterator<span class="token punctuation">,</span>iterator<span class="token operator">></span> <span class="token function">equal_range</span><span class="token punctuation">(</span> <span class="token keyword">const</span> K<span class="token operator">&amp;</span> x <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">K</span> <span class="token operator">></span> std<span class="token double-colon punctuation">::</span>pair<span class="token operator">&lt;</span>const_iterator<span class="token punctuation">,</span>const_iterator<span class="token operator">></span> <span class="token function">equal_range</span><span class="token punctuation">(</span> <span class="token keyword">const</span> K<span class="token operator">&amp;</span> x <span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="桶接口"><a href="#桶接口" class="headerlink" title="桶接口"></a>桶接口</h2><h3 id="begin-end-1"><a href="#begin-end-1" class="headerlink" title="begin - end"></a>begin - end</h3><p>返回指向下标为 <code>n</code> 的桶首元素/最后元素的迭代器</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">local_iterator <span class="token function">begin</span><span class="token punctuation">(</span> size_type n <span class="token punctuation">)</span><span class="token punctuation">;</span>const_local_iterator <span class="token function">begin</span><span class="token punctuation">(</span> size_type n <span class="token punctuation">)</span><span class="token punctuation">;</span>constlocal_iterator <span class="token function">end</span><span class="token punctuation">(</span> size_type n <span class="token punctuation">)</span><span class="token punctuation">;</span>const_local_iterator <span class="token function">end</span><span class="token punctuation">(</span> size_type n <span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="cbegin-cend-1"><a href="#cbegin-cend-1" class="headerlink" title="cbegin - cend"></a>cbegin - cend</h3><p>返回指向下标为 <code>n</code> 的桶首元素/最后元素的迭代器</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">const_local_iterator <span class="token function">cbegin</span><span class="token punctuation">(</span> size_type n <span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>const_local_iterator <span class="token function">cend</span><span class="token punctuation">(</span> size_type n <span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="bucket-count"><a href="#bucket-count" class="headerlink" title="bucket_count"></a>bucket_count</h3><p>返回桶数</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">size_type <span class="token function">bucket_count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="max-bucket-count"><a href="#max-bucket-count" class="headerlink" title="max_bucket_count"></a>max_bucket_count</h3><p>返回桶的最大数量</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">size_type <span class="token function">max_bucket_count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="bucket-size"><a href="#bucket-size" class="headerlink" title="bucket_size"></a>bucket_size</h3><p>返回在特定的桶中的元素数量</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">size_type <span class="token function">bucket_size</span><span class="token punctuation">(</span> size_type n <span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="bucket"><a href="#bucket" class="headerlink" title="bucket"></a>bucket</h3><p>返回带有特定键的桶.返回值仅对 bucket_count() 返回相同值的容器实例合法。若 bucket_count() 为零则行为未定义。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">size_type <span class="token function">bucket</span><span class="token punctuation">(</span> <span class="token keyword">const</span> Key<span class="token operator">&amp;</span> key <span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="哈希策略"><a href="#哈希策略" class="headerlink" title="哈希策略"></a>哈希策略</h2><h3 id="load-factor"><a href="#load-factor" class="headerlink" title="load_factor"></a>load_factor</h3><p>返回每个桶的平均元素数量</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">float</span> <span class="token function">load_factor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="max-load-factor"><a href="#max-load-factor" class="headerlink" title="max_load_factor"></a>max_load_factor</h3><p>管理每个桶的平均元素数量的最大值.若加载因子超出此阈值，则容器自动增加桶数。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">float</span> <span class="token function">max_load_factor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span><span class="token comment">//返回最大加载因子</span><span class="token keyword">void</span> <span class="token function">max_load_factor</span><span class="token punctuation">(</span> <span class="token keyword">float</span> ml <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 设置最大加载因子为 `ml` </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="rehash"><a href="#rehash" class="headerlink" title="rehash"></a>rehash</h3><p>设置桶数为 <code>count</code> 并重哈希容器，即考虑桶总数已改变，再把元素放到适当的桶中。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">rehash</span><span class="token punctuation">(</span> size_type count <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="reserve"><a href="#reserve" class="headerlink" title="reserve"></a>reserve</h3><p>设置桶数为适应至少 <code>count</code> 个元素，而不超出最大加载因子所需的数，并重哈希容器，即考虑桶数已更改后将元素放进适合的桶。等效地调用 <code>rehash(std::ceil(count / max_load_factor()))</code> 。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">reserve</span><span class="token punctuation">(</span> size_type count <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="观察器"><a href="#观察器" class="headerlink" title="观察器"></a>观察器</h2><h3 id="hash-function"><a href="#hash-function" class="headerlink" title="hash_function"></a>hash_function</h3><p>返回用于对键哈希的函数</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">hasher <span class="token function">hash_function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="key-eq"><a href="#key-eq" class="headerlink" title="key_eq"></a>key_eq</h3><p>返回用于比较键的相等性的函数</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">key_equal <span class="token function">key_eq</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="非成员函数"><a href="#非成员函数" class="headerlink" title="非成员函数"></a>非成员函数</h2><h3 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h3><ol><li><code>operator==</code>  </li></ol><h3 id="swap-1"><a href="#swap-1" class="headerlink" title="swap"></a>swap</h3><p><code>std::swap(std::unordered_multiset )</code>  特化 <code>std::swap</code> 算法</p><h3 id="擦除"><a href="#擦除" class="headerlink" title="擦除"></a>擦除</h3><p><code>erase_if(std::unordered_multiset )</code>  擦除所有满足特定判别标准的元素</p>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STL </tag>
            
            <tag> 无序关联容器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>miniconda安装简易指导</title>
      <link href="/miniconda%E5%AE%89%E8%A3%85%E7%AE%80%E6%98%93%E6%8C%87%E5%AF%BC.html"/>
      <url>/miniconda%E5%AE%89%E8%A3%85%E7%AE%80%E6%98%93%E6%8C%87%E5%AF%BC.html</url>
      
        <content type="html"><![CDATA[<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">mkdir</span> miniconda$ <span class="token builtin class-name">cd</span> miniconda/$ <span class="token function">wget</span> https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">bash</span> Miniconda3-latest-Linux-x86_64.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>lisence完后输入yes, 回车确认安装位置. 输入yes初始化。</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token builtin class-name">source</span> ~/.bashrc -- 加载环境变量使conda生效, 会自动激活默认环境。$ conda deactivate -- 退出环境$ conda config --set auto_activate_base <span class="token boolean">false</span> -- 禁用自动激活<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置阿里源 – 往<code>~/.condarc</code>中加入以下内容：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">channels:  - defaultsshow_channel_urls: <span class="token boolean">true</span>default_channels:  - http://mirrors.aliyun.com/anaconda/pkgs/main  - http://mirrors.aliyun.com/anaconda/pkgs/free  - http://mirrors.aliyun.com/anaconda/pkgs/r  - http://mirrors.aliyun.com/anaconda/pkgs/msys2custom_channels:  conda-forge: http://mirrors.aliyun.com/anaconda/cloud  msys2: http://mirrors.aliyun.com/anaconda/cloud  bioconda: http://mirrors.aliyun.com/anaconda/cloud  menpo: http://mirrors.aliyun.com/anaconda/cloud  pytorch: http://mirrors.aliyun.com/anaconda/cloud  simpleitk: http://mirrors.aliyun.com/anaconda/cloud<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ conda clean -i -- 清楚索引缓存.使源生效<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>配置pip源(激活环境后)</p><p>编辑<code>~/.pip/pip.conf</code>,加入一下内容</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>global<span class="token punctuation">]</span>index-url <span class="token operator">=</span> https://mirrors.aliyun.com/pypi/simple/<span class="token punctuation">[</span>install<span class="token punctuation">]</span>trusted-host<span class="token operator">=</span>mirrors.aliyun.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>或执行以下命令配置：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ pip config <span class="token builtin class-name">set</span> global.index-url https://mirrors.aliyun.com/pypi/simple/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ conda <span class="token function">env</span> list<span class="token comment"># 查看已经创建的虚拟环境。</span>$ conda create -n <span class="token builtin class-name">test</span> <span class="token assign-left variable">python</span><span class="token operator">=</span><span class="token number">3.10</span> <span class="token comment"># 创建名为test，Python版本为3.10的环境。</span>$ conda activate <span class="token builtin class-name">test</span><span class="token comment"># 激活名为test的环境</span>$ pip <span class="token function">install</span> numpy <span class="token comment"># 安装包</span>$ pip uninstall numpy<span class="token comment"># 删除包</span>$ conda deactivate   <span class="token comment"># 退出环境</span>$ conda <span class="token function">env</span> remove -n <span class="token builtin class-name">test</span> <span class="token comment"># 删除名为test的环境</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> miniconda </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jthread的简单使用</title>
      <link href="/jthread%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8.html"/>
      <url>/jthread%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8.html</url>
      
        <content type="html"><![CDATA[<p>jthread 即 join thread。 线程对象析构时自动join, 可以避免一些资源引用问题，还有thread不具有的stop_token. </p><h2 id="1-简单用法"><a href="#1-简单用法" class="headerlink" title="1. 简单用法"></a>1. 简单用法</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;thread></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> cout <span class="token operator">&lt;&lt;</span> this_thread<span class="token double-colon punctuation">::</span><span class="token function">get_id</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    jthread j<span class="token punctuation">&#123;</span>func<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>output:</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token number">140533313120000</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="2-stop-token"><a href="#2-stop-token" class="headerlink" title="2. stop_token"></a>2. stop_token</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;thread></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;chrono></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stop_token></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span>stop_token st<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">static</span> size_t count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">" start\n"</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>st<span class="token punctuation">.</span><span class="token function">stop_requested</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cout <span class="token operator">&lt;&lt;</span> count<span class="token operator">++</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        this_thread<span class="token double-colon punctuation">::</span><span class="token function">sleep_for</span><span class="token punctuation">(</span>chrono<span class="token double-colon punctuation">::</span><span class="token function">seconds</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    cout <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">" stop\n"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    jthread j<span class="token punctuation">&#123;</span>func<span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    this_thread<span class="token double-colon punctuation">::</span><span class="token function">sleep_for</span><span class="token punctuation">(</span>chrono<span class="token double-colon punctuation">::</span><span class="token function">seconds</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">auto</span> st <span class="token operator">=</span> j<span class="token punctuation">.</span><span class="token function">get_stop_source</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"stop possiple:"</span> <span class="token operator">&lt;&lt;</span> st<span class="token punctuation">.</span><span class="token function">stop_possible</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    j<span class="token punctuation">.</span><span class="token function">request_stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>output:</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token number">99</span> start<span class="token number">0</span><span class="token number">1</span><span class="token number">2</span>stop possiple<span class="token operator">:</span><span class="token number">1</span><span class="token number">99</span> stop<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-stop-callback"><a href="#3-stop-callback" class="headerlink" title="3. stop_callback"></a>3. stop_callback</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;thread></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;chrono></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stop_token></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span>stop_token st<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">static</span> size_t count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    stop_callback sc<span class="token punctuation">&#123;</span>st<span class="token punctuation">,</span> <span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> cout <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">" stop\n"</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>st<span class="token punctuation">.</span><span class="token function">stop_requested</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cout <span class="token operator">&lt;&lt;</span> count<span class="token operator">++</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        this_thread<span class="token double-colon punctuation">::</span><span class="token function">sleep_for</span><span class="token punctuation">(</span>chrono<span class="token double-colon punctuation">::</span><span class="token function">seconds</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    jthread j<span class="token punctuation">&#123;</span>func<span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    this_thread<span class="token double-colon punctuation">::</span><span class="token function">sleep_for</span><span class="token punctuation">(</span>chrono<span class="token double-colon punctuation">::</span><span class="token function">seconds</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    j<span class="token punctuation">.</span><span class="token function">request_stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>output:</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token number">0</span><span class="token number">1</span><span class="token number">2</span><span class="token number">99</span> stop<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> cpp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> thread </tag>
            
            <tag> jthread </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于source_location的调试接口</title>
      <link href="/%E5%9F%BA%E4%BA%8Esource-location%E7%9A%84%E8%B0%83%E8%AF%95%E6%8E%A5%E5%8F%A3.html"/>
      <url>/%E5%9F%BA%E4%BA%8Esource-location%E7%9A%84%E8%B0%83%E8%AF%95%E6%8E%A5%E5%8F%A3.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>平时一般简单的调试可以直接cout，但是不方便使用。<br>希望封装一个简单易用的接口，可以打印不同的数据，且可以打印出对应的文件，函数名和所在行数。</p><p>没有source_location之前想要打印文件，函数名和所在行数等信息。就是封装相关的宏和使用C可变参数宏打印。直到source_location出现，才有C++式的获取文件，函数名和所在行数的方法。</p><p>编译环境：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">uname</span> -aLinux DESKTOP-L4NCHLS <span class="token number">5.10</span>.16.3-microsoft-standard-WSL2 <span class="token comment">#1 SMP Fri Apr 2 22:23:49 UTC 2021 x86_64 x86_64 x86_64 GNU/Linux</span>$ g++ -vUsing built-in specs.<span class="token assign-left variable">COLLECT_GCC</span><span class="token operator">=</span>g++<span class="token assign-left variable">COLLECT_LTO_WRAPPER</span><span class="token operator">=</span>/usr/lib/gcc/x86_64-linux-gnu/11/lto-wrapper<span class="token assign-left variable">OFFLOAD_TARGET_NAMES</span><span class="token operator">=</span>nvptx-none:amdgcn-amdhsa<span class="token assign-left variable">OFFLOAD_TARGET_DEFAULT</span><span class="token operator">=</span><span class="token number">1</span>Target: x86_64-linux-gnu<span class="token punctuation">..</span>. <span class="token punctuation">..</span>.Thread model: posixSupported LTO compression algorithms: zlib zstdgcc version <span class="token number">11.1</span>.0 <span class="token punctuation">(</span>Ubuntu <span class="token number">11.1</span>.0-1ubuntu1~20.04<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">module</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;source_location></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string_view></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;filesystem></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;mutex></span></span><span class="token keyword">export</span> <span class="token keyword">module</span> <span class="token module">Loger</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> fs <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>filesystem<span class="token punctuation">;</span><span class="token keyword">using</span> sl     <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>source_location<span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>mutex lock<span class="token punctuation">;</span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">loger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token keyword">typename</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> Args<span class="token operator">></span><span class="token keyword">void</span> <span class="token function">loger</span><span class="token punctuation">(</span>T<span class="token operator">&amp;&amp;</span> t<span class="token punctuation">,</span> Args<span class="token operator">&amp;&amp;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> t <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">loger</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> Args<span class="token operator">></span><span class="token keyword">struct</span> <span class="token class-name">debug</span> <span class="token punctuation">&#123;</span>    <span class="token function">debug</span><span class="token punctuation">(</span>Args<span class="token operator">&amp;&amp;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">,</span> <span class="token keyword">const</span> sl<span class="token operator">&amp;</span> loc <span class="token operator">=</span> sl<span class="token double-colon punctuation">::</span><span class="token function">current</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">NDEBUG</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span>        std<span class="token double-colon punctuation">::</span>lock_guard l<span class="token punctuation">&#123;</span>lock<span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">/* useful in multithread debug */</span>        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"&#123; in File: ["</span> <span class="token operator">&lt;&lt;</span> loc<span class="token punctuation">.</span><span class="token function">file_name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"], Function: ["</span>                  <span class="token operator">&lt;&lt;</span> loc<span class="token punctuation">.</span><span class="token function">function_name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"], Line: ["</span> <span class="token operator">&lt;&lt;</span> loc<span class="token punctuation">.</span><span class="token function">line</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                  <span class="token operator">&lt;&lt;</span> <span class="token string">"] &#125;: "</span><span class="token punctuation">;</span>        <span class="token function">loger</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> Args<span class="token operator">></span><span class="token function">debug</span><span class="token punctuation">(</span>Args<span class="token operator">&amp;&amp;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token operator">-></span> debug<span class="token operator">&lt;</span>Args<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">></span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面的代码中，使用模板来提供基础的多类型支持。可以根据需要修改输出格式。</p><p>一般来说，最简单方法的是定义一个模板函数，以source_location为最后一个默认实参：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token keyword">typename</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> Args<span class="token operator">></span><span class="token keyword">void</span> <span class="token function">loger</span><span class="token punctuation">(</span>T<span class="token operator">&amp;&amp;</span> t<span class="token punctuation">,</span> Args<span class="token operator">&amp;&amp;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">,</span> <span class="token keyword">const</span> sl<span class="token operator">&amp;</span> loc <span class="token operator">=</span> sl<span class="token double-colon punctuation">::</span><span class="token function">current</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">/* ... */</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>但是编译器的模板推导并不能匹配到具体的函数。</p><p>所以只能另辟蹊径，使用类模板配合C++17的新特性<a href="https://zh.cppreference.com/w/cpp/language/class_template_argument_deduction">模板推导指引</a>。如上述代码中所示。同时使用一个模板函数<code>loger</code>来展开可变模板参数。</p><p>同时使用C++20最新特性modules，将整个文件模块化。所以需要支持C++20标准的编译器。<br>也可以使用传统的头文件的形式，只需去除相关关键字和语句即可。但是C++推导指引至少需要支持C++17。</p><p>同时为了防止多线程调试输出时错乱，使用了锁。简单输出可以删除以提高一点性能。</p><p>同时加上了调试宏，如果不想输出了只要在编译时加上<code>-DNDEBUG</code>选项，即可禁用所有输出。</p><h2 id="测试代码："><a href="#测试代码：" class="headerlink" title="测试代码："></a>测试代码：</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;source_location></span></span><span class="token keyword">import</span> <span class="token module">Loger</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token keyword">const</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">,</span> <span class="token string">"223"</span><span class="token punctuation">,</span> <span class="token string">"223"</span><span class="token punctuation">,</span> <span class="token string">"223"</span><span class="token punctuation">,</span> <span class="token string">"223"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">debug</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"2"</span><span class="token punctuation">,</span> <span class="token number">3.4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> var <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    debug<span class="token punctuation">&#123;</span>var<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的代码的两个include语句不能删除，有可能是G++编译器的支持或者其他原因，删除之后不能通过编译，根据错误信息猜测是因为实例化模板时<code>cout</code>和<code>source_location</code>需要。（若是其他原因恳请告知）,需要注意的是第三个输出需要使用统一初始化以避免声明冲突。</p><p>编译输出：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$  g++ -std<span class="token operator">=</span>c++20 -fmodules-ts Loger.cpp main.cc./a.out <span class="token punctuation">&#123;</span> <span class="token keyword">in</span> File: <span class="token punctuation">[</span>main.cc<span class="token punctuation">]</span>, Function: <span class="token punctuation">[</span>int main<span class="token punctuation">(</span>int, const char**<span class="token punctuation">)</span><span class="token punctuation">]</span>, Line: <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span>: <span class="token number">123</span> <span class="token number">223</span> <span class="token number">223</span> <span class="token number">223</span> <span class="token number">223</span> <span class="token punctuation">&#123;</span> <span class="token keyword">in</span> File: <span class="token punctuation">[</span>main.cc<span class="token punctuation">]</span>, Function: <span class="token punctuation">[</span>int main<span class="token punctuation">(</span>int, const char**<span class="token punctuation">)</span><span class="token punctuation">]</span>, Line: <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span>: <span class="token number">1</span> <span class="token number">2</span> <span class="token number">3.4</span><span class="token punctuation">&#123;</span> <span class="token keyword">in</span> File: <span class="token punctuation">[</span>main.cc<span class="token punctuation">]</span>, Function: <span class="token punctuation">[</span>int main<span class="token punctuation">(</span>int, const char**<span class="token punctuation">)</span><span class="token punctuation">]</span>, Line: <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span>: <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> cpp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> debug </tag>
            
            <tag> log </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用pcap库捕获数据包</title>
      <link href="/%E4%BD%BF%E7%94%A8pcap%E5%BA%93%E6%8D%95%E8%8E%B7%E6%95%B0%E6%8D%AE%E5%8C%85.html"/>
      <url>/%E4%BD%BF%E7%94%A8pcap%E5%BA%93%E6%8D%95%E8%8E%B7%E6%95%B0%E6%8D%AE%E5%8C%85.html</url>
      
        <content type="html"><![CDATA[<h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>数据包捕获对数据包和网络问题分析很都用，一般情况下我们可以使用<br>tcpdump或者wireshark工具捕获进行。但是如果我们需要对数据包进行一些<br>其他的工作，比如数据监控、分析等，就需要自己捕获数据包后自行处理。</p><h2 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h2><p>系统环境</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">uname</span> -aLinux DESKTOP-L4NCHLS <span class="token number">5.10</span>.16.3-microsoft-standard-WSL2 <span class="token comment">#1 SMP Fri Apr 2 22:23:49 UTC 2021 x86_64 x86_64 x86_64 GNU/Linux</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>捕获数据包使用的是和tcpdump同款的pcap库。</p><p>安装pcap库:</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> libpcap-dev$ dpkg -l libpcap-dev <span class="token assign-left variable">Desired</span><span class="token operator">=</span>Unknown/Install/Remove/Purge/Hold<span class="token operator">|</span> <span class="token assign-left variable">Status</span><span class="token operator">=</span>Not/Inst/Conf-files/Unpacked/halF-conf/Half-inst/trig-aWait/Trig-pend<span class="token operator">|</span>/ Err?<span class="token operator">=</span><span class="token punctuation">(</span>none<span class="token punctuation">)</span>/Reinst-required <span class="token punctuation">(</span>Status,Err: <span class="token assign-left variable">uppercase</span><span class="token operator">=</span>bad<span class="token punctuation">)</span><span class="token operator">||</span>/ Name              Version      Architecture Description+++-<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>-<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>-<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>-<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>ii  libpcap-dev:amd64 <span class="token number">1.9</span>.1-3      amd64        development library <span class="token keyword">for</span> libpcap <span class="token punctuation">(</span>transitional package<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>使用pcap捕获数据包需要根据网卡设备名称打开对应的设备，<br>获取设备句柄，然后在对应的设备句柄上捕获数据包。</p><p>这里我使用一个类来封装以下pcap库对应的操作。类的结构为：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">interface</span><span class="token punctuation">&#123;</span><span class="token keyword">private</span><span class="token operator">:</span>    set<span class="token operator">&lt;</span>string<span class="token operator">></span>     dev_name<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span>pcap_t<span class="token operator">*</span><span class="token operator">></span> dev_handles<span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">interface</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">~</span><span class="token function">interface</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span>  <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token keyword">int</span> count<span class="token punctuation">,</span> pcap_handler func<span class="token punctuation">,</span> u_char<span class="token operator">*</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">print_dev</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>dev_name</code>用于保存需要捕获数据包的网卡设备名称，<code>dev_handles</code>保存打开的设备句柄。</p><br>在构造函数中进行初始化操作。首先使用`ifaddrs`相关接口遍历可用的网卡设备（即非环回设备，up状态和running状态）保存网卡名称。然后使用pcap库`pcap_open_live`函数根据网卡名称打开对应的设备，获取设备句柄。`pcap_setnonblock`的作用是将捕获模式设为非阻塞。<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// The interface is up, not a loopback and running?</span><span class="token keyword">bool</span> <span class="token function">up_running</span><span class="token punctuation">(</span><span class="token keyword">int</span> ifa_flags<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token operator">!</span><span class="token punctuation">(</span>ifa_flags <span class="token operator">&amp;</span> IFF_LOOPBACK<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>ifa_flags <span class="token operator">&amp;</span> IFF_UP<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>           <span class="token punctuation">(</span>ifa_flags <span class="token operator">&amp;</span> IFF_RUNNING<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>interface<span class="token double-colon punctuation">::</span><span class="token function">interface</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">ifaddrs</span> <span class="token operator">*</span>ifaddr_list<span class="token punctuation">,</span> <span class="token operator">*</span>ifa<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getifaddrs</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ifaddr_list<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"failed to get interface addresses\n"</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>ifa <span class="token operator">=</span> ifaddr_list<span class="token punctuation">;</span> ifa <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> ifa <span class="token operator">=</span> ifa<span class="token operator">-></span>ifa_next<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ifa<span class="token operator">-></span>ifa_addr <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">||</span> ifa<span class="token operator">-></span>ifa_netmask <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">up_running</span><span class="token punctuation">(</span>ifa<span class="token operator">-></span>ifa_flags<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>        dev_name<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token function">string</span><span class="token punctuation">(</span>ifa<span class="token operator">-></span>ifa_name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">freeifaddrs</span><span class="token punctuation">(</span>ifaddr_list<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>string i<span class="token operator">:</span>dev_name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        pcap_t<span class="token operator">*</span> dev_hanlde <span class="token operator">=</span>            <span class="token function">pcap_open_live</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">65535</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> errbuf<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>dev_hanlde<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"open "</span> <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">" failed.\n"</span><span class="token punctuation">;</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">pcap_setnonblock</span><span class="token punctuation">(</span>dev_hanlde<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> errbuf<span class="token punctuation">)</span><span class="token punctuation">;</span>        dev_handles<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>dev_hanlde<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>析构函数中只需要关闭打开的设备句柄即可。<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token class-name">interface</span><span class="token double-colon punctuation">::</span><span class="token operator">~</span><span class="token function">interface</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>pcap_t<span class="token operator">*</span> i<span class="token operator">:</span>dev_handles<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">pcap_close</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>添加一个无关紧要的设备名称打印函数。<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> interface<span class="token double-colon punctuation">::</span><span class="token function">print_dev</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>string i<span class="token operator">:</span>dev_name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cout <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>最主要的是数据包捕获函数。捕获函数是对`pcap_dispatch`的简单封装。参数func是捕获数据包后的回调处理函数,也是我们自定义处理方式的地方。<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">typedef</span> <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>pcap_cb<span class="token punctuation">)</span><span class="token punctuation">(</span>u_char<span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">pcap_pkthdr</span><span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">const</span> u_char<span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> interface<span class="token double-colon punctuation">::</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token keyword">int</span> count<span class="token punctuation">,</span> pcap_handler func<span class="token punctuation">,</span> u_char<span class="token operator">*</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> ret<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>pcap_t<span class="token operator">*</span> i<span class="token operator">:</span>dev_handles<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        ret <span class="token operator">=</span> <span class="token function">pcap_dispatch</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> count<span class="token punctuation">,</span> func<span class="token punctuation">,</span> <span class="token punctuation">(</span>u_char<span class="token operator">*</span><span class="token punctuation">)</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">pcap_perror</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token string">"pcap_dispatch failed."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>这样之后，主函数就很简单，循环调用数据捕获函数就可以了。<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    interface in<span class="token punctuation">;</span>    in<span class="token punctuation">.</span><span class="token function">print_dev</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> in<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> process_cb<span class="token punctuation">,</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>后面比较重要的就是回调函数`process_cb`的实现。主要判断数据包的数据链路层类型。这里只处理以太网类型的包。可以根据需要处理其他的类型。<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/** * 第一个参数是 pcap_dispatch的最后一个参数，当收到足够数量的包后 * 会调用， 第二个参数是收到的数据包的pcap_pkthdr类型指针， * 第三个参数是收到的数据包数据 */</span><span class="token keyword">void</span> <span class="token function">process_cb</span><span class="token punctuation">(</span>u_char<span class="token operator">*</span> arg<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">pcap_pkthdr</span><span class="token operator">*</span> pkthdr<span class="token punctuation">,</span>                <span class="token keyword">const</span> u_char<span class="token operator">*</span> packet<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    pcap_t<span class="token operator">*</span> handle <span class="token operator">=</span> <span class="token punctuation">(</span>pcap_t<span class="token operator">*</span><span class="token punctuation">)</span>arg<span class="token punctuation">;</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token function">pcap_datalink</span><span class="token punctuation">(</span>handle<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">case</span> DLT_EN10MB<span class="token operator">:</span>            <span class="token function">ethernet_cb</span><span class="token punctuation">(</span>handle<span class="token punctuation">,</span> pkthdr<span class="token punctuation">,</span> packet<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> DLT_RAW<span class="token operator">:</span>        <span class="token keyword">case</span> DLT_NULL<span class="token operator">:</span>        <span class="token keyword">default</span><span class="token operator">:</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Unknown linktype %d"</span><span class="token punctuation">,</span> <span class="token function">pcap_datalink</span><span class="token punctuation">(</span>handle<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>在以太网数据包的回调函数中，继续判断数据包类型，这里只处理IP数据包。<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">ethernet_cb</span><span class="token punctuation">(</span>pcap_t<span class="token operator">*</span> handle<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">pcap_pkthdr</span><span class="token operator">*</span> pkthdr<span class="token punctuation">,</span>                 <span class="token keyword">const</span> u_char<span class="token operator">*</span> packet<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">ether_header</span><span class="token operator">*</span> ethernet <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ether_header</span><span class="token operator">*</span><span class="token punctuation">)</span>packet<span class="token punctuation">;</span>    u_char<span class="token operator">*</span>  payload  <span class="token operator">=</span> <span class="token punctuation">(</span>u_char<span class="token operator">*</span><span class="token punctuation">)</span>packet <span class="token operator">+</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ether_header</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">uint16_t</span> protocol <span class="token operator">=</span> <span class="token function">ntohs</span><span class="token punctuation">(</span>ethernet<span class="token operator">-></span>ether_type<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>protocol<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">case</span> ETHERTYPE_IP<span class="token operator">:</span>            <span class="token function">ip_cb</span><span class="token punctuation">(</span>handle<span class="token punctuation">,</span> pkthdr<span class="token punctuation">,</span> payload<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">default</span><span class="token operator">:</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>在IP数据包处理函数中，输出IP的数据包的源地址和目的地址。然后根据需要处理TCP数据包。<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">ip_cb</span><span class="token punctuation">(</span>pcap_t<span class="token operator">*</span> handle<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">pcap_pkthdr</span><span class="token operator">*</span> pkthdr<span class="token punctuation">,</span>           <span class="token keyword">const</span> u_char<span class="token operator">*</span> packet<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">ip</span><span class="token operator">*</span> ip <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ip</span><span class="token operator">*</span><span class="token punctuation">)</span>packet<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"------ ip connection ------\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span><span class="token operator">*</span> srcIp <span class="token operator">=</span> <span class="token function">strdup</span><span class="token punctuation">(</span><span class="token function">inet_ntoa</span><span class="token punctuation">(</span>ip<span class="token operator">-></span>ip_src<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span><span class="token operator">*</span> desIp <span class="token operator">=</span> <span class="token function">strdup</span><span class="token punctuation">(</span><span class="token function">inet_ntoa</span><span class="token punctuation">(</span>ip<span class="token operator">-></span>ip_dst<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"src ip:%s\tdest ip:%s\tid:%d\n"</span><span class="token punctuation">,</span> srcIp<span class="token punctuation">,</span> desIp<span class="token punctuation">,</span> ip<span class="token operator">-></span>ip_id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>srcIp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>desIp<span class="token punctuation">)</span><span class="token punctuation">;</span>    u_char<span class="token operator">*</span> payload <span class="token operator">=</span> <span class="token punctuation">(</span>u_char<span class="token operator">*</span><span class="token punctuation">)</span>packet <span class="token operator">+</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ip</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>ip<span class="token operator">-></span>ip_p<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">case</span> IPPROTO_TCP<span class="token operator">:</span>            <span class="token function">tcp_cb</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> IPPROTO_UDP<span class="token operator">:</span>            <span class="token comment">// udp_cb(payload);</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">default</span><span class="token operator">:</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"unsuport protocol %d\n"</span><span class="token punctuation">,</span> ip<span class="token operator">-></span>ip_p<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>在TCP数据处理函数中简单输出数据包的端口号和一些标志位。<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">tcp_cb</span><span class="token punctuation">(</span><span class="token keyword">const</span> u_char<span class="token operator">*</span> data<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">tcphdr</span><span class="token operator">*</span> tcp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">tcphdr</span><span class="token operator">*</span><span class="token punctuation">)</span>data<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"tcp src port=%d\tdist port=%d ack=%d fin=%d syn=%d\n"</span><span class="token punctuation">,</span>           <span class="token function">ntohs</span><span class="token punctuation">(</span>tcp<span class="token operator">-></span>source<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">ntohs</span><span class="token punctuation">(</span>tcp<span class="token operator">-></span>dest<span class="token punctuation">)</span><span class="token punctuation">,</span> tcp<span class="token operator">-></span>ack<span class="token punctuation">,</span> tcp<span class="token operator">-></span>fin<span class="token punctuation">,</span> tcp<span class="token operator">-></span>syn<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>tcp<span class="token operator">-></span>syn<span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"tcp connetion create !!!!!!!!!!!!!!!!!!!!!!!!!!!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>tcp<span class="token operator">-></span>fin<span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"tcp connection close !!!!!!!!!!!!!!!!!!!!!!!!!!!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><p>注意编译的时候需要连接pcap库。运行时需要超级管理员权限（操作网卡）。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ g++ main.cc -lpcap$ <span class="token function">sudo</span> ./a.outeth0------ <span class="token function">ip</span> connection ------src ip:172.17.120.7     dest ip:172.17.112.1    id:5603tcp src <span class="token assign-left variable">port</span><span class="token operator">=</span><span class="token number">43091</span>      dist <span class="token assign-left variable">port</span><span class="token operator">=</span><span class="token number">53623</span> <span class="token assign-left variable">ack</span><span class="token operator">=</span><span class="token number">1</span> <span class="token assign-left variable">fin</span><span class="token operator">=</span><span class="token number">0</span> <span class="token assign-left variable">syn</span><span class="token operator">=</span><span class="token number">0</span>------ <span class="token function">ip</span> connection ------src ip:172.17.120.7     dest ip:172.17.112.1    id:30431tcp src <span class="token assign-left variable">port</span><span class="token operator">=</span><span class="token number">43091</span>      dist <span class="token assign-left variable">port</span><span class="token operator">=</span><span class="token number">62669</span> <span class="token assign-left variable">ack</span><span class="token operator">=</span><span class="token number">1</span> <span class="token assign-left variable">fin</span><span class="token operator">=</span><span class="token number">0</span> <span class="token assign-left variable">syn</span><span class="token operator">=</span><span class="token number">0</span>------ <span class="token function">ip</span> connection ------src ip:172.17.112.1     dest ip:172.17.120.7    id:49514tcp src <span class="token assign-left variable">port</span><span class="token operator">=</span><span class="token number">62669</span>      dist <span class="token assign-left variable">port</span><span class="token operator">=</span><span class="token number">43091</span> <span class="token assign-left variable">ack</span><span class="token operator">=</span><span class="token number">1</span> <span class="token assign-left variable">fin</span><span class="token operator">=</span><span class="token number">0</span> <span class="token assign-left variable">syn</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">..</span>. <span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;arpa/inet.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;ifaddrs.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;net/ethernet.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;net/if.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;netinet/in.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;netinet/ip.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;netinet/ip6.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;netinet/tcp.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;netinet/udp.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;pcap.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;signal.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/socket.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdlib></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;set></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">char</span> errbuf<span class="token punctuation">[</span>PCAP_ERRBUF_SIZE<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// The interface is up, not a loopback and running?</span><span class="token keyword">bool</span> <span class="token function">up_running</span><span class="token punctuation">(</span><span class="token keyword">int</span> ifa_flags<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token operator">!</span><span class="token punctuation">(</span>ifa_flags <span class="token operator">&amp;</span> IFF_LOOPBACK<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>ifa_flags <span class="token operator">&amp;</span> IFF_UP<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>           <span class="token punctuation">(</span>ifa_flags <span class="token operator">&amp;</span> IFF_RUNNING<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">bool</span> <span class="token function">is_related</span><span class="token punctuation">(</span>string ip<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    vector<span class="token operator">&lt;</span>string<span class="token operator">></span> ips<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">ifaddrs</span> <span class="token operator">*</span>ifaddr_list<span class="token punctuation">,</span> <span class="token operator">*</span>ifa<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getifaddrs</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ifaddr_list<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"failed to get interface addresses"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">char</span>  local<span class="token punctuation">[</span>INET_ADDRSTRLEN<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">void</span><span class="token operator">*</span> tmpAddrPtr <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>ifa <span class="token operator">=</span> ifaddr_list<span class="token punctuation">;</span> ifa <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> ifa <span class="token operator">=</span> ifa<span class="token operator">-></span>ifa_next<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ifa<span class="token operator">-></span>ifa_addr <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">||</span> ifa<span class="token operator">-></span>ifa_netmask <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>        tmpAddrPtr <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr_in</span><span class="token operator">*</span><span class="token punctuation">)</span>ifa<span class="token operator">-></span>ifa_addr<span class="token punctuation">)</span><span class="token operator">-></span>sin_addr<span class="token punctuation">;</span>        <span class="token function">inet_ntop</span><span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span> tmpAddrPtr<span class="token punctuation">,</span> local<span class="token punctuation">,</span> INET_ADDRSTRLEN<span class="token punctuation">)</span><span class="token punctuation">;</span>        ips<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token function">string</span><span class="token punctuation">(</span>local<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">freeifaddrs</span><span class="token punctuation">(</span>ifaddr_list<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator it <span class="token operator">=</span> ips<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it <span class="token operator">!=</span> ips<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>it <span class="token operator">==</span> ip<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">typedef</span> <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>pcap_cb<span class="token punctuation">)</span><span class="token punctuation">(</span>u_char<span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">pcap_pkthdr</span><span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">const</span> u_char<span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">interface</span><span class="token punctuation">&#123;</span><span class="token keyword">private</span><span class="token operator">:</span>    set<span class="token operator">&lt;</span>string<span class="token operator">></span>     dev_name<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span>pcap_t<span class="token operator">*</span><span class="token operator">></span> dev_handles<span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">interface</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">~</span><span class="token function">interface</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span>  <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token keyword">int</span> count<span class="token punctuation">,</span> pcap_handler func<span class="token punctuation">,</span> u_char<span class="token operator">*</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">print_dev</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">tcp_cb</span><span class="token punctuation">(</span><span class="token keyword">const</span> u_char<span class="token operator">*</span> data<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">tcphdr</span><span class="token operator">*</span> tcp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">tcphdr</span><span class="token operator">*</span><span class="token punctuation">)</span>data<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"tcp src port=%d\tdist port=%d ack=%d fin=%d syn=%d\n"</span><span class="token punctuation">,</span>           <span class="token function">ntohs</span><span class="token punctuation">(</span>tcp<span class="token operator">-></span>source<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">ntohs</span><span class="token punctuation">(</span>tcp<span class="token operator">-></span>dest<span class="token punctuation">)</span><span class="token punctuation">,</span> tcp<span class="token operator">-></span>ack<span class="token punctuation">,</span> tcp<span class="token operator">-></span>fin<span class="token punctuation">,</span> tcp<span class="token operator">-></span>syn<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>tcp<span class="token operator">-></span>syn<span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"tcp connetion create !!!!!!!!!!!!!!!!!!!!!!!!!!!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>tcp<span class="token operator">-></span>fin<span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"tcp connection close !!!!!!!!!!!!!!!!!!!!!!!!!!!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">udp_cb</span><span class="token punctuation">(</span><span class="token keyword">const</span> u_char<span class="token operator">*</span> data<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">udphdr</span><span class="token operator">*</span> udp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">udphdr</span><span class="token operator">*</span><span class="token punctuation">)</span>data<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"udp src port=%d\tdist port=%d\n"</span><span class="token punctuation">,</span> <span class="token function">ntohs</span><span class="token punctuation">(</span>udp<span class="token operator">-></span>source<span class="token punctuation">)</span><span class="token punctuation">,</span>           <span class="token function">ntohs</span><span class="token punctuation">(</span>udp<span class="token operator">-></span>dest<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">ip_cb</span><span class="token punctuation">(</span>pcap_t<span class="token operator">*</span> handle<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">pcap_pkthdr</span><span class="token operator">*</span> pkthdr<span class="token punctuation">,</span>           <span class="token keyword">const</span> u_char<span class="token operator">*</span> packet<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">ip</span><span class="token operator">*</span> ip <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ip</span><span class="token operator">*</span><span class="token punctuation">)</span>packet<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"------ ip connection ------\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span><span class="token operator">*</span> srcIp <span class="token operator">=</span> <span class="token function">strdup</span><span class="token punctuation">(</span><span class="token function">inet_ntoa</span><span class="token punctuation">(</span>ip<span class="token operator">-></span>ip_src<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span><span class="token operator">*</span> desIp <span class="token operator">=</span> <span class="token function">strdup</span><span class="token punctuation">(</span><span class="token function">inet_ntoa</span><span class="token punctuation">(</span>ip<span class="token operator">-></span>ip_dst<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"src ip:%s\tdest ip:%s\tid:%d\n"</span><span class="token punctuation">,</span> srcIp<span class="token punctuation">,</span> desIp<span class="token punctuation">,</span> ip<span class="token operator">-></span>ip_id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>srcIp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>desIp<span class="token punctuation">)</span><span class="token punctuation">;</span>    u_char<span class="token operator">*</span> payload <span class="token operator">=</span> <span class="token punctuation">(</span>u_char<span class="token operator">*</span><span class="token punctuation">)</span>packet <span class="token operator">+</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ip</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>ip<span class="token operator">-></span>ip_p<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">case</span> IPPROTO_TCP<span class="token operator">:</span>            <span class="token function">tcp_cb</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> IPPROTO_UDP<span class="token operator">:</span>            <span class="token comment">// udp_cb(payload);</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">default</span><span class="token operator">:</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"unsuport protocol %d\n"</span><span class="token punctuation">,</span> ip<span class="token operator">-></span>ip_p<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">ethernet_cb</span><span class="token punctuation">(</span>pcap_t<span class="token operator">*</span> handle<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">pcap_pkthdr</span><span class="token operator">*</span> pkthdr<span class="token punctuation">,</span>                 <span class="token keyword">const</span> u_char<span class="token operator">*</span> packet<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">ether_header</span><span class="token operator">*</span> ethernet <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ether_header</span><span class="token operator">*</span><span class="token punctuation">)</span>packet<span class="token punctuation">;</span>    u_char<span class="token operator">*</span>  payload  <span class="token operator">=</span> <span class="token punctuation">(</span>u_char<span class="token operator">*</span><span class="token punctuation">)</span>packet <span class="token operator">+</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ether_header</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">uint16_t</span> protocol <span class="token operator">=</span> <span class="token function">ntohs</span><span class="token punctuation">(</span>ethernet<span class="token operator">-></span>ether_type<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>protocol<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">case</span> ETHERTYPE_IP<span class="token operator">:</span>            <span class="token function">ip_cb</span><span class="token punctuation">(</span>handle<span class="token punctuation">,</span> pkthdr<span class="token punctuation">,</span> payload<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">default</span><span class="token operator">:</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 第一个参数是 pcap_dispatch的最后一个参数，当收到足够数量的包后 * 会调用， 第二个参数是收到的数据包的pcap_pkthdr类型指针， * 第三个参数是收到的数据包数据 */</span><span class="token keyword">void</span> <span class="token function">process_cb</span><span class="token punctuation">(</span>u_char<span class="token operator">*</span> arg<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">pcap_pkthdr</span><span class="token operator">*</span> pkthdr<span class="token punctuation">,</span>                <span class="token keyword">const</span> u_char<span class="token operator">*</span> packet<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    pcap_t<span class="token operator">*</span> handle <span class="token operator">=</span> <span class="token punctuation">(</span>pcap_t<span class="token operator">*</span><span class="token punctuation">)</span>arg<span class="token punctuation">;</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token function">pcap_datalink</span><span class="token punctuation">(</span>handle<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">case</span> DLT_EN10MB<span class="token operator">:</span>            <span class="token function">ethernet_cb</span><span class="token punctuation">(</span>handle<span class="token punctuation">,</span> pkthdr<span class="token punctuation">,</span> packet<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> DLT_RAW<span class="token operator">:</span>        <span class="token keyword">case</span> DLT_NULL<span class="token operator">:</span>        <span class="token keyword">default</span><span class="token operator">:</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Unknown linktype %d"</span><span class="token punctuation">,</span> <span class="token function">pcap_datalink</span><span class="token punctuation">(</span>handle<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    interface in<span class="token punctuation">;</span>    in<span class="token punctuation">.</span><span class="token function">print_dev</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> in<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> process_cb<span class="token punctuation">,</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>interface<span class="token double-colon punctuation">::</span><span class="token function">interface</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">ifaddrs</span> <span class="token operator">*</span>ifaddr_list<span class="token punctuation">,</span> <span class="token operator">*</span>ifa<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getifaddrs</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ifaddr_list<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"failed to get interface addresses"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>ifa <span class="token operator">=</span> ifaddr_list<span class="token punctuation">;</span> ifa <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> ifa <span class="token operator">=</span> ifa<span class="token operator">-></span>ifa_next<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ifa<span class="token operator">-></span>ifa_addr <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">||</span> ifa<span class="token operator">-></span>ifa_netmask <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">up_running</span><span class="token punctuation">(</span>ifa<span class="token operator">-></span>ifa_flags<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>        dev_name<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token function">string</span><span class="token punctuation">(</span>ifa<span class="token operator">-></span>ifa_name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">freeifaddrs</span><span class="token punctuation">(</span>ifaddr_list<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>string i <span class="token operator">:</span> dev_name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        pcap_t<span class="token operator">*</span> dev_hanlde <span class="token operator">=</span> <span class="token function">pcap_open_live</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">65535</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> errbuf<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>dev_hanlde<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"open "</span> <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">" failed."</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">pcap_setnonblock</span><span class="token punctuation">(</span>dev_hanlde<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> errbuf<span class="token punctuation">)</span><span class="token punctuation">;</span>        dev_handles<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>dev_hanlde<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token class-name">interface</span><span class="token double-colon punctuation">::</span><span class="token operator">~</span><span class="token function">interface</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>pcap_t<span class="token operator">*</span> i <span class="token operator">:</span> dev_handles<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">pcap_close</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> interface<span class="token double-colon punctuation">::</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token keyword">int</span> count<span class="token punctuation">,</span> pcap_handler func<span class="token punctuation">,</span> u_char<span class="token operator">*</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> ret<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>pcap_t<span class="token operator">*</span> i <span class="token operator">:</span> dev_handles<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        ret <span class="token operator">=</span> <span class="token function">pcap_dispatch</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> count<span class="token punctuation">,</span> func<span class="token punctuation">,</span> <span class="token punctuation">(</span>u_char<span class="token operator">*</span><span class="token punctuation">)</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">pcap_perror</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token string">"pcap_dispatch failed."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> interface<span class="token double-colon punctuation">::</span><span class="token function">print_dev</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>string i <span class="token operator">:</span> dev_name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cout <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
            <tag> IP </tag>
            
            <tag> pcap </tag>
            
            <tag> TCP </tag>
            
            <tag> UDP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux双向链表</title>
      <link href="/Linux%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8.html"/>
      <url>/Linux%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8.html</url>
      
        <content type="html"><![CDATA[<p>从Linux内核中提取的双向链表。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">_LINUX_LIST_H</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_LINUX_LIST_H</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression"><span class="token constant">NULL</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">NULL</span> <span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0</span><span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stddef.h></span></span><span class="token comment">/** * container_of - cast a member of a structure out to the containing structure * @ptr:        the pointer to the member. * @type:       the type of the container struct this is embedded in. * @member:     the name of the member within the struct. * **/</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">container_of</span><span class="token expression"><span class="token punctuation">(</span>ptr<span class="token punctuation">,</span> type<span class="token punctuation">,</span> member<span class="token punctuation">)</span>                   </span><span class="token punctuation">\</span>    <span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>                                                    </span><span class="token punctuation">\</span>        <span class="token expression"><span class="token keyword">const</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>type<span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">-></span>member<span class="token punctuation">)</span><span class="token operator">*</span> __mptr <span class="token operator">=</span> <span class="token punctuation">(</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span> </span><span class="token punctuation">\</span>        <span class="token expression"><span class="token punctuation">(</span>type<span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>__mptr <span class="token operator">-</span> <span class="token function">offsetof</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> member<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span><span class="token punctuation">\</span>    <span class="token expression"><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></span></span><span class="token comment">/* * Simple doubly linked list implementation. * * Some of the internal functions ("__xxx") are useful when * manipulating whole lists rather than single entries, as * sometimes we already know the next/prev entries and we can * generate better code by using them directly rather than * using the generic single-entry routines. */</span><span class="token keyword">struct</span> <span class="token class-name">list_head</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">list_head</span> <span class="token operator">*</span>next<span class="token punctuation">,</span> <span class="token operator">*</span>prev<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">LIST_HEAD_INIT</span><span class="token expression"><span class="token punctuation">(</span>name<span class="token punctuation">)</span> </span><span class="token punctuation">\</span>    <span class="token expression"><span class="token punctuation">&#123;</span>                        </span><span class="token punctuation">\</span>        <span class="token expression"><span class="token operator">&amp;</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>     </span><span class="token punctuation">\</span>    <span class="token expression"><span class="token punctuation">&#125;</span></span></span><span class="token comment">/*lint -e(773) */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">LIST_HEAD</span><span class="token expression"><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token keyword">struct</span> <span class="token class-name">list_head</span> name <span class="token operator">=</span> <span class="token function">LIST_HEAD_INIT</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span></span></span><span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">INIT_LIST_HEAD</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">list_head</span><span class="token operator">*</span> list<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    list<span class="token operator">-></span>next <span class="token operator">=</span> list<span class="token punctuation">;</span>    list<span class="token operator">-></span>prev <span class="token operator">=</span> list<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* * Insert a new entry between two known consecutive entries. * * This is only for internal list manipulation where we know * the prev/next entries already! */</span><span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">__list_add</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">list_head</span><span class="token operator">*</span> new<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">list_head</span><span class="token operator">*</span> prev<span class="token punctuation">,</span>                              <span class="token keyword">struct</span> <span class="token class-name">list_head</span><span class="token operator">*</span> next<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    next<span class="token operator">-></span>prev <span class="token operator">=</span> new<span class="token punctuation">;</span>    new<span class="token operator">-></span>next  <span class="token operator">=</span> next<span class="token punctuation">;</span>    new<span class="token operator">-></span>prev  <span class="token operator">=</span> prev<span class="token punctuation">;</span>    prev<span class="token operator">-></span>next <span class="token operator">=</span> new<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * list_add - add a new entry * @new: new entry to be added * @head: list head to add it after * * Insert a new entry after the specified head. * This is good for implementing stacks. */</span><span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">list_add</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">list_head</span><span class="token operator">*</span> new<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">list_head</span><span class="token operator">*</span> head<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">__list_add</span><span class="token punctuation">(</span>new<span class="token punctuation">,</span> head<span class="token punctuation">,</span> head<span class="token operator">-></span>next<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * list_add_tail - add a new entry * @new: new entry to be added * @head: list head to add it before * * Insert a new entry before the specified head. * This is useful for implementing queues. */</span><span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">list_add_tail</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">list_head</span><span class="token operator">*</span> new<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">list_head</span><span class="token operator">*</span> head<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">__list_add</span><span class="token punctuation">(</span>new<span class="token punctuation">,</span> head<span class="token operator">-></span>prev<span class="token punctuation">,</span> head<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* * Delete a list entry by making the prev/next entries * point to each other. * * This is only for internal list manipulation where we know * the prev/next entries already! */</span><span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">__list_del</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">list_head</span><span class="token operator">*</span> prev<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">list_head</span><span class="token operator">*</span> next<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    next<span class="token operator">-></span>prev <span class="token operator">=</span> prev<span class="token punctuation">;</span>    prev<span class="token operator">-></span>next <span class="token operator">=</span> next<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * list_del - deletes entry from list. * @entry: the element to delete from the list. * Note: list_empty() on entry does not return true after this, the entry is * in an undefined state. */</span><span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">list_del</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">list_head</span><span class="token operator">*</span> entry<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">__list_del</span><span class="token punctuation">(</span>entry<span class="token operator">-></span>prev<span class="token punctuation">,</span> entry<span class="token operator">-></span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>    entry<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    entry<span class="token operator">-></span>prev <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * list_replace - replace old entry by new one * @old : the element to be replaced * @new : the new element to insert * * If @old was empty, it will be overwritten. */</span><span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">list_replace</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">list_head</span><span class="token operator">*</span> old<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">list_head</span><span class="token operator">*</span> new<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    new<span class="token operator">-></span>next       <span class="token operator">=</span> old<span class="token operator">-></span>next<span class="token punctuation">;</span>    new<span class="token operator">-></span>next<span class="token operator">-></span>prev <span class="token operator">=</span> new<span class="token punctuation">;</span>    new<span class="token operator">-></span>prev       <span class="token operator">=</span> old<span class="token operator">-></span>prev<span class="token punctuation">;</span>    new<span class="token operator">-></span>prev<span class="token operator">-></span>next <span class="token operator">=</span> new<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">list_replace_init</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">list_head</span><span class="token operator">*</span> old<span class="token punctuation">,</span>                                     <span class="token keyword">struct</span> <span class="token class-name">list_head</span><span class="token operator">*</span> new<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">list_replace</span><span class="token punctuation">(</span>old<span class="token punctuation">,</span> new<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">INIT_LIST_HEAD</span><span class="token punctuation">(</span>old<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">list_empty</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">list_head</span><span class="token operator">*</span> head<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/** * list_move_lists - move all entries of from to list to. * @from: of which list entries will be moved from. * @to: of which list entries will be moved to. */</span><span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">list_move_lists</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">list_head</span><span class="token operator">*</span> from<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">list_head</span><span class="token operator">*</span> to<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">list_empty</span><span class="token punctuation">(</span>from<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    to<span class="token operator">-></span>next <span class="token operator">=</span> from<span class="token operator">-></span>next<span class="token punctuation">;</span>    to<span class="token operator">-></span>prev <span class="token operator">=</span> from<span class="token operator">-></span>prev<span class="token punctuation">;</span>    from<span class="token operator">-></span>prev<span class="token operator">-></span>next <span class="token operator">=</span> to<span class="token punctuation">;</span>    from<span class="token operator">-></span>next<span class="token operator">-></span>prev <span class="token operator">=</span> to<span class="token punctuation">;</span>    <span class="token comment">/* set from's prev and next to set list from empty. */</span>    from<span class="token operator">-></span>prev <span class="token operator">=</span> from<span class="token punctuation">;</span>    from<span class="token operator">-></span>next <span class="token operator">=</span> from<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * list_del_init - deletes entry from list and reinitialize it. * @entry: the element to delete from the list. */</span><span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">list_del_init</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">list_head</span><span class="token operator">*</span> entry<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">__list_del</span><span class="token punctuation">(</span>entry<span class="token operator">-></span>prev<span class="token punctuation">,</span> entry<span class="token operator">-></span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">INIT_LIST_HEAD</span><span class="token punctuation">(</span>entry<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * list_move - delete from one list and add as another's head * @list: the entry to move * @head: the head that will precede our entry */</span><span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">list_move</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">list_head</span><span class="token operator">*</span> list<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">list_head</span><span class="token operator">*</span> head<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">__list_del</span><span class="token punctuation">(</span>list<span class="token operator">-></span>prev<span class="token punctuation">,</span> list<span class="token operator">-></span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">list_add</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> head<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * list_move_tail - delete from one list and add as another's tail * @list: the entry to move * @head: the head that will follow our entry */</span><span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">list_move_tail</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">list_head</span><span class="token operator">*</span> list<span class="token punctuation">,</span>                                  <span class="token keyword">struct</span> <span class="token class-name">list_head</span><span class="token operator">*</span> head<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">__list_del</span><span class="token punctuation">(</span>list<span class="token operator">-></span>prev<span class="token punctuation">,</span> list<span class="token operator">-></span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">list_add_tail</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> head<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * list_is_last - tests whether @list is the last entry in list @head * @list: the entry to test * @head: the head of the list */</span><span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">list_is_last</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">list_head</span><span class="token operator">*</span> list<span class="token punctuation">,</span>                               <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">list_head</span><span class="token operator">*</span> head<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> list<span class="token operator">-></span>next <span class="token operator">==</span> head<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * list_empty - tests whether a list is empty * @head: the list to test. */</span><span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">list_empty</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">list_head</span><span class="token operator">*</span> head<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> head<span class="token operator">-></span>next <span class="token operator">==</span> head<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * list_empty_careful - tests whether a list is empty and not being modified * @head: the list to test * * Description: * tests whether a list is empty _and_ checks that no other CPU might be * in the process of modifying either member (next or prev) * * NOTE: using list_empty_careful() without synchronization * can only be safe if the only activity that can happen * to the list entry is list_del_init(). Eg. it cannot be used * if another CPU could re-list_add() it. */</span><span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">list_empty_careful</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">list_head</span><span class="token operator">*</span> head<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">list_head</span><span class="token operator">*</span> next <span class="token operator">=</span> head<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>next <span class="token operator">==</span> head<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>next <span class="token operator">==</span> head<span class="token operator">-></span>prev<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * list_rotate_left - rotate the list to the left * @head: the head of the list */</span><span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">list_rotate_left</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">list_head</span><span class="token operator">*</span> head<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">list_head</span><span class="token operator">*</span> first<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">list_empty</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        first <span class="token operator">=</span> head<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token function">list_move_tail</span><span class="token punctuation">(</span>first<span class="token punctuation">,</span> head<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * list_is_singular - tests whether a list has just one entry. * @head: the list to test. */</span><span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">list_is_singular</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">list_head</span><span class="token operator">*</span> head<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token operator">!</span><span class="token function">list_empty</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>head<span class="token operator">-></span>next <span class="token operator">==</span> head<span class="token operator">-></span>prev<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">__list_cut_position</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">list_head</span><span class="token operator">*</span> list<span class="token punctuation">,</span>                                       <span class="token keyword">struct</span> <span class="token class-name">list_head</span><span class="token operator">*</span> head<span class="token punctuation">,</span>                                       <span class="token keyword">struct</span> <span class="token class-name">list_head</span><span class="token operator">*</span> entry<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">list_head</span><span class="token operator">*</span> new_first <span class="token operator">=</span> entry<span class="token operator">-></span>next<span class="token punctuation">;</span>    list<span class="token operator">-></span>next                  <span class="token operator">=</span> head<span class="token operator">-></span>next<span class="token punctuation">;</span>    list<span class="token operator">-></span>next<span class="token operator">-></span>prev            <span class="token operator">=</span> list<span class="token punctuation">;</span>    list<span class="token operator">-></span>prev                  <span class="token operator">=</span> entry<span class="token punctuation">;</span>    entry<span class="token operator">-></span>next                 <span class="token operator">=</span> list<span class="token punctuation">;</span>    head<span class="token operator">-></span>next                  <span class="token operator">=</span> new_first<span class="token punctuation">;</span>    new_first<span class="token operator">-></span>prev             <span class="token operator">=</span> head<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * list_cut_position - cut a list into two * @list: a new list to add all removed entries * @head: a list with entries * @entry: an entry within head, could be the head itself *and if so we won't cut the list * * This helper moves the initial part of @head, up to and * including @entry, from @head to @list. You should * pass on @entry an element you know is on @head. @list * should be an empty list or a list you do not care about * losing its data. * */</span><span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">list_cut_position</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">list_head</span><span class="token operator">*</span> list<span class="token punctuation">,</span>                                     <span class="token keyword">struct</span> <span class="token class-name">list_head</span><span class="token operator">*</span> head<span class="token punctuation">,</span>                                     <span class="token keyword">struct</span> <span class="token class-name">list_head</span><span class="token operator">*</span> entry<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">list_empty</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">list_is_singular</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>head<span class="token operator">-></span>next <span class="token operator">!=</span> entry <span class="token operator">&amp;&amp;</span> head <span class="token operator">!=</span> entry<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>entry <span class="token operator">==</span> head<span class="token punctuation">)</span>        <span class="token function">INIT_LIST_HEAD</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token function">__list_cut_position</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> head<span class="token punctuation">,</span> entry<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">__list_splice</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">list_head</span><span class="token operator">*</span> list<span class="token punctuation">,</span>                                 <span class="token keyword">struct</span> <span class="token class-name">list_head</span><span class="token operator">*</span> prev<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">list_head</span><span class="token operator">*</span> next<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">list_head</span><span class="token operator">*</span> first <span class="token operator">=</span> list<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">list_head</span><span class="token operator">*</span> last  <span class="token operator">=</span> list<span class="token operator">-></span>prev<span class="token punctuation">;</span>    first<span class="token operator">-></span>prev <span class="token operator">=</span> prev<span class="token punctuation">;</span>    prev<span class="token operator">-></span>next  <span class="token operator">=</span> first<span class="token punctuation">;</span>    last<span class="token operator">-></span>next <span class="token operator">=</span> next<span class="token punctuation">;</span>    next<span class="token operator">-></span>prev <span class="token operator">=</span> last<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * list_splice - join two lists, this is designed for stacks * @list: the new list to add. * @head: the place to add it in the first list. */</span><span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">list_splice</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">list_head</span><span class="token operator">*</span> list<span class="token punctuation">,</span>                               <span class="token keyword">struct</span> <span class="token class-name">list_head</span><span class="token operator">*</span>       head<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">list_empty</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">__list_splice</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> head<span class="token punctuation">,</span> head<span class="token operator">-></span>next<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * list_splice_tail - join two lists, each list being a queue * @list: the new list to add. * @head: the place to add it in the first list. */</span><span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">list_splice_tail</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">list_head</span><span class="token operator">*</span> list<span class="token punctuation">,</span>                                    <span class="token keyword">struct</span> <span class="token class-name">list_head</span><span class="token operator">*</span> head<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">list_empty</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">__list_splice</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> head<span class="token operator">-></span>prev<span class="token punctuation">,</span> head<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * list_splice_init - join two lists and reinitialise the emptied list. * @list: the new list to add. * @head: the place to add it in the first list. * * The list at @list is reinitialised */</span><span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">list_splice_init</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">list_head</span><span class="token operator">*</span> list<span class="token punctuation">,</span>                                    <span class="token keyword">struct</span> <span class="token class-name">list_head</span><span class="token operator">*</span> head<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">list_empty</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">__list_splice</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> head<span class="token punctuation">,</span> head<span class="token operator">-></span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">INIT_LIST_HEAD</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * list_splice_tail_init - join two lists and reinitialise the emptied list * @list: the new list to add. * @head: the place to add it in the first list. * * Each of the lists is a queue. * The list at @list is reinitialised */</span><span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">list_splice_tail_init</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">list_head</span><span class="token operator">*</span> list<span class="token punctuation">,</span>                                         <span class="token keyword">struct</span> <span class="token class-name">list_head</span><span class="token operator">*</span> head<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">list_empty</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">__list_splice</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> head<span class="token operator">-></span>prev<span class="token punctuation">,</span> head<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">INIT_LIST_HEAD</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * list_entry - get the struct for this entry * @ptr:the &amp;struct list_head pointer. * @type:the type of the struct this is embedded in. * @member:the name of the list_struct within the struct. */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">list_entry</span><span class="token expression"><span class="token punctuation">(</span>ptr<span class="token punctuation">,</span> type<span class="token punctuation">,</span> member<span class="token punctuation">)</span> <span class="token function">container_of</span><span class="token punctuation">(</span>ptr<span class="token punctuation">,</span> type<span class="token punctuation">,</span> member<span class="token punctuation">)</span></span></span><span class="token comment">/** * list_first_entry - get the first element from a list * @ptr:the list head to take the element from. * @type:the type of the struct this is embedded in. * @member:the name of the list_struct within the struct. * * Note, that list is expected to be not empty. */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">list_first_entry</span><span class="token expression"><span class="token punctuation">(</span>ptr<span class="token punctuation">,</span> type<span class="token punctuation">,</span> member<span class="token punctuation">)</span> </span><span class="token punctuation">\</span>    <span class="token expression"><span class="token function">list_entry</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span><span class="token operator">-></span>next<span class="token punctuation">,</span> type<span class="token punctuation">,</span> member<span class="token punctuation">)</span></span></span><span class="token comment">/** * list_for_each-iterate over a list * @pos:the &amp;struct list_head to use as a loop cursor. * @head:the head for your list. */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">list_for_each</span><span class="token expression"><span class="token punctuation">(</span>pos<span class="token punctuation">,</span> head<span class="token punctuation">)</span> </span><span class="token punctuation">\</span>    <span class="token expression"><span class="token keyword">for</span> <span class="token punctuation">(</span>pos <span class="token operator">=</span> <span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token operator">-></span>next<span class="token punctuation">;</span> pos <span class="token operator">!=</span> <span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span> pos <span class="token operator">=</span> pos<span class="token operator">-></span>next<span class="token punctuation">)</span></span></span><span class="token comment">/** * __list_for_each-iterate over a list * @pos:the &amp;struct list_head to use as a loop cursor. * @head:the head for your list. * * This variant differs from list_for_each() in that it's the * simplest possible list iteration code, no prefetching is done. * Use this for code that knows the list to be very short (empty * or 1 entry) most of the time. */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">__list_for_each</span><span class="token expression"><span class="token punctuation">(</span>pos<span class="token punctuation">,</span> head<span class="token punctuation">)</span> </span><span class="token punctuation">\</span>    <span class="token expression"><span class="token keyword">for</span> <span class="token punctuation">(</span>pos <span class="token operator">=</span> <span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token operator">-></span>next<span class="token punctuation">;</span> pos <span class="token operator">!=</span> <span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span> pos <span class="token operator">=</span> pos<span class="token operator">-></span>next<span class="token punctuation">)</span></span></span><span class="token comment">/** * list_for_each_prev-iterate over a list backwards * @pos:the &amp;struct list_head to use as a loop cursor. * @head:the head for your list. */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">list_for_each_prev</span><span class="token expression"><span class="token punctuation">(</span>pos<span class="token punctuation">,</span> head<span class="token punctuation">)</span> </span><span class="token punctuation">\</span>    <span class="token expression"><span class="token keyword">for</span> <span class="token punctuation">(</span>pos <span class="token operator">=</span> <span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token operator">-></span>prev<span class="token punctuation">;</span> pos <span class="token operator">!=</span> <span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span> pos <span class="token operator">=</span> pos<span class="token operator">-></span>prev<span class="token punctuation">)</span></span></span><span class="token comment">/** * list_for_each_safe - iterate over a list safe against removal of list entry * @pos:the &amp;struct list_head to use as a loop cursor. * @n:another &amp;struct list_head to use as temporary storage * @head:the head for your list. */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">list_for_each_safe</span><span class="token expression"><span class="token punctuation">(</span>pos<span class="token punctuation">,</span> n<span class="token punctuation">,</span> head<span class="token punctuation">)</span>                   </span><span class="token punctuation">\</span>    <span class="token expression"><span class="token keyword">for</span> <span class="token punctuation">(</span>pos <span class="token operator">=</span> <span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token operator">-></span>next<span class="token punctuation">,</span> n <span class="token operator">=</span> pos<span class="token operator">-></span>next<span class="token punctuation">;</span> pos <span class="token operator">!=</span> <span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span> </span><span class="token punctuation">\</span>         <span class="token expression">pos <span class="token operator">=</span> n<span class="token punctuation">,</span> n <span class="token operator">=</span> pos<span class="token operator">-></span>next<span class="token punctuation">)</span></span></span><span class="token comment">/** * list_for_each_prev_safe - iterate over a list backwards safe against removal * of list entry * @pos:the &amp;struct list_head to use as a loop cursor. * @n:another &amp;struct list_head to use as temporary storage * @head:the head for your list. */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">list_for_each_prev_safe</span><span class="token expression"><span class="token punctuation">(</span>pos<span class="token punctuation">,</span> n<span class="token punctuation">,</span> head<span class="token punctuation">)</span>              </span><span class="token punctuation">\</span>    <span class="token expression"><span class="token keyword">for</span> <span class="token punctuation">(</span>pos <span class="token operator">=</span> <span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token operator">-></span>prev<span class="token punctuation">,</span> n <span class="token operator">=</span> pos<span class="token operator">-></span>prev<span class="token punctuation">;</span> pos <span class="token operator">!=</span> <span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span> </span><span class="token punctuation">\</span>         <span class="token expression">pos <span class="token operator">=</span> n<span class="token punctuation">,</span> n <span class="token operator">=</span> pos<span class="token operator">-></span>prev<span class="token punctuation">)</span></span></span><span class="token comment">/** * list_for_each_entry-iterate over list of given type * @pos:the type * to use as a loop cursor. * @head:the head for your list. * @member:the name of the list_struct within the struct. */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">list_for_each_entry</span><span class="token expression"><span class="token punctuation">(</span>pos<span class="token punctuation">,</span> head<span class="token punctuation">,</span> member<span class="token punctuation">)</span>                 </span><span class="token punctuation">\</span>    <span class="token expression"><span class="token keyword">for</span> <span class="token punctuation">(</span>pos <span class="token operator">=</span> <span class="token function">list_entry</span><span class="token punctuation">(</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token operator">-></span>next<span class="token punctuation">,</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token operator">*</span>pos<span class="token punctuation">)</span><span class="token punctuation">,</span> member<span class="token punctuation">)</span><span class="token punctuation">;</span> </span><span class="token punctuation">\</span>         <span class="token expression"><span class="token operator">&amp;</span>pos<span class="token operator">-></span>member <span class="token operator">!=</span> <span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>                               </span><span class="token punctuation">\</span>         <span class="token expression">pos <span class="token operator">=</span> <span class="token function">list_entry</span><span class="token punctuation">(</span>pos<span class="token operator">-></span>member<span class="token punctuation">.</span>next<span class="token punctuation">,</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token operator">*</span>pos<span class="token punctuation">)</span><span class="token punctuation">,</span> member<span class="token punctuation">)</span><span class="token punctuation">)</span></span></span><span class="token comment">/** * list_for_each_entry_reverse - iterate backwards over list of given type. * @pos:the type * to use as a loop cursor. * @head:the head for your list. * @member:the name of the list_struct within the struct. */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">list_for_each_entry_reverse</span><span class="token expression"><span class="token punctuation">(</span>pos<span class="token punctuation">,</span> head<span class="token punctuation">,</span> member<span class="token punctuation">)</span>         </span><span class="token punctuation">\</span>    <span class="token expression"><span class="token keyword">for</span> <span class="token punctuation">(</span>pos <span class="token operator">=</span> <span class="token function">list_entry</span><span class="token punctuation">(</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token operator">-></span>prev<span class="token punctuation">,</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token operator">*</span>pos<span class="token punctuation">)</span><span class="token punctuation">,</span> member<span class="token punctuation">)</span><span class="token punctuation">;</span> </span><span class="token punctuation">\</span>         <span class="token expression"><span class="token operator">&amp;</span>pos<span class="token operator">-></span>member <span class="token operator">!=</span> <span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>                               </span><span class="token punctuation">\</span>         <span class="token expression">pos <span class="token operator">=</span> <span class="token function">list_entry</span><span class="token punctuation">(</span>pos<span class="token operator">-></span>member<span class="token punctuation">.</span>prev<span class="token punctuation">,</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token operator">*</span>pos<span class="token punctuation">)</span><span class="token punctuation">,</span> member<span class="token punctuation">)</span><span class="token punctuation">)</span></span></span><span class="token comment">/** * list_prepare_entry - prepare a pos entry for use in * list_for_each_entry_continue() * @pos:the type * to use as a start point * @head:the head of the list * @member:the name of the list_struct within the struct. * * Prepares a pos entry for use as a start point in * list_for_each_entry_continue(). */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">list_prepare_entry</span><span class="token expression"><span class="token punctuation">(</span>pos<span class="token punctuation">,</span> head<span class="token punctuation">,</span> member<span class="token punctuation">)</span> </span><span class="token punctuation">\</span>    <span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">(</span>pos<span class="token punctuation">)</span> <span class="token operator">?</span><span class="token operator">:</span> <span class="token function">list_entry</span><span class="token punctuation">(</span>head<span class="token punctuation">,</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token operator">*</span>pos<span class="token punctuation">)</span><span class="token punctuation">,</span> member<span class="token punctuation">)</span><span class="token punctuation">)</span></span></span><span class="token comment">/** * list_for_each_entry_continue - continue iteration over list of given type * @pos:the type * to use as a loop cursor. * @head:the head for your list. * @member:the name of the list_struct within the struct. * * Continue to iterate over list of given type, continuing after * the current position. */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">list_for_each_entry_continue</span><span class="token expression"><span class="token punctuation">(</span>pos<span class="token punctuation">,</span> head<span class="token punctuation">,</span> member<span class="token punctuation">)</span>            </span><span class="token punctuation">\</span>    <span class="token expression"><span class="token keyword">for</span> <span class="token punctuation">(</span>pos <span class="token operator">=</span> <span class="token function">list_entry</span><span class="token punctuation">(</span>pos<span class="token operator">-></span>member<span class="token punctuation">.</span>next<span class="token punctuation">,</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token operator">*</span>pos<span class="token punctuation">)</span><span class="token punctuation">,</span> member<span class="token punctuation">)</span><span class="token punctuation">;</span> </span><span class="token punctuation">\</span>         <span class="token expression"><span class="token operator">&amp;</span>pos<span class="token operator">-></span>member <span class="token operator">!=</span> <span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>                                   </span><span class="token punctuation">\</span>         <span class="token expression">pos <span class="token operator">=</span> <span class="token function">list_entry</span><span class="token punctuation">(</span>pos<span class="token operator">-></span>member<span class="token punctuation">.</span>next<span class="token punctuation">,</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token operator">*</span>pos<span class="token punctuation">)</span><span class="token punctuation">,</span> member<span class="token punctuation">)</span><span class="token punctuation">)</span></span></span><span class="token comment">/** * list_for_each_entry_continue_reverse - iterate backwards from the given point * @pos:the type * to use as a loop cursor. * @head:the head for your list. * @member:the name of the list_struct within the struct. * * Start to iterate over list of given type backwards, continuing after * the current position. */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">list_for_each_entry_continue_reverse</span><span class="token expression"><span class="token punctuation">(</span>pos<span class="token punctuation">,</span> head<span class="token punctuation">,</span> member<span class="token punctuation">)</span>    </span><span class="token punctuation">\</span>    <span class="token expression"><span class="token keyword">for</span> <span class="token punctuation">(</span>pos <span class="token operator">=</span> <span class="token function">list_entry</span><span class="token punctuation">(</span>pos<span class="token operator">-></span>member<span class="token punctuation">.</span>prev<span class="token punctuation">,</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token operator">*</span>pos<span class="token punctuation">)</span><span class="token punctuation">,</span> member<span class="token punctuation">)</span><span class="token punctuation">;</span> </span><span class="token punctuation">\</span>         <span class="token expression"><span class="token operator">&amp;</span>pos<span class="token operator">-></span>member <span class="token operator">!=</span> <span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>                                   </span><span class="token punctuation">\</span>         <span class="token expression">pos <span class="token operator">=</span> <span class="token function">list_entry</span><span class="token punctuation">(</span>pos<span class="token operator">-></span>member<span class="token punctuation">.</span>prev<span class="token punctuation">,</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token operator">*</span>pos<span class="token punctuation">)</span><span class="token punctuation">,</span> member<span class="token punctuation">)</span><span class="token punctuation">)</span></span></span><span class="token comment">/** * list_for_each_entry_from - iterate over list of given type from the current * point * @pos:the type * to use as a loop cursor. * @head:the head for your list. * @member:the name of the list_struct within the struct. * * Iterate over list of given type, continuing from current position. */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">list_for_each_entry_from</span><span class="token expression"><span class="token punctuation">(</span>pos<span class="token punctuation">,</span> head<span class="token punctuation">,</span> member<span class="token punctuation">)</span> </span><span class="token punctuation">\</span>    <span class="token expression"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>pos<span class="token operator">-></span>member <span class="token operator">!=</span> <span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>                  </span><span class="token punctuation">\</span>         <span class="token expression">pos <span class="token operator">=</span> <span class="token function">list_entry</span><span class="token punctuation">(</span>pos<span class="token operator">-></span>member<span class="token punctuation">.</span>next<span class="token punctuation">,</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token operator">*</span>pos<span class="token punctuation">)</span><span class="token punctuation">,</span> member<span class="token punctuation">)</span><span class="token punctuation">)</span></span></span><span class="token comment">/** * list_for_each_entry_safe - iterate over list of given type safe against * removal of list entry * @pos:the type * to use as a loop cursor. * @n:another type * to use as temporary storage * @head:the head for your list. * @member:the name of the list_struct within the struct. */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">list_for_each_entry_safe</span><span class="token expression"><span class="token punctuation">(</span>pos<span class="token punctuation">,</span> n<span class="token punctuation">,</span> head<span class="token punctuation">,</span> member<span class="token punctuation">)</span>             </span><span class="token punctuation">\</span>    <span class="token expression"><span class="token keyword">for</span> <span class="token punctuation">(</span>pos <span class="token operator">=</span> <span class="token function">list_entry</span><span class="token punctuation">(</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token operator">-></span>next<span class="token punctuation">,</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token operator">*</span>pos<span class="token punctuation">)</span><span class="token punctuation">,</span> member<span class="token punctuation">)</span><span class="token punctuation">,</span>     </span><span class="token punctuation">\</span>        <span class="token expression">n    <span class="token operator">=</span> <span class="token function">list_entry</span><span class="token punctuation">(</span>pos<span class="token operator">-></span>member<span class="token punctuation">.</span>next<span class="token punctuation">,</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token operator">*</span>pos<span class="token punctuation">)</span><span class="token punctuation">,</span> member<span class="token punctuation">)</span><span class="token punctuation">;</span> </span><span class="token punctuation">\</span>         <span class="token expression"><span class="token operator">&amp;</span>pos<span class="token operator">-></span>member <span class="token operator">!=</span> <span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>                                   </span><span class="token punctuation">\</span>         <span class="token expression">pos <span class="token operator">=</span> n<span class="token punctuation">,</span> n <span class="token operator">=</span> <span class="token function">list_entry</span><span class="token punctuation">(</span>n<span class="token operator">-></span>member<span class="token punctuation">.</span>next<span class="token punctuation">,</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token operator">*</span>n<span class="token punctuation">)</span><span class="token punctuation">,</span> member<span class="token punctuation">)</span><span class="token punctuation">)</span></span></span><span class="token comment">/** * list_for_each_entry_safe_continue - continue list iteration safe against * removal * @pos:the type * to use as a loop cursor. * @n:another type * to use as temporary storage * @head:the head for your list. * @member:the name of the list_struct within the struct. * * Iterate over list of given type, continuing after current point, * safe against removal of list entry. */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">list_for_each_entry_safe_continue</span><span class="token expression"><span class="token punctuation">(</span>pos<span class="token punctuation">,</span> n<span class="token punctuation">,</span> head<span class="token punctuation">,</span> member<span class="token punctuation">)</span>    </span><span class="token punctuation">\</span>    <span class="token expression"><span class="token keyword">for</span> <span class="token punctuation">(</span>pos <span class="token operator">=</span> <span class="token function">list_entry</span><span class="token punctuation">(</span>pos<span class="token operator">-></span>member<span class="token punctuation">.</span>next<span class="token punctuation">,</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token operator">*</span>pos<span class="token punctuation">)</span><span class="token punctuation">,</span> member<span class="token punctuation">)</span><span class="token punctuation">,</span> </span><span class="token punctuation">\</span>        <span class="token expression">n    <span class="token operator">=</span> <span class="token function">list_entry</span><span class="token punctuation">(</span>pos<span class="token operator">-></span>member<span class="token punctuation">.</span>next<span class="token punctuation">,</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token operator">*</span>pos<span class="token punctuation">)</span><span class="token punctuation">,</span> member<span class="token punctuation">)</span><span class="token punctuation">;</span> </span><span class="token punctuation">\</span>         <span class="token expression"><span class="token operator">&amp;</span>pos<span class="token operator">-></span>member <span class="token operator">!=</span> <span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>                                   </span><span class="token punctuation">\</span>         <span class="token expression">pos <span class="token operator">=</span> n<span class="token punctuation">,</span> n <span class="token operator">=</span> <span class="token function">list_entry</span><span class="token punctuation">(</span>n<span class="token operator">-></span>member<span class="token punctuation">.</span>next<span class="token punctuation">,</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token operator">*</span>n<span class="token punctuation">)</span><span class="token punctuation">,</span> member<span class="token punctuation">)</span><span class="token punctuation">)</span></span></span><span class="token comment">/** * list_for_each_entry_safe_from - iterate over list from current point safe * against removal * @pos:the type * to use as a loop cursor. * @n:another type * to use as temporary storage * @head:the head for your list. * @member:the name of the list_struct within the struct. * * Iterate over list of given type from current point, safe against * removal of list entry. */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">list_for_each_entry_safe_from</span><span class="token expression"><span class="token punctuation">(</span>pos<span class="token punctuation">,</span> n<span class="token punctuation">,</span> head<span class="token punctuation">,</span> member<span class="token punctuation">)</span>      </span><span class="token punctuation">\</span>    <span class="token expression"><span class="token keyword">for</span> <span class="token punctuation">(</span>n <span class="token operator">=</span> <span class="token function">list_entry</span><span class="token punctuation">(</span>pos<span class="token operator">-></span>member<span class="token punctuation">.</span>next<span class="token punctuation">,</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token operator">*</span>pos<span class="token punctuation">)</span><span class="token punctuation">,</span> member<span class="token punctuation">)</span><span class="token punctuation">;</span> </span><span class="token punctuation">\</span>         <span class="token expression"><span class="token operator">&amp;</span>pos<span class="token operator">-></span>member <span class="token operator">!=</span> <span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>                                 </span><span class="token punctuation">\</span>         <span class="token expression">pos <span class="token operator">=</span> n<span class="token punctuation">,</span> n <span class="token operator">=</span> <span class="token function">list_entry</span><span class="token punctuation">(</span>n<span class="token operator">-></span>member<span class="token punctuation">.</span>next<span class="token punctuation">,</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token operator">*</span>n<span class="token punctuation">)</span><span class="token punctuation">,</span> member<span class="token punctuation">)</span><span class="token punctuation">)</span></span></span><span class="token comment">/** * list_for_each_entry_safe_reverse - iterate backwards over list safe against * removal * @pos:the type * to use as a loop cursor. * @n:another type * to use as temporary storage * @head:the head for your list. * @member:the name of the list_struct within the struct. * * Iterate backwards over list of given type, safe against removal * of list entry. */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">list_for_each_entry_safe_reverse</span><span class="token expression"><span class="token punctuation">(</span>pos<span class="token punctuation">,</span> n<span class="token punctuation">,</span> head<span class="token punctuation">,</span> member<span class="token punctuation">)</span>     </span><span class="token punctuation">\</span>    <span class="token expression"><span class="token keyword">for</span> <span class="token punctuation">(</span>pos <span class="token operator">=</span> <span class="token function">list_entry</span><span class="token punctuation">(</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token operator">-></span>prev<span class="token punctuation">,</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token operator">*</span>pos<span class="token punctuation">)</span><span class="token punctuation">,</span> member<span class="token punctuation">)</span><span class="token punctuation">,</span>     </span><span class="token punctuation">\</span>        <span class="token expression">n    <span class="token operator">=</span> <span class="token function">list_entry</span><span class="token punctuation">(</span>pos<span class="token operator">-></span>member<span class="token punctuation">.</span>prev<span class="token punctuation">,</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token operator">*</span>pos<span class="token punctuation">)</span><span class="token punctuation">,</span> member<span class="token punctuation">)</span><span class="token punctuation">;</span> </span><span class="token punctuation">\</span>         <span class="token expression"><span class="token operator">&amp;</span>pos<span class="token operator">-></span>member <span class="token operator">!=</span> <span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>                                   </span><span class="token punctuation">\</span>         <span class="token expression">pos <span class="token operator">=</span> n<span class="token punctuation">,</span> n <span class="token operator">=</span> <span class="token function">list_entry</span><span class="token punctuation">(</span>n<span class="token operator">-></span>member<span class="token punctuation">.</span>prev<span class="token punctuation">,</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token operator">*</span>n<span class="token punctuation">)</span><span class="token punctuation">,</span> member<span class="token punctuation">)</span><span class="token punctuation">)</span></span></span><span class="token comment">/** * list_safe_reset_next - reset a stale list_for_each_entry_safe loop * @pos:the loop cursor used in the list_for_each_entry_safe loop * @n:temporary storage used in list_for_each_entry_safe * @member:the name of the list_struct within the struct. * * list_safe_reset_next is not safe to use in general if the list may be * modified concurrently (eg. the lock is dropped in the loop body). An * exception to this is if the cursor element (pos) is pinned in the list, * and list_safe_reset_next is called after re-taking the lock and before * completing the current iteration of the loop body. */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">list_safe_reset_next</span><span class="token expression"><span class="token punctuation">(</span>pos<span class="token punctuation">,</span> n<span class="token punctuation">,</span> member<span class="token punctuation">)</span> </span><span class="token punctuation">\</span>    <span class="token expression">n <span class="token operator">=</span> <span class="token function">list_entry</span><span class="token punctuation">(</span>pos<span class="token operator">-></span>member<span class="token punctuation">.</span>next<span class="token punctuation">,</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token operator">*</span>pos<span class="token punctuation">)</span><span class="token punctuation">,</span> member<span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">/* _LINUX_LIST_H */</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C </category>
          
      </categories>
      
      
        <tags>
            
            <tag> list </tag>
            
            <tag> doubly linked list </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言获取格式化时间</title>
      <link href="/C%E8%AF%AD%E8%A8%80%E8%8E%B7%E5%8F%96%E6%A0%BC%E5%BC%8F%E5%8C%96%E6%97%B6%E9%97%B4.html"/>
      <url>/C%E8%AF%AD%E8%A8%80%E8%8E%B7%E5%8F%96%E6%A0%BC%E5%BC%8F%E5%8C%96%E6%97%B6%E9%97%B4.html</url>
      
        <content type="html"><![CDATA[<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>就是使用<code>localtime</code>函数，返回的是1970-01-01 00:00:00至今所经过的时间。</p><p>获取现在的时间只需在年份上加上1970即可。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdint></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;time.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/time.h></span></span><span class="token keyword">struct</span> <span class="token class-name">time_stamp_t</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">uint16_t</span> ts_year<span class="token punctuation">;</span>    <span class="token class-name">uint8_t</span>  ts_mon<span class="token punctuation">;</span>    <span class="token class-name">uint8_t</span>  ts_day<span class="token punctuation">;</span>    <span class="token class-name">uint8_t</span>  ts_hour<span class="token punctuation">;</span>    <span class="token class-name">uint8_t</span>  ts_min<span class="token punctuation">;</span>    <span class="token class-name">uint8_t</span>  ts_sec<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">__attribute__</span><span class="token punctuation">(</span><span class="token punctuation">(</span>packed<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取格式化时间</span><span class="token keyword">int</span> <span class="token function">get_time</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">time_stamp_t</span><span class="token operator">*</span> ts<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">time_t</span>     now<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">tm</span><span class="token operator">*</span> tm_now <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token function">time</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>now<span class="token punctuation">)</span><span class="token punctuation">;</span>    tm_now <span class="token operator">=</span> <span class="token function">localtime</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>now<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> tm_now <span class="token operator">||</span> <span class="token constant">NULL</span> <span class="token operator">==</span> ts<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    ts<span class="token operator">-></span>ts_year <span class="token operator">=</span> tm_now<span class="token operator">-></span>tm_year <span class="token operator">+</span> <span class="token number">1900</span><span class="token punctuation">;</span>    ts<span class="token operator">-></span>ts_mon  <span class="token operator">=</span> tm_now<span class="token operator">-></span>tm_mon <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    ts<span class="token operator">-></span>ts_day  <span class="token operator">=</span> tm_now<span class="token operator">-></span>tm_mday<span class="token punctuation">;</span>    ts<span class="token operator">-></span>ts_hour <span class="token operator">=</span> tm_now<span class="token operator">-></span>tm_hour<span class="token punctuation">;</span>    ts<span class="token operator">-></span>ts_min  <span class="token operator">=</span> tm_now<span class="token operator">-></span>tm_min<span class="token punctuation">;</span>    ts<span class="token operator">-></span>ts_sec  <span class="token operator">=</span> tm_now<span class="token operator">-></span>tm_sec<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">time_stamp_t</span> ts<span class="token punctuation">;</span>    <span class="token function">get_time</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ts<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"time:%d-%d-%d %d:%d:%d\n"</span><span class="token punctuation">,</span> ts<span class="token punctuation">.</span>ts_year<span class="token punctuation">,</span> ts<span class="token punctuation">.</span>ts_mon<span class="token punctuation">,</span> ts<span class="token punctuation">.</span>ts_day<span class="token punctuation">,</span>           ts<span class="token punctuation">.</span>ts_hour<span class="token punctuation">,</span> ts<span class="token punctuation">.</span>ts_min<span class="token punctuation">,</span> ts<span class="token punctuation">.</span>ts_sec<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ g++ main.cc $ ./a.out time:2021-10-11 <span class="token number">19</span>:38:18<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C </category>
          
      </categories>
      
      
        <tags>
            
            <tag> time </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言获取网卡名称和IP</title>
      <link href="/C%E8%AF%AD%E8%A8%80%E8%8E%B7%E5%8F%96%E7%BD%91%E5%8D%A1%E5%90%8D%E7%A7%B0%E5%92%8CIP.html"/>
      <url>/C%E8%AF%AD%E8%A8%80%E8%8E%B7%E5%8F%96%E7%BD%91%E5%8D%A1%E5%90%8D%E7%A7%B0%E5%92%8CIP.html</url>
      
        <content type="html"><![CDATA[<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>使用<code>getifaddrs</code>接口获取网卡信息。</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;arpa/inet.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;ifaddrs.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;netdb.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/socket.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">ifaddrs</span> <span class="token operator">*</span>ifaddr<span class="token punctuation">,</span> <span class="token operator">*</span>ifa<span class="token punctuation">;</span>    <span class="token keyword">int</span>             family<span class="token punctuation">;</span>    <span class="token keyword">char</span>            host<span class="token punctuation">[</span>NI_MAXHOST<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// 获取网卡信息</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getifaddrs</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ifaddr<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"getifaddrs"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span>EXIT_FAILURE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 遍历网卡</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>ifa <span class="token operator">=</span> ifaddr<span class="token punctuation">;</span> ifa <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> ifa <span class="token operator">=</span> ifa<span class="token operator">-></span>ifa_next<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ifa<span class="token operator">-></span>ifa_addr <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>        family <span class="token operator">=</span> ifa<span class="token operator">-></span>ifa_addr<span class="token operator">-></span>sa_family<span class="token punctuation">;</span>        <span class="token comment">// 输出网卡名称，协议</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s  address family: %d%s "</span><span class="token punctuation">,</span> ifa<span class="token operator">-></span>ifa_name<span class="token punctuation">,</span> family<span class="token punctuation">,</span>               <span class="token punctuation">(</span>family <span class="token operator">==</span> PF_PACKET<span class="token punctuation">)</span>  <span class="token operator">?</span> <span class="token string">" (AF_PACKET)"</span>               <span class="token operator">:</span> <span class="token punctuation">(</span>family <span class="token operator">==</span> PF_INET<span class="token punctuation">)</span>  <span class="token operator">?</span> <span class="token string">" (AF_INET)"</span>               <span class="token operator">:</span> <span class="token punctuation">(</span>family <span class="token operator">==</span> PF_INET6<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">" (AF_INET6)"</span>                                      <span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 输出IP地址</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>family <span class="token operator">==</span> PF_INET<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            in_addr<span class="token operator">*</span> tmpAddrPtr <span class="token operator">=</span>                <span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr_in</span><span class="token operator">*</span><span class="token punctuation">)</span>ifa<span class="token operator">-></span>ifa_addr<span class="token punctuation">)</span><span class="token operator">-></span>sin_addr<span class="token punctuation">;</span>            <span class="token function">inet_ntop</span><span class="token punctuation">(</span>PF_INET<span class="token punctuation">,</span> tmpAddrPtr<span class="token punctuation">,</span> host<span class="token punctuation">,</span> INET_ADDRSTRLEN<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\taddress: &lt;%s>\n"</span><span class="token punctuation">,</span> host<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>family <span class="token operator">==</span> PF_INET6<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            in_addr<span class="token operator">*</span> tmpAddrPtr <span class="token operator">=</span>                <span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr_in</span><span class="token operator">*</span><span class="token punctuation">)</span>ifa<span class="token operator">-></span>ifa_addr<span class="token punctuation">)</span><span class="token operator">-></span>sin_addr<span class="token punctuation">;</span>            <span class="token function">inet_ntop</span><span class="token punctuation">(</span>PF_INET6<span class="token punctuation">,</span> tmpAddrPtr<span class="token punctuation">,</span> host<span class="token punctuation">,</span> INET6_ADDRSTRLEN<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\taddress: &lt;%s>\n"</span><span class="token punctuation">,</span> host<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">freeifaddrs</span><span class="token punctuation">(</span>ifaddr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span>EXIT_SUCCESS<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IP </tag>
            
            <tag> NIC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言获取系统和CPU信息</title>
      <link href="/C%E8%AF%AD%E8%A8%80%E8%8E%B7%E5%8F%96%E7%B3%BB%E7%BB%9F%E5%92%8CCPU%E4%BF%A1%E6%81%AF.html"/>
      <url>/C%E8%AF%AD%E8%A8%80%E8%8E%B7%E5%8F%96%E7%B3%BB%E7%BB%9F%E5%92%8CCPU%E4%BF%A1%E6%81%AF.html</url>
      
        <content type="html"><![CDATA[<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>使用<code>#include &lt;sys/sysinfo.h&gt;</code>文件中的接口读取系统信息。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/sysinfo.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token keyword">const</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"cpu processors %d, available cores %d.\n"</span><span class="token punctuation">,</span> <span class="token function">get_nprocs_conf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>           <span class="token function">get_nprocs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ g++ main.cc $ ./a.out cpu processors <span class="token number">8</span>, available cores <span class="token number">8</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>查看进程运行在哪个CPU核心，哪个NUMA节点</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sched.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token keyword">const</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> cpu<span class="token punctuation">,</span> node<span class="token punctuation">;</span>    <span class="token function">getcpu</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>cpu<span class="token punctuation">,</span> <span class="token operator">&amp;</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"cpu="</span> <span class="token operator">&lt;&lt;</span> cpu <span class="token operator">&lt;&lt;</span> <span class="token string">" node="</span> <span class="token operator">&lt;&lt;</span> node <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token comment">// cpu=4 node=0 , 当前进程运行在哪个CPU核心，哪个NUMA节点</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ g++ main.cc $ ./a.out <span class="token assign-left variable">cpu</span><span class="token operator">=</span><span class="token number">2</span> <span class="token assign-left variable">node</span><span class="token operator">=</span><span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>头文件<code>#include &lt;sys/sysinfo.h&gt;</code>中的其他接口</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">_SYS_SYSINFO_H</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_SYS_SYSINFO_H</span><span class="token expression"><span class="token number">1</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;features.h></span></span><span class="token comment">/* Get sysinfo structure from kernel header.  */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;linux/kernel.h></span></span>__BEGIN_DECLS<span class="token comment">/* Returns information on overall system statistics.  */</span><span class="token keyword">extern</span> <span class="token keyword">int</span> <span class="token function">sysinfo</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sysinfo</span> <span class="token operator">*</span>__info<span class="token punctuation">)</span> __THROW<span class="token punctuation">;</span><span class="token comment">/* Return number of configured processors.  */</span><span class="token keyword">extern</span> <span class="token keyword">int</span> <span class="token function">get_nprocs_conf</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> __THROW<span class="token punctuation">;</span><span class="token comment">/* Return number of available processors.  */</span><span class="token keyword">extern</span> <span class="token keyword">int</span> <span class="token function">get_nprocs</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> __THROW<span class="token punctuation">;</span><span class="token comment">/* Return number of physical pages of memory in the system.  */</span><span class="token keyword">extern</span> <span class="token keyword">long</span> <span class="token keyword">int</span> <span class="token function">get_phys_pages</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> __THROW<span class="token punctuation">;</span><span class="token comment">/* Return number of available physical pages of memory in the system.  */</span><span class="token keyword">extern</span> <span class="token keyword">long</span> <span class="token keyword">int</span> <span class="token function">get_avphys_pages</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> __THROW<span class="token punctuation">;</span>__END_DECLS<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span><span class="token comment">/* sys/sysinfo.h */</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">sysinfo</span> <span class="token punctuation">&#123;</span>__kernel_long_t uptime<span class="token punctuation">;</span><span class="token comment">/* Seconds since boot */</span>__kernel_ulong_t loads<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">/* 1, 5, and 15 minute load averages */</span>__kernel_ulong_t totalram<span class="token punctuation">;</span><span class="token comment">/* Total usable main memory size */</span>__kernel_ulong_t freeram<span class="token punctuation">;</span><span class="token comment">/* Available memory size */</span>__kernel_ulong_t sharedram<span class="token punctuation">;</span><span class="token comment">/* Amount of shared memory */</span>__kernel_ulong_t bufferram<span class="token punctuation">;</span><span class="token comment">/* Memory used by buffers */</span>__kernel_ulong_t totalswap<span class="token punctuation">;</span><span class="token comment">/* Total swap space size */</span>__kernel_ulong_t freeswap<span class="token punctuation">;</span><span class="token comment">/* swap space still available */</span>__u16 procs<span class="token punctuation">;</span>   <span class="token comment">/* Number of current processes */</span>__u16 pad<span class="token punctuation">;</span>   <span class="token comment">/* Explicit padding for m68k */</span>__kernel_ulong_t totalhigh<span class="token punctuation">;</span><span class="token comment">/* Total high memory size */</span>__kernel_ulong_t freehigh<span class="token punctuation">;</span><span class="token comment">/* Available high memory size */</span>__u32 mem_unit<span class="token punctuation">;</span><span class="token comment">/* Memory unit size in bytes */</span><span class="token keyword">char</span> _f<span class="token punctuation">[</span><span class="token number">20</span><span class="token operator">-</span><span class="token number">2</span><span class="token operator">*</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>__kernel_ulong_t<span class="token punctuation">)</span><span class="token operator">-</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>__u32<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">/* Padding: libc5 uses this.. */</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C </category>
          
      </categories>
      
      
        <tags>
            
            <tag> system statistics </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言读取ELF文件内容</title>
      <link href="/C%E8%AF%AD%E8%A8%80%E8%AF%BB%E5%8F%96ELF%E6%96%87%E4%BB%B6%E5%86%85%E5%AE%B9.html"/>
      <url>/C%E8%AF%AD%E8%A8%80%E8%AF%BB%E5%8F%96ELF%E6%96%87%E4%BB%B6%E5%86%85%E5%AE%B9.html</url>
      
        <content type="html"><![CDATA[<h2 id="根据ELF文件的结构进行解析"><a href="#根据ELF文件的结构进行解析" class="headerlink" title="根据ELF文件的结构进行解析"></a>根据ELF文件的结构进行解析</h2><ol><li>打开并判断是不是ELF64位二进制文件</li></ol><p>读取后记得重置文件指针到开头。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">is_elf_64</span><span class="token punctuation">(</span>FILE<span class="token operator">*</span> fp<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span>  nread <span class="token operator">=</span> <span class="token function">fread</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> fp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fseek</span><span class="token punctuation">(</span>fp<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token constant">SEEK_SET</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>nread <span class="token operator">&lt;</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strncmp</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> ELFMAG<span class="token punctuation">,</span> SELFMAG<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>buf<span class="token punctuation">[</span>EI_CLASS<span class="token punctuation">]</span> <span class="token operator">!=</span> ELFCLASS64<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>FILE<span class="token operator">*</span> felf <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>felf<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"open %s failed.\n"</span><span class="token punctuation">,</span> argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">is_elf_64</span><span class="token punctuation">(</span>felf<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"file type mismatch.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li><p>读取ELF文件头</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">Elf64_Ehdr m_elf<span class="token punctuation">;</span><span class="token function">fread</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>m_elf<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>m_elf<span class="token punctuation">)</span><span class="token punctuation">,</span> felf<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>读取所有段结构</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">Elf64_Shdr arSection<span class="token punctuation">[</span>m_elf<span class="token punctuation">.</span>e_shnum<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">fseek</span><span class="token punctuation">(</span>felf<span class="token punctuation">,</span> m_elf<span class="token punctuation">.</span>e_shoff<span class="token punctuation">,</span> <span class="token constant">SEEK_SET</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fread</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>arSection<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>m_elf<span class="token punctuation">.</span>e_shnum <span class="token operator">*</span> m_elf<span class="token punctuation">.</span>e_shentsize<span class="token punctuation">)</span><span class="token punctuation">,</span> felf<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>读取段名字索引</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">char</span> arSectionNames<span class="token punctuation">[</span>arSection<span class="token punctuation">[</span>m_elf<span class="token punctuation">.</span>e_shstrndx<span class="token punctuation">]</span><span class="token punctuation">.</span>sh_size<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">fseek</span><span class="token punctuation">(</span>felf<span class="token punctuation">,</span> arSection<span class="token punctuation">[</span>m_elf<span class="token punctuation">.</span>e_shstrndx<span class="token punctuation">]</span><span class="token punctuation">.</span>sh_offset<span class="token punctuation">,</span> <span class="token constant">SEEK_SET</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fread</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>arSectionNames<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>arSectionNames<span class="token punctuation">)</span><span class="token punctuation">,</span> felf<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>读取段结构和段名字</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">SectionMap m_mpSections<span class="token punctuation">[</span>m_elf<span class="token punctuation">.</span>e_shnum<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>Elf64_Half i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m_elf<span class="token punctuation">.</span>e_shnum<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    m_mpSections<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token operator">&amp;</span>arSectionNames<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> arSection<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>sh_name<span class="token punctuation">;</span>    m_mpSections<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>shdr <span class="token operator">=</span> arSection<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>输出相关信息</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">const</span> <span class="token keyword">char</span> findSectionName<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">".dynstr"</span><span class="token punctuation">;</span><span class="token comment">// 遍历每一个段</span><span class="token keyword">for</span> <span class="token punctuation">(</span>Elf64_Half i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m_elf<span class="token punctuation">.</span>e_shnum<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 输出每个段的名字</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"section name :%s\n"</span><span class="token punctuation">,</span> m_mpSections<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 输出“.dynstr”段的内容</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span>m_mpSections<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> findSectionName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">unsigned</span> <span class="token keyword">char</span> content<span class="token punctuation">[</span>m_mpSections<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>shdr<span class="token punctuation">.</span>sh_size<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">fseek</span><span class="token punctuation">(</span>felf<span class="token punctuation">,</span> m_mpSections<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>shdr<span class="token punctuation">.</span>sh_offset<span class="token punctuation">,</span> <span class="token constant">SEEK_SET</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">fread</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> m_mpSections<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>shdr<span class="token punctuation">.</span>sh_size<span class="token punctuation">,</span> felf<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Elf64_Xword j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> m_mpSections<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>shdr<span class="token punctuation">.</span>sh_size<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span> content<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// printf("%02x", content[i]);对于非字符内容，应该输出十六机制。</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;elf.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">char</span><span class="token operator">*</span>      name<span class="token punctuation">;</span>    Elf64_Shdr shdr<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> SectionMap<span class="token punctuation">;</span><span class="token comment">/** * 判断是否是ELF64文件。 */</span><span class="token keyword">int</span> <span class="token function">is_elf_64</span><span class="token punctuation">(</span>FILE<span class="token operator">*</span> fp<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span>  nread <span class="token operator">=</span> <span class="token function">fread</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> fp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fseek</span><span class="token punctuation">(</span>fp<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token constant">SEEK_SET</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>nread <span class="token operator">&lt;</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strncmp</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> ELFMAG<span class="token punctuation">,</span> SELFMAG<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>buf<span class="token punctuation">[</span>EI_CLASS<span class="token punctuation">]</span> <span class="token operator">!=</span> ELFCLASS64<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token keyword">const</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">!=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"usage : %s elf_file\n"</span><span class="token punctuation">,</span> argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    FILE<span class="token operator">*</span> felf <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>felf<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"open %s failed.\n"</span><span class="token punctuation">,</span> argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">is_elf_64</span><span class="token punctuation">(</span>felf<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"file type mismatch.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 1 读取elf头文件</span>    Elf64_Ehdr m_elf<span class="token punctuation">;</span>    <span class="token function">fread</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>m_elf<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>m_elf<span class="token punctuation">)</span><span class="token punctuation">,</span> felf<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 2 读取所有段结构</span>    Elf64_Shdr arSection<span class="token punctuation">[</span>m_elf<span class="token punctuation">.</span>e_shnum<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">fseek</span><span class="token punctuation">(</span>felf<span class="token punctuation">,</span> m_elf<span class="token punctuation">.</span>e_shoff<span class="token punctuation">,</span> <span class="token constant">SEEK_SET</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fread</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>arSection<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>m_elf<span class="token punctuation">.</span>e_shnum <span class="token operator">*</span> m_elf<span class="token punctuation">.</span>e_shentsize<span class="token punctuation">)</span><span class="token punctuation">,</span> felf<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 3 读取段名字索引</span>    <span class="token keyword">char</span> arSectionNames<span class="token punctuation">[</span>arSection<span class="token punctuation">[</span>m_elf<span class="token punctuation">.</span>e_shstrndx<span class="token punctuation">]</span><span class="token punctuation">.</span>sh_size<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">fseek</span><span class="token punctuation">(</span>felf<span class="token punctuation">,</span> arSection<span class="token punctuation">[</span>m_elf<span class="token punctuation">.</span>e_shstrndx<span class="token punctuation">]</span><span class="token punctuation">.</span>sh_offset<span class="token punctuation">,</span> <span class="token constant">SEEK_SET</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fread</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>arSectionNames<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>arSectionNames<span class="token punctuation">)</span><span class="token punctuation">,</span> felf<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 4 读取段结构和段名字</span>    SectionMap m_mpSections<span class="token punctuation">[</span>m_elf<span class="token punctuation">.</span>e_shnum<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>Elf64_Half i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m_elf<span class="token punctuation">.</span>e_shnum<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        m_mpSections<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token operator">&amp;</span>arSectionNames<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> arSection<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>sh_name<span class="token punctuation">;</span>        m_mpSections<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>shdr <span class="token operator">=</span> arSection<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">const</span> <span class="token keyword">char</span> findSectionName<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">".dynstr"</span><span class="token punctuation">;</span>    <span class="token comment">// 遍历每一个段</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>Elf64_Half i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m_elf<span class="token punctuation">.</span>e_shnum<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 输出每个段的名字</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"section name :%s\n"</span><span class="token punctuation">,</span> m_mpSections<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 输出“.dynstr”段的内容</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span>m_mpSections<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> findSectionName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">unsigned</span> <span class="token keyword">char</span> content<span class="token punctuation">[</span>m_mpSections<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>shdr<span class="token punctuation">.</span>sh_size<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token function">fseek</span><span class="token punctuation">(</span>felf<span class="token punctuation">,</span> m_mpSections<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>shdr<span class="token punctuation">.</span>sh_offset<span class="token punctuation">,</span> <span class="token constant">SEEK_SET</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">fread</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> m_mpSections<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>shdr<span class="token punctuation">.</span>sh_size<span class="token punctuation">,</span> felf<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>Elf64_Xword j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> m_mpSections<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>shdr<span class="token punctuation">.</span>sh_size<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span> content<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// printf("%02x", content[i]);对于非字符内容，应该输出十六机制。</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fclose</span><span class="token punctuation">(</span>felf<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><pre class="line-numbers language-none"><code class="language-none">$ g++ main.cc $ .&#x2F;a.out .&#x2F;a.out section name :section name :.interpsection name :.note.gnu.propertysection name :.note.gnu.build-idsection name :.note.ABI-tagsection name :.gnu.hashsection name :.dynsymsection name :.dynstrlibc.so.6fopenstrncmpputs__stack_chk_failputcharprintffseekfclosefread__cxa_finalizestrcmp__libc_start_mainGLIBC_2.4GLIBC_2.2.5_ITM_deregisterTMCloneTable__gmon_start___ITM_registerTMCloneTablesection name :.gnu.versionsection name :.gnu.version_rsection name :.rela.dynsection name :.rela.pltsection name :.initsection name :.pltsection name :.plt.gotsection name :.plt.secsection name :.textsection name :.finisection name :.rodatasection name :.eh_frame_hdrsection name :.eh_framesection name :.init_arraysection name :.fini_arraysection name :.dynamicsection name :.gotsection name :.datasection name :.bsssection name :.commentsection name :.symtabsection name :.strtabsection name :.shstrtab<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ELF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言创建守护进程</title>
      <link href="/C%E8%AF%AD%E8%A8%80%E5%88%9B%E5%BB%BA%E5%AE%88%E6%8A%A4%E8%BF%9B%E7%A8%8B.html"/>
      <url>/C%E8%AF%AD%E8%A8%80%E5%88%9B%E5%BB%BA%E5%AE%88%E6%8A%A4%E8%BF%9B%E7%A8%8B.html</url>
      
        <content type="html"><![CDATA[<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><p>一个守护进程应该满足几个要点</p><ol><li>是一个后台进程</li><li>断开和终端的连接</li><li>关闭不需要的文件描述符</li><li>忽略相关信号</li></ol><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;signal.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token keyword">void</span> <span class="token function">worker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">/* todo */</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">init_daemon</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> pid<span class="token punctuation">;</span>    pid <span class="token operator">=</span> <span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//结束父进程，使得子进程成为后台进程</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 建立一个新的进程组,在这个新的进程组中,</span>    <span class="token comment">// 子进程成为这个进程组的首进程,以使该进程脱离所有终端</span>    <span class="token function">setsid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//再次新建一个子进程，退出父进程，保证该进程不是进程组长，同时让该进程无法再打开一个新的终端</span>    pid <span class="token operator">=</span> <span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//关闭所有从父进程继承的不再需要的文件描述符</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> NOFILE<span class="token punctuation">;</span> <span class="token function">close</span><span class="token punctuation">(</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">;</span>    <span class="token comment">//忽略终端I/O信号，STOP信号</span>    <span class="token function">signal</span><span class="token punctuation">(</span>SIGTTOU<span class="token punctuation">,</span> SIG_IGN<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">signal</span><span class="token punctuation">(</span>SIGTTIN<span class="token punctuation">,</span> SIG_IGN<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">signal</span><span class="token punctuation">(</span>SIGTSTP<span class="token punctuation">,</span> SIG_IGN<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">signal</span><span class="token punctuation">(</span>SIGHUP<span class="token punctuation">,</span> SIG_IGN<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//改变工作目录，使得进程不与任何文件系统联系</span>    <span class="token function">chdir</span><span class="token punctuation">(</span><span class="token string">"/tmp"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//将文件当时创建屏蔽字设置为0</span>    <span class="token function">umask</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//忽略SIGCHLD信号</span>    <span class="token function">signal</span><span class="token punctuation">(</span>SIGCHLD<span class="token punctuation">,</span> SIG_IGN<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">worker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">init_daemon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
            <tag> 守护进程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SYSCALL_DEFINEx展开</title>
      <link href="/SYSCALL-DEFINEx%E5%B1%95%E5%BC%80.html"/>
      <url>/SYSCALL-DEFINEx%E5%B1%95%E5%BC%80.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://elixir.bootlin.com/linux/v5.10.10/source/include/linux/syscalls.h#L222">SYSCALL_DEFINEx</a></p><p>SYSCALL_DEFINEx里面的x代表的是系统调用参数个数。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">SYSCALL_DEFINE1</span><span class="token expression"><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token function">SYSCALL_DEFINEx</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> _</span><span class="token punctuation">##</span><span class="token expression">name<span class="token punctuation">,</span> __VA_ARGS__<span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">SYSCALL_DEFINE2</span><span class="token expression"><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token function">SYSCALL_DEFINEx</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> _</span><span class="token punctuation">##</span><span class="token expression">name<span class="token punctuation">,</span> __VA_ARGS__<span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">SYSCALL_DEFINE3</span><span class="token expression"><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token function">SYSCALL_DEFINEx</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> _</span><span class="token punctuation">##</span><span class="token expression">name<span class="token punctuation">,</span> __VA_ARGS__<span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">SYSCALL_DEFINE4</span><span class="token expression"><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token function">SYSCALL_DEFINEx</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> _</span><span class="token punctuation">##</span><span class="token expression">name<span class="token punctuation">,</span> __VA_ARGS__<span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">SYSCALL_DEFINE5</span><span class="token expression"><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token function">SYSCALL_DEFINEx</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> _</span><span class="token punctuation">##</span><span class="token expression">name<span class="token punctuation">,</span> __VA_ARGS__<span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">SYSCALL_DEFINE6</span><span class="token expression"><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token function">SYSCALL_DEFINEx</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> _</span><span class="token punctuation">##</span><span class="token expression">name<span class="token punctuation">,</span> __VA_ARGS__<span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">SYSCALL_DEFINEx</span><span class="token expression"><span class="token punctuation">(</span>x<span class="token punctuation">,</span> sname<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span></span><span class="token punctuation">\</span><span class="token expression"><span class="token function">SYSCALL_METADATA</span><span class="token punctuation">(</span>sname<span class="token punctuation">,</span> x<span class="token punctuation">,</span> __VA_ARGS__<span class="token punctuation">)</span></span><span class="token punctuation">\</span><span class="token expression"><span class="token function">__SYSCALL_DEFINEx</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> sname<span class="token punctuation">,</span> __VA_ARGS__<span class="token punctuation">)</span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://elixir.bootlin.com/linux/v5.10.10/source/include/linux/syscalls.h#L166">SYSCALL_METADATA</a></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">CONFIG_FTRACE_SYSCALLS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">__SC_STR_ADECL</span><span class="token expression"><span class="token punctuation">(</span>t<span class="token punctuation">,</span> a<span class="token punctuation">)</span>#a</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">__SC_STR_TDECL</span><span class="token expression"><span class="token punctuation">(</span>t<span class="token punctuation">,</span> a<span class="token punctuation">)</span>#t</span></span><span class="token keyword">extern</span> <span class="token keyword">struct</span> <span class="token class-name">trace_event_class</span> event_class_syscall_enter<span class="token punctuation">;</span><span class="token keyword">extern</span> <span class="token keyword">struct</span> <span class="token class-name">trace_event_class</span> event_class_syscall_exit<span class="token punctuation">;</span><span class="token keyword">extern</span> <span class="token keyword">struct</span> <span class="token class-name">trace_event_functions</span> enter_syscall_print_funcs<span class="token punctuation">;</span><span class="token keyword">extern</span> <span class="token keyword">struct</span> <span class="token class-name">trace_event_functions</span> exit_syscall_print_funcs<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">SYSCALL_TRACE_ENTER_EVENT</span><span class="token expression"><span class="token punctuation">(</span>sname<span class="token punctuation">)</span></span><span class="token punctuation">\</span><span class="token expression"><span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">syscall_metadata</span> __syscall_meta_</span><span class="token punctuation">##</span><span class="token expression">sname<span class="token punctuation">;</span></span><span class="token punctuation">\</span><span class="token expression"><span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">trace_event_call</span> __used</span><span class="token punctuation">\</span>  <span class="token expression">event_enter_</span><span class="token punctuation">##</span><span class="token expression">sname <span class="token operator">=</span> <span class="token punctuation">&#123;</span></span><span class="token punctuation">\</span><span class="token expression"><span class="token punctuation">.</span>class<span class="token operator">=</span> <span class="token operator">&amp;</span>event_class_syscall_enter<span class="token punctuation">,</span></span><span class="token punctuation">\</span><span class="token expression"><span class="token punctuation">&#123;</span></span><span class="token punctuation">\</span><span class="token expression"><span class="token punctuation">.</span>name                   <span class="token operator">=</span> </span><span class="token string">"sys_enter"</span><span class="token directive-hash">#</span><span class="token directive keyword">sname</span><span class="token expression"><span class="token punctuation">,</span></span><span class="token punctuation">\</span><span class="token expression"><span class="token punctuation">&#125;</span><span class="token punctuation">,</span></span><span class="token punctuation">\</span><span class="token expression"><span class="token punctuation">.</span>event<span class="token punctuation">.</span>funcs            <span class="token operator">=</span> <span class="token operator">&amp;</span>enter_syscall_print_funcs<span class="token punctuation">,</span></span><span class="token punctuation">\</span><span class="token expression"><span class="token punctuation">.</span>data<span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>__syscall_meta_</span><span class="token punctuation">##</span><span class="token expression">sname<span class="token punctuation">,</span></span><span class="token punctuation">\</span><span class="token expression"><span class="token punctuation">.</span>flags                  <span class="token operator">=</span> TRACE_EVENT_FL_CAP_ANY<span class="token punctuation">,</span></span><span class="token punctuation">\</span><span class="token expression"><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span><span class="token punctuation">\</span><span class="token expression"><span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">trace_event_call</span> __used</span><span class="token punctuation">\</span>  <span class="token expression"><span class="token function">__section</span><span class="token punctuation">(</span></span><span class="token string">"_ftrace_events"</span><span class="token expression"><span class="token punctuation">)</span></span><span class="token punctuation">\</span> <span class="token expression"><span class="token operator">*</span>__event_enter_</span><span class="token punctuation">##</span><span class="token expression">sname <span class="token operator">=</span> <span class="token operator">&amp;</span>event_enter_</span><span class="token punctuation">##</span><span class="token expression">sname<span class="token punctuation">;</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">SYSCALL_TRACE_EXIT_EVENT</span><span class="token expression"><span class="token punctuation">(</span>sname<span class="token punctuation">)</span></span><span class="token punctuation">\</span><span class="token expression"><span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">syscall_metadata</span> __syscall_meta_</span><span class="token punctuation">##</span><span class="token expression">sname<span class="token punctuation">;</span></span><span class="token punctuation">\</span><span class="token expression"><span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">trace_event_call</span> __used</span><span class="token punctuation">\</span>  <span class="token expression">event_exit_</span><span class="token punctuation">##</span><span class="token expression">sname <span class="token operator">=</span> <span class="token punctuation">&#123;</span></span><span class="token punctuation">\</span><span class="token expression"><span class="token punctuation">.</span>class<span class="token operator">=</span> <span class="token operator">&amp;</span>event_class_syscall_exit<span class="token punctuation">,</span></span><span class="token punctuation">\</span><span class="token expression"><span class="token punctuation">&#123;</span></span><span class="token punctuation">\</span><span class="token expression"><span class="token punctuation">.</span>name                   <span class="token operator">=</span> </span><span class="token string">"sys_exit"</span><span class="token directive-hash">#</span><span class="token directive keyword">sname</span><span class="token expression"><span class="token punctuation">,</span></span><span class="token punctuation">\</span><span class="token expression"><span class="token punctuation">&#125;</span><span class="token punctuation">,</span></span><span class="token punctuation">\</span><span class="token expression"><span class="token punctuation">.</span>event<span class="token punctuation">.</span>funcs<span class="token operator">=</span> <span class="token operator">&amp;</span>exit_syscall_print_funcs<span class="token punctuation">,</span></span><span class="token punctuation">\</span><span class="token expression"><span class="token punctuation">.</span>data<span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>__syscall_meta_</span><span class="token punctuation">##</span><span class="token expression">sname<span class="token punctuation">,</span></span><span class="token punctuation">\</span><span class="token expression"><span class="token punctuation">.</span>flags                  <span class="token operator">=</span> TRACE_EVENT_FL_CAP_ANY<span class="token punctuation">,</span></span><span class="token punctuation">\</span><span class="token expression"><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span><span class="token punctuation">\</span><span class="token expression"><span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">trace_event_call</span> __used</span><span class="token punctuation">\</span>  <span class="token expression"><span class="token function">__section</span><span class="token punctuation">(</span></span><span class="token string">"_ftrace_events"</span><span class="token expression"><span class="token punctuation">)</span></span><span class="token punctuation">\</span><span class="token expression"><span class="token operator">*</span>__event_exit_</span><span class="token punctuation">##</span><span class="token expression">sname <span class="token operator">=</span> <span class="token operator">&amp;</span>event_exit_</span><span class="token punctuation">##</span><span class="token expression">sname<span class="token punctuation">;</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">SYSCALL_METADATA</span><span class="token expression"><span class="token punctuation">(</span>sname<span class="token punctuation">,</span> nb<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span></span><span class="token punctuation">\</span><span class="token expression"><span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>types_</span><span class="token punctuation">##</span><span class="token expression">sname<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span></span><span class="token punctuation">\</span><span class="token expression"><span class="token function">__MAP</span><span class="token punctuation">(</span>nb<span class="token punctuation">,</span>__SC_STR_TDECL<span class="token punctuation">,</span>__VA_ARGS__<span class="token punctuation">)</span></span><span class="token punctuation">\</span><span class="token expression"><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span><span class="token punctuation">\</span><span class="token expression"><span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>args_</span><span class="token punctuation">##</span><span class="token expression">sname<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span></span><span class="token punctuation">\</span><span class="token expression"><span class="token function">__MAP</span><span class="token punctuation">(</span>nb<span class="token punctuation">,</span>__SC_STR_ADECL<span class="token punctuation">,</span>__VA_ARGS__<span class="token punctuation">)</span></span><span class="token punctuation">\</span><span class="token expression"><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span><span class="token punctuation">\</span><span class="token expression"><span class="token function">SYSCALL_TRACE_ENTER_EVENT</span><span class="token punctuation">(</span>sname<span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token punctuation">\</span><span class="token expression"><span class="token function">SYSCALL_TRACE_EXIT_EVENT</span><span class="token punctuation">(</span>sname<span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token punctuation">\</span><span class="token expression"><span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">syscall_metadata</span> __used</span><span class="token punctuation">\</span>  <span class="token expression">__syscall_meta_</span><span class="token punctuation">##</span><span class="token expression">sname <span class="token operator">=</span> <span class="token punctuation">&#123;</span></span><span class="token punctuation">\</span><span class="token expression"><span class="token punctuation">.</span>name <span class="token operator">=</span> </span><span class="token string">"sys"</span><span class="token directive-hash">#</span><span class="token directive keyword">sname</span><span class="token expression"><span class="token punctuation">,</span></span><span class="token punctuation">\</span><span class="token expression"><span class="token punctuation">.</span>syscall_nr<span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span></span><span class="token comment">/* Filled in at boot */</span><span class="token punctuation">\</span><span class="token expression"><span class="token punctuation">.</span>nb_args <span class="token operator">=</span> nb<span class="token punctuation">,</span></span><span class="token punctuation">\</span><span class="token expression"><span class="token punctuation">.</span>types<span class="token operator">=</span> nb <span class="token operator">?</span> types_</span><span class="token punctuation">##</span><span class="token expression">sname <span class="token operator">:</span> <span class="token constant">NULL</span><span class="token punctuation">,</span></span><span class="token punctuation">\</span><span class="token expression"><span class="token punctuation">.</span>args<span class="token operator">=</span> nb <span class="token operator">?</span> args_</span><span class="token punctuation">##</span><span class="token expression">sname <span class="token operator">:</span> <span class="token constant">NULL</span><span class="token punctuation">,</span></span><span class="token punctuation">\</span><span class="token expression"><span class="token punctuation">.</span>enter_event<span class="token operator">=</span> <span class="token operator">&amp;</span>event_enter_</span><span class="token punctuation">##</span><span class="token expression">sname<span class="token punctuation">,</span></span><span class="token punctuation">\</span><span class="token expression"><span class="token punctuation">.</span>exit_event<span class="token operator">=</span> <span class="token operator">&amp;</span>event_exit_</span><span class="token punctuation">##</span><span class="token expression">sname<span class="token punctuation">,</span></span><span class="token punctuation">\</span><span class="token expression"><span class="token punctuation">.</span>enter_fields<span class="token operator">=</span> <span class="token function">LIST_HEAD_INIT</span><span class="token punctuation">(</span>__syscall_meta_</span><span class="token punctuation">##</span><span class="token expression">sname<span class="token punctuation">.</span>enter_fields<span class="token punctuation">)</span><span class="token punctuation">,</span> </span><span class="token punctuation">\</span><span class="token expression"><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span><span class="token punctuation">\</span><span class="token expression"><span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">syscall_metadata</span> __used</span><span class="token punctuation">\</span>  <span class="token expression"><span class="token function">__section</span><span class="token punctuation">(</span></span><span class="token string">"__syscalls_metadata"</span><span class="token expression"><span class="token punctuation">)</span></span><span class="token punctuation">\</span> <span class="token expression"><span class="token operator">*</span>__p_syscall_meta_</span><span class="token punctuation">##</span><span class="token expression">sname <span class="token operator">=</span> <span class="token operator">&amp;</span>__syscall_meta_</span><span class="token punctuation">##</span><span class="token expression">sname<span class="token punctuation">;</span></span></span><span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">is_syscall_trace_event</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">trace_event_call</span> <span class="token operator">*</span>tp_event<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> tp_event<span class="token operator">-></span>class <span class="token operator">==</span> <span class="token operator">&amp;</span>event_class_syscall_enter <span class="token operator">||</span>       tp_event<span class="token operator">-></span>class <span class="token operator">==</span> <span class="token operator">&amp;</span>event_class_syscall_exit<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">SYSCALL_METADATA</span><span class="token expression"><span class="token punctuation">(</span>sname<span class="token punctuation">,</span> nb<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://elixir.bootlin.com/linux/v5.10.10/source/include/linux/syscalls.h#L234">__SYSCALL_DEFINEx</a></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">__SYSCALL_DEFINEx</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">__SYSCALL_DEFINEx</span><span class="token expression"><span class="token punctuation">(</span>x<span class="token punctuation">,</span> name<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span></span><span class="token punctuation">\</span><span class="token expression"><span class="token function">__diag_push</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token punctuation">\</span><span class="token expression"><span class="token function">__diag_ignore</span><span class="token punctuation">(</span>GCC<span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> </span><span class="token string">"-Wattribute-alias"</span><span class="token expression"><span class="token punctuation">,</span></span><span class="token punctuation">\</span>      <span class="token string">"Type aliasing is used to sanitize syscall arguments"</span><span class="token expression"><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token punctuation">\</span><span class="token expression">asmlinkage <span class="token keyword">long</span> sys</span><span class="token punctuation">##</span><span class="token expression"><span class="token function">name</span><span class="token punctuation">(</span><span class="token function">__MAP</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>__SC_DECL<span class="token punctuation">,</span>__VA_ARGS__<span class="token punctuation">)</span><span class="token punctuation">)</span></span><span class="token punctuation">\</span><span class="token expression"><span class="token keyword">__attribute__</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">alias</span><span class="token punctuation">(</span><span class="token function">__stringify</span><span class="token punctuation">(</span>__se_sys</span><span class="token punctuation">##</span><span class="token expression">name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token punctuation">\</span><span class="token expression"><span class="token function">ALLOW_ERROR_INJECTION</span><span class="token punctuation">(</span>sys</span><span class="token punctuation">##</span><span class="token expression">name<span class="token punctuation">,</span> ERRNO<span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token punctuation">\</span><span class="token expression"><span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">long</span> __do_sys</span><span class="token punctuation">##</span><span class="token expression"><span class="token function">name</span><span class="token punctuation">(</span><span class="token function">__MAP</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>__SC_DECL<span class="token punctuation">,</span>__VA_ARGS__<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token punctuation">\</span><span class="token expression">asmlinkage <span class="token keyword">long</span> __se_sys</span><span class="token punctuation">##</span><span class="token expression"><span class="token function">name</span><span class="token punctuation">(</span><span class="token function">__MAP</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>__SC_LONG<span class="token punctuation">,</span>__VA_ARGS__<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token punctuation">\</span><span class="token expression">asmlinkage <span class="token keyword">long</span> __se_sys</span><span class="token punctuation">##</span><span class="token expression"><span class="token function">name</span><span class="token punctuation">(</span><span class="token function">__MAP</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>__SC_LONG<span class="token punctuation">,</span>__VA_ARGS__<span class="token punctuation">)</span><span class="token punctuation">)</span></span><span class="token punctuation">\</span><span class="token expression"><span class="token punctuation">&#123;</span></span><span class="token punctuation">\</span><span class="token expression"><span class="token keyword">long</span> ret <span class="token operator">=</span> __do_sys</span><span class="token punctuation">##</span><span class="token expression"><span class="token function">name</span><span class="token punctuation">(</span><span class="token function">__MAP</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>__SC_CAST<span class="token punctuation">,</span>__VA_ARGS__<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token punctuation">\</span><span class="token expression"><span class="token function">__MAP</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>__SC_TEST<span class="token punctuation">,</span>__VA_ARGS__<span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token punctuation">\</span><span class="token expression"><span class="token function">__PROTECT</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> ret<span class="token punctuation">,</span><span class="token function">__MAP</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>__SC_ARGS<span class="token punctuation">,</span>__VA_ARGS__<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token punctuation">\</span><span class="token expression"><span class="token keyword">return</span> ret<span class="token punctuation">;</span></span><span class="token punctuation">\</span><span class="token expression"><span class="token punctuation">&#125;</span></span><span class="token punctuation">\</span><span class="token expression"><span class="token function">__diag_pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token punctuation">\</span><span class="token expression"><span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">long</span> __do_sys</span><span class="token punctuation">##</span><span class="token expression"><span class="token function">name</span><span class="token punctuation">(</span><span class="token function">__MAP</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>__SC_DECL<span class="token punctuation">,</span>__VA_ARGS__<span class="token punctuation">)</span><span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">/* __SYSCALL_DEFINEx */</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>x86下的<a href="https://elixir.bootlin.com/linux/v5.10.10/source/arch/x86/include/asm/syscall_wrapper.h#L227">__SYSCALL_DEFINEx</a></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">__SYSCALL_DEFINEx</span><span class="token expression"><span class="token punctuation">(</span>x<span class="token punctuation">,</span> name<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span></span><span class="token punctuation">\</span><span class="token expression"><span class="token keyword">static</span> <span class="token keyword">long</span> __se_sys</span><span class="token punctuation">##</span><span class="token expression"><span class="token function">name</span><span class="token punctuation">(</span><span class="token function">__MAP</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>__SC_LONG<span class="token punctuation">,</span>__VA_ARGS__<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token punctuation">\</span><span class="token expression"><span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">long</span> __do_sys</span><span class="token punctuation">##</span><span class="token expression"><span class="token function">name</span><span class="token punctuation">(</span><span class="token function">__MAP</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>__SC_DECL<span class="token punctuation">,</span>__VA_ARGS__<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token punctuation">\</span><span class="token expression"><span class="token function">__X64_SYS_STUBx</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> name<span class="token punctuation">,</span> __VA_ARGS__<span class="token punctuation">)</span></span><span class="token punctuation">\</span><span class="token expression"><span class="token function">__IA32_SYS_STUBx</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> name<span class="token punctuation">,</span> __VA_ARGS__<span class="token punctuation">)</span></span><span class="token punctuation">\</span><span class="token expression"><span class="token keyword">static</span> <span class="token keyword">long</span> __se_sys</span><span class="token punctuation">##</span><span class="token expression"><span class="token function">name</span><span class="token punctuation">(</span><span class="token function">__MAP</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>__SC_LONG<span class="token punctuation">,</span>__VA_ARGS__<span class="token punctuation">)</span><span class="token punctuation">)</span></span><span class="token punctuation">\</span><span class="token expression"><span class="token punctuation">&#123;</span></span><span class="token punctuation">\</span><span class="token expression"><span class="token keyword">long</span> ret <span class="token operator">=</span> __do_sys</span><span class="token punctuation">##</span><span class="token expression"><span class="token function">name</span><span class="token punctuation">(</span><span class="token function">__MAP</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>__SC_CAST<span class="token punctuation">,</span>__VA_ARGS__<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token punctuation">\</span><span class="token expression"><span class="token function">__MAP</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>__SC_TEST<span class="token punctuation">,</span>__VA_ARGS__<span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token punctuation">\</span><span class="token expression"><span class="token function">__PROTECT</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> ret<span class="token punctuation">,</span><span class="token function">__MAP</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>__SC_ARGS<span class="token punctuation">,</span>__VA_ARGS__<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token punctuation">\</span><span class="token expression"><span class="token keyword">return</span> ret<span class="token punctuation">;</span></span><span class="token punctuation">\</span><span class="token expression"><span class="token punctuation">&#125;</span></span><span class="token punctuation">\</span><span class="token expression"><span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">long</span> __do_sys</span><span class="token punctuation">##</span><span class="token expression"><span class="token function">name</span><span class="token punctuation">(</span><span class="token function">__MAP</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>__SC_DECL<span class="token punctuation">,</span>__VA_ARGS__<span class="token punctuation">)</span><span class="token punctuation">)</span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://elixir.bootlin.com/linux/v5.10.10/source/include/linux/syscalls.h#L113">上面相关宏的定义</a></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">__MAP0</span><span class="token expression"><span class="token punctuation">(</span>m<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">__MAP1</span><span class="token expression"><span class="token punctuation">(</span>m<span class="token punctuation">,</span>t<span class="token punctuation">,</span>a<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token function">m</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span>a<span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">__MAP2</span><span class="token expression"><span class="token punctuation">(</span>m<span class="token punctuation">,</span>t<span class="token punctuation">,</span>a<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token function">m</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">__MAP1</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span>__VA_ARGS__<span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">__MAP3</span><span class="token expression"><span class="token punctuation">(</span>m<span class="token punctuation">,</span>t<span class="token punctuation">,</span>a<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token function">m</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">__MAP2</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span>__VA_ARGS__<span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">__MAP4</span><span class="token expression"><span class="token punctuation">(</span>m<span class="token punctuation">,</span>t<span class="token punctuation">,</span>a<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token function">m</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">__MAP3</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span>__VA_ARGS__<span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">__MAP5</span><span class="token expression"><span class="token punctuation">(</span>m<span class="token punctuation">,</span>t<span class="token punctuation">,</span>a<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token function">m</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">__MAP4</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span>__VA_ARGS__<span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">__MAP6</span><span class="token expression"><span class="token punctuation">(</span>m<span class="token punctuation">,</span>t<span class="token punctuation">,</span>a<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token function">m</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">__MAP5</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span>__VA_ARGS__<span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">__MAP</span><span class="token expression"><span class="token punctuation">(</span>n<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> __MAP</span><span class="token punctuation">##</span><span class="token expression"><span class="token function">n</span><span class="token punctuation">(</span>__VA_ARGS__<span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">__SC_DECL</span><span class="token expression"><span class="token punctuation">(</span>t<span class="token punctuation">,</span> a<span class="token punctuation">)</span>t a</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">__TYPE_AS</span><span class="token expression"><span class="token punctuation">(</span>t<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token function">__same_type</span><span class="token punctuation">(</span><span class="token punctuation">(</span>__force t<span class="token punctuation">)</span><span class="token number">0</span><span class="token punctuation">,</span> v<span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">__TYPE_IS_L</span><span class="token expression"><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token function">__TYPE_AS</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> <span class="token number">0L</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">__TYPE_IS_UL</span><span class="token expression"><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token function">__TYPE_AS</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> <span class="token number">0UL</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">__TYPE_IS_LL</span><span class="token expression"><span class="token punctuation">(</span>t<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token function">__TYPE_AS</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">__TYPE_AS</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> <span class="token number">0ULL</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">__SC_LONG</span><span class="token expression"><span class="token punctuation">(</span>t<span class="token punctuation">,</span> a<span class="token punctuation">)</span> <span class="token function">__typeof</span><span class="token punctuation">(</span><span class="token function">__builtin_choose_expr</span><span class="token punctuation">(</span><span class="token function">__TYPE_IS_LL</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">0L</span><span class="token punctuation">)</span><span class="token punctuation">)</span> a</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">__SC_CAST</span><span class="token expression"><span class="token punctuation">(</span>t<span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">(</span>__force t<span class="token punctuation">)</span> a</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">__SC_ARGS</span><span class="token expression"><span class="token punctuation">(</span>t<span class="token punctuation">,</span> a<span class="token punctuation">)</span>a</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">__SC_TEST</span><span class="token expression"><span class="token punctuation">(</span>t<span class="token punctuation">,</span> a<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token function">BUILD_BUG_ON_ZERO</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">__TYPE_IS_LL</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span><span class="token comment">// https://elixir.bootlin.com/linux/v5.10.10/source/include/linux/compiler_types.h#L50</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">__force</span></span><span class="token comment">//https://elixir.bootlin.com/linux/v5.10.10/source/arch/x86/include/asm/syscall_wrapper.h</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">__X64_SYS_STUBx</span><span class="token expression"><span class="token punctuation">(</span>x<span class="token punctuation">,</span> name<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span></span><span class="token punctuation">\</span><span class="token expression"><span class="token function">__SYS_STUBx</span><span class="token punctuation">(</span>x64<span class="token punctuation">,</span> sys</span><span class="token punctuation">##</span><span class="token expression">name<span class="token punctuation">,</span></span><span class="token punctuation">\</span>    <span class="token expression"><span class="token function">SC_X86_64_REGS_TO_ARGS</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> __VA_ARGS__<span class="token punctuation">)</span><span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">__X64_COND_SYSCALL</span><span class="token expression"><span class="token punctuation">(</span>name<span class="token punctuation">)</span></span><span class="token punctuation">\</span><span class="token expression"><span class="token function">__COND_SYSCALL</span><span class="token punctuation">(</span>x64<span class="token punctuation">,</span> sys_</span><span class="token punctuation">##</span><span class="token expression">name<span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">__X64_SYS_NI</span><span class="token expression"><span class="token punctuation">(</span>name<span class="token punctuation">)</span></span><span class="token punctuation">\</span><span class="token expression"><span class="token function">__SYS_NI</span><span class="token punctuation">(</span>x64<span class="token punctuation">,</span> sys_</span><span class="token punctuation">##</span><span class="token expression">name<span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span> <span class="token comment">/* CONFIG_X86_64 */</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">__X64_SYS_STUB0</span><span class="token expression"><span class="token punctuation">(</span>name<span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">__X64_SYS_STUBx</span><span class="token expression"><span class="token punctuation">(</span>x<span class="token punctuation">,</span> name<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">__X64_COND_SYSCALL</span><span class="token expression"><span class="token punctuation">(</span>name<span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">__X64_SYS_NI</span><span class="token expression"><span class="token punctuation">(</span>name<span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">/* CONFIG_X86_64 */</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token function">defined</span><span class="token punctuation">(</span>CONFIG_X86_32<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">defined</span><span class="token punctuation">(</span>CONFIG_IA32_EMULATION<span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">__IA32_SYS_STUB0</span><span class="token expression"><span class="token punctuation">(</span>name<span class="token punctuation">)</span></span><span class="token punctuation">\</span><span class="token expression"><span class="token function">__SYS_STUB0</span><span class="token punctuation">(</span>ia32<span class="token punctuation">,</span> sys_</span><span class="token punctuation">##</span><span class="token expression">name<span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">__IA32_SYS_STUBx</span><span class="token expression"><span class="token punctuation">(</span>x<span class="token punctuation">,</span> name<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span></span><span class="token punctuation">\</span><span class="token expression"><span class="token function">__SYS_STUBx</span><span class="token punctuation">(</span>ia32<span class="token punctuation">,</span> sys</span><span class="token punctuation">##</span><span class="token expression">name<span class="token punctuation">,</span></span><span class="token punctuation">\</span>    <span class="token expression"><span class="token function">SC_IA32_REGS_TO_ARGS</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> __VA_ARGS__<span class="token punctuation">)</span><span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">__IA32_COND_SYSCALL</span><span class="token expression"><span class="token punctuation">(</span>name<span class="token punctuation">)</span></span><span class="token punctuation">\</span><span class="token expression"><span class="token function">__COND_SYSCALL</span><span class="token punctuation">(</span>ia32<span class="token punctuation">,</span> sys_</span><span class="token punctuation">##</span><span class="token expression">name<span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">__IA32_SYS_NI</span><span class="token expression"><span class="token punctuation">(</span>name<span class="token punctuation">)</span></span><span class="token punctuation">\</span><span class="token expression"><span class="token function">__SYS_NI</span><span class="token punctuation">(</span>ia32<span class="token punctuation">,</span> sys_</span><span class="token punctuation">##</span><span class="token expression">name<span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span> <span class="token comment">/* CONFIG_X86_32 || CONFIG_IA32_EMULATION */</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">__IA32_SYS_STUB0</span><span class="token expression"><span class="token punctuation">(</span>name<span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">__IA32_SYS_STUBx</span><span class="token expression"><span class="token punctuation">(</span>x<span class="token punctuation">,</span> name<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">__IA32_COND_SYSCALL</span><span class="token expression"><span class="token punctuation">(</span>name<span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">__IA32_SYS_NI</span><span class="token expression"><span class="token punctuation">(</span>name<span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">/* CONFIG_X86_32 || CONFIG_IA32_EMULATION */</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以下面的调用为例：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">SYSCALL_DEFINE3</span><span class="token punctuation">(</span>socket<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> family<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> type<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> protocol<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token function">__sys_socket</span><span class="token punctuation">(</span>family<span class="token punctuation">,</span> type<span class="token punctuation">,</span> protocol<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">SYSCALL_DEFINE3</span><span class="token punctuation">(</span>socket<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> family<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> type<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> protocol<span class="token punctuation">)</span>展开：<span class="token function">SYSCALL_DEFINEx</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> _socket<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> family<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> type<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> protocol<span class="token punctuation">)</span>展开：<span class="token function">__SYSCALL_DEFINEx</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> _socket<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> family<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> type<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> protocol<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>展开：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">static</span> <span class="token keyword">long</span> __se_sys##<span class="token function">name</span><span class="token punctuation">(</span><span class="token function">__MAP</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>__SC_LONG<span class="token punctuation">,</span>__VA_ARGS__<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>展开name和__VA_ARGS__：<span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">__se_sys_socket</span><span class="token punctuation">(</span><span class="token function">__MAP</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span>__SC_LONG<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> family<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> type<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> protocol<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>展开__MAP<span class="token operator">:</span><span class="token function">__SC_LONG</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> family<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">__SC_LONG</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> type<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">__SC_LONG</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> protocol<span class="token punctuation">)</span>展开__SC_LONG：<span class="token function">__SC_LONG</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> family<span class="token punctuation">)</span> <span class="token operator">--</span><span class="token operator">></span><span class="token function">__typeof</span><span class="token punctuation">(</span><span class="token function">__builtin_choose_expr</span><span class="token punctuation">(</span><span class="token function">__TYPE_IS_LL</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">0L</span><span class="token punctuation">)</span><span class="token punctuation">)</span> family<span class="token operator">--</span><span class="token operator">></span> <span class="token keyword">long</span> family最后：<span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">__se_sys_socket</span><span class="token punctuation">(</span><span class="token keyword">long</span> family<span class="token punctuation">,</span> <span class="token keyword">long</span> type<span class="token punctuation">,</span> <span class="token keyword">long</span> protocol<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>t为0LL或0ULL时，等于LL类型，否则为0L类型。当然这句话在32位系统上比较有意义，因为64位系统L和LL都为8个字节。其实里面做的工作，就是将系统调用的参数统一变为了使用long型来接收，再强转转为int，也就是系统调用本来传下来的参数类型。</p><p>CVE-2009-0029的说明，大概意思是说：在Linux 2.6.28及以前版本的内核中，IBM/S390、PowerPC、Sparc64以及MIPS 架构64位平台的ABI要求在系统调用时，用户空间程序将系统调用中32位的参数存放在64位的寄存器中要做到正确的符号扩展，但是用户空间程序却不能保证做到这点，这样就会可以通过向有漏洞的系统调用传送特制参数便可以导致系统崩溃或获得权限提升。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">long</span> __do_sys##<span class="token function">name</span><span class="token punctuation">(</span><span class="token function">__MAP</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>__SC_DECL<span class="token punctuation">,</span>__VA_ARGS__<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>展开name和__VA_ARGS__：<span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">long</span> <span class="token function">__do_sys_socket</span><span class="token punctuation">(</span><span class="token function">__MAP</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>__SC_DECL<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> family<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> type<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> protocol<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>展开__MAP：<span class="token function">__SC_DECL</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> family<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">__SC_DECL</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> type<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">__SC_DECL</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> protocol<span class="token punctuation">)</span>展开__SC_DECL：<span class="token function">__SC_DECL</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> family<span class="token punctuation">)</span> <span class="token operator">--</span><span class="token operator">></span> <span class="token keyword">int</span> familt最后：<span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">long</span> <span class="token function">__do_sys_socket</span><span class="token punctuation">(</span><span class="token keyword">int</span> family<span class="token punctuation">,</span> <span class="token keyword">int</span> type<span class="token punctuation">,</span> <span class="token keyword">int</span> protocol<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">static</span> <span class="token keyword">long</span> __se_sys##<span class="token function">name</span><span class="token punctuation">(</span><span class="token function">__MAP</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>__SC_LONG<span class="token punctuation">,</span>__VA_ARGS__<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">long</span> ret <span class="token operator">=</span> __do_sys##<span class="token function">name</span><span class="token punctuation">(</span><span class="token function">__MAP</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>__SC_CAST<span class="token punctuation">,</span>__VA_ARGS__<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">__MAP</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>__SC_TEST<span class="token punctuation">,</span>__VA_ARGS__<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">__PROTECT</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> ret<span class="token punctuation">,</span><span class="token function">__MAP</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>__SC_ARGS<span class="token punctuation">,</span>__VA_ARGS__<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>展开：<span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">__se_sys_socket</span><span class="token punctuation">(</span><span class="token keyword">long</span> family<span class="token punctuation">,</span> <span class="token keyword">long</span> type<span class="token punctuation">,</span> <span class="token keyword">long</span> protocol<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">long</span> ret <span class="token operator">=</span> <span class="token function">__do_sys_socket</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>family<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>type<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>protocol<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">do</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">long</span> __do_sys##<span class="token function">name</span><span class="token punctuation">(</span><span class="token function">__MAP</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>__SC_DECL<span class="token punctuation">,</span>__VA_ARGS__<span class="token punctuation">)</span><span class="token punctuation">)</span>展开：<span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">long</span> <span class="token function">__do_sys_socket</span><span class="token punctuation">(</span><span class="token keyword">int</span> family<span class="token punctuation">,</span> <span class="token keyword">int</span> type<span class="token punctuation">,</span> <span class="token keyword">int</span> protocol<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>最后：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">SYSCALL_DEFINE3</span><span class="token punctuation">(</span>socket<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> family<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> type<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> protocol<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token function">__sys_socket</span><span class="token punctuation">(</span>family<span class="token punctuation">,</span> type<span class="token punctuation">,</span> protocol<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>展开为：<span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">__se_sys_socket</span><span class="token punctuation">(</span><span class="token keyword">long</span> family<span class="token punctuation">,</span> <span class="token keyword">long</span> type<span class="token punctuation">,</span> <span class="token keyword">long</span> protocol<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">long</span> <span class="token function">__do_sys_socket</span><span class="token punctuation">(</span><span class="token keyword">int</span> family<span class="token punctuation">,</span> <span class="token keyword">int</span> type<span class="token punctuation">,</span> <span class="token keyword">int</span> protocol<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">__se_sys_socket</span><span class="token punctuation">(</span><span class="token keyword">long</span> family<span class="token punctuation">,</span> <span class="token keyword">long</span> type<span class="token punctuation">,</span> <span class="token keyword">long</span> protocol<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">long</span> ret <span class="token operator">=</span> <span class="token function">__do_sys_socket</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>family<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>type<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>protocol<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">do</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">long</span> <span class="token function">__do_sys_socket</span><span class="token punctuation">(</span><span class="token keyword">int</span> family<span class="token punctuation">,</span> <span class="token keyword">int</span> type<span class="token punctuation">,</span> <span class="token keyword">int</span> protocol<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token function">__sys_socket</span><span class="token punctuation">(</span>family<span class="token punctuation">,</span> type<span class="token punctuation">,</span> protocol<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>/usr/src/linux-headers-5.8.0-38-generic/arch/x86/include/generated/asm</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言随机数生成</title>
      <link href="/C%E8%AF%AD%E8%A8%80%E9%9A%8F%E6%9C%BA%E6%95%B0%E7%94%9F%E6%88%90.html"/>
      <url>/C%E8%AF%AD%E8%A8%80%E9%9A%8F%E6%9C%BA%E6%95%B0%E7%94%9F%E6%88%90.html</url>
      
        <content type="html"><![CDATA[<h2 id="0-头文件和辅助函数"><a href="#0-头文件和辅助函数" class="headerlink" title="0. 头文件和辅助函数"></a>0. 头文件和辅助函数</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdint.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cpuid.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/stat.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;time.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;immintrin.h></span></span><span class="token keyword">void</span> <span class="token function">printHex</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token operator">*</span> c<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%02X"</span><span class="token punctuation">,</span> c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-使用-dev-random或-dev-urandom做熵源"><a href="#1-使用-dev-random或-dev-urandom做熵源" class="headerlink" title="1. 使用/dev/random或/dev/urandom做熵源"></a>1. 使用/dev/random或/dev/urandom做熵源</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/** * 使用/dev/urandom使用非阻塞熵源 */</span><span class="token keyword">int</span> <span class="token function">random_generator_dev</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token operator">*</span> random<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token class-name">uint64_t</span> len<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>random <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">||</span> len <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> file <span class="token operator">=</span> <span class="token string">"/dev/random"</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> O_RDONLY<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">==</span> fd<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> nread <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> random<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>nread <span class="token operator">!=</span> len<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-使用CPU硬件生成器"><a href="#2-使用CPU硬件生成器" class="headerlink" title="2. 使用CPU硬件生成器"></a>2. 使用CPU硬件生成器</h2><p>编译时需要添加<code>-mrdrnd</code>编译选项</p><p>提供内置接口和汇编指令两种实现方式。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">bit_RDRND</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">bit_RDRND</span> <span class="token expression"><span class="token number">0x40000000</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token comment">/** * @brief 检测是否支持rdrand指令 * * @return int 支持返回0， 不支持返回1. */</span><span class="token keyword">int</span> <span class="token function">cpu_supports_rdrand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">uint32_t</span> eax <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> ebx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> ecx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> edx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">__get_cpuid</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>eax<span class="token punctuation">,</span> <span class="token operator">&amp;</span>ebx<span class="token punctuation">,</span> <span class="token operator">&amp;</span>ecx<span class="token punctuation">,</span> <span class="token operator">&amp;</span>edx<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token operator">!</span><span class="token punctuation">(</span>ecx <span class="token operator">&amp;</span> bit_RDRND<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * @brief 随机数生成 * * @param rand_num * @return int 0-有效，1-无效 */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token number">0</span></span></span><span class="token keyword">int</span> <span class="token function">random_rdrand</span><span class="token punctuation">(</span><span class="token class-name">uint64_t</span><span class="token operator">*</span> rand_num<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">uint64_t</span> foo             <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span>      cf_error_status <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    __asm__ <span class="token keyword">volatile</span><span class="token punctuation">(</span>        <span class="token string">"\n\            rdrand %%rax;\n\            mov $1,%%edx;\n\            cmovae %%rax,%%rdx;\n\            mov %%edx,%1;\n\            mov %%rax, %0;"</span>        <span class="token operator">:</span> <span class="token string">"=r"</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"=r"</span><span class="token punctuation">(</span>cf_error_status<span class="token punctuation">)</span><span class="token operator">::</span><span class="token string">"%rax"</span><span class="token punctuation">,</span> <span class="token string">"%rdx"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">*</span>rand_num <span class="token operator">=</span> foo<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token operator">!</span>cf_error_status<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span><span class="token keyword">int</span> <span class="token function">random_rdrand</span><span class="token punctuation">(</span><span class="token class-name">uint64_t</span><span class="token operator">*</span> rand_num<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>rand_num<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">_rdrand64_step</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span><span class="token operator">*</span><span class="token punctuation">)</span>rand_num<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token keyword">int</span> <span class="token function">random_generator_rd</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token operator">*</span> random<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token class-name">uint64_t</span> len<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>random <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">||</span> len <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token class-name">uint64_t</span> type_len   <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token class-name">uint64_t</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">uint64_t</span> loop       <span class="token operator">=</span> len <span class="token operator">/</span> type_len<span class="token punctuation">;</span>    <span class="token class-name">uint64_t</span> left       <span class="token operator">=</span> len <span class="token operator">-</span> loop <span class="token operator">*</span> type_len<span class="token punctuation">;</span>    <span class="token class-name">uint64_t</span> random_gen <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token class-name">uint64_t</span> i<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> loop<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">random_rdrand</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>random_gen<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token function">memcpy</span><span class="token punctuation">(</span>random <span class="token operator">+</span> i <span class="token operator">*</span> type_len<span class="token punctuation">,</span> <span class="token operator">&amp;</span>random_gen<span class="token punctuation">,</span> type_len<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>left<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">random_rdrand</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>random_gen<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token function">memcpy</span><span class="token punctuation">(</span>random <span class="token operator">+</span> type_len <span class="token operator">*</span> loop<span class="token punctuation">,</span> <span class="token operator">&amp;</span>random_gen<span class="token punctuation">,</span> left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-使用PCG软算法生成"><a href="#3-使用PCG软算法生成" class="headerlink" title="3. 使用PCG软算法生成"></a>3. 使用PCG软算法生成</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// ----------------------------------------------</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PCG32_INITIALIZER</span>                            <span class="token punctuation">\</span>    <span class="token expression"><span class="token punctuation">&#123;</span>                                                </span><span class="token punctuation">\</span>        <span class="token expression"><span class="token number">0x853c49e6748fea9bULL</span><span class="token punctuation">,</span> <span class="token number">0xda3e39cb94b95bdbULL</span> </span><span class="token punctuation">\</span>    <span class="token expression"><span class="token punctuation">&#125;</span></span></span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">uint64_t</span> state<span class="token punctuation">;</span>    <span class="token class-name">uint64_t</span> inc<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token class-name">pcg32_random_t</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token class-name">pcg32_random_t</span> pcg32_global <span class="token operator">=</span> PCG32_INITIALIZER<span class="token punctuation">;</span><span class="token class-name">uint32_t</span> <span class="token function">pcg32_random_r</span><span class="token punctuation">(</span><span class="token class-name">pcg32_random_t</span><span class="token operator">*</span> rng<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">pcg32_srandom_r</span><span class="token punctuation">(</span><span class="token class-name">pcg32_random_t</span><span class="token operator">*</span> rng<span class="token punctuation">,</span> <span class="token class-name">uint64_t</span> initstate<span class="token punctuation">,</span> <span class="token class-name">uint64_t</span> initseq<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    rng<span class="token operator">-></span>state <span class="token operator">=</span> <span class="token number">0U</span><span class="token punctuation">;</span>    rng<span class="token operator">-></span>inc   <span class="token operator">=</span> <span class="token punctuation">(</span>initseq <span class="token operator">&lt;&lt;</span> <span class="token number">1u</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token number">1u</span><span class="token punctuation">;</span>    <span class="token function">pcg32_random_r</span><span class="token punctuation">(</span>rng<span class="token punctuation">)</span><span class="token punctuation">;</span>    rng<span class="token operator">-></span>state <span class="token operator">+=</span> initstate<span class="token punctuation">;</span>    <span class="token function">pcg32_random_r</span><span class="token punctuation">(</span>rng<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">pcg32_srandom</span><span class="token punctuation">(</span><span class="token class-name">uint64_t</span> seed<span class="token punctuation">,</span> <span class="token class-name">uint64_t</span> seq<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">pcg32_srandom_r</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pcg32_global<span class="token punctuation">,</span> seed<span class="token punctuation">,</span> seq<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">uint32_t</span> <span class="token function">pcg32_random_r</span><span class="token punctuation">(</span><span class="token class-name">pcg32_random_t</span><span class="token operator">*</span> rng<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">uint64_t</span> oldstate <span class="token operator">=</span> rng<span class="token operator">-></span>state<span class="token punctuation">;</span>    <span class="token comment">// Advance internal state</span>    rng<span class="token operator">-></span>state <span class="token operator">=</span> oldstate <span class="token operator">*</span> <span class="token number">6364136223846793005ULL</span> <span class="token operator">+</span> <span class="token punctuation">(</span>rng<span class="token operator">-></span>inc <span class="token operator">|</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// Calculate output function (XSH RR), uses old state for max ILP</span>    <span class="token class-name">uint32_t</span> xorshifted <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>oldstate <span class="token operator">>></span> <span class="token number">18u</span><span class="token punctuation">)</span> <span class="token operator">^</span> oldstate<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">27u</span><span class="token punctuation">;</span>    <span class="token class-name">uint32_t</span> rot        <span class="token operator">=</span> oldstate <span class="token operator">>></span> <span class="token number">59u</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>xorshifted <span class="token operator">>></span> rot<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>xorshifted <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">-</span>rot<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">31</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">uint32_t</span> <span class="token function">pcg32_random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token function">pcg32_random_r</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pcg32_global<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">random_rdpcg</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token operator">*</span> random<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>random <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token operator">*</span>random <span class="token operator">=</span> <span class="token function">pcg32_random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">random_generator_pcg</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token operator">*</span> random<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token class-name">uint32_t</span> len<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>random <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">||</span> len <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token class-name">uint32_t</span> type_len   <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">uint32_t</span> loop       <span class="token operator">=</span> len <span class="token operator">/</span> type_len<span class="token punctuation">;</span>    <span class="token class-name">uint32_t</span> left       <span class="token operator">=</span> len <span class="token operator">-</span> loop <span class="token operator">*</span> type_len<span class="token punctuation">;</span>    <span class="token class-name">uint32_t</span> random_gen <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token class-name">uint32_t</span> i<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> loop<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">random_rdpcg</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>random_gen<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token function">memcpy</span><span class="token punctuation">(</span>random <span class="token operator">+</span> i <span class="token operator">*</span> type_len<span class="token punctuation">,</span> <span class="token operator">&amp;</span>random_gen<span class="token punctuation">,</span> type_len<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>left<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">random_rdpcg</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>random_gen<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token function">memcpy</span><span class="token punctuation">(</span>random <span class="token operator">+</span> type_len <span class="token operator">*</span> loop<span class="token punctuation">,</span> <span class="token operator">&amp;</span>random_gen<span class="token punctuation">,</span> left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">pcg_test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">uint32_t</span> random<span class="token punctuation">;</span>    <span class="token keyword">int</span>      rounds <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span>    <span class="token function">pcg32_srandom</span><span class="token punctuation">(</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span><span class="token class-name">intptr_t</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>printf<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">intptr_t</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>rounds<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">size_t</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">random_rdpcg</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>random<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printHex</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>random<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> random<span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">int</span>           rounds       <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span>    <span class="token function">pcg32_srandom</span><span class="token punctuation">(</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span><span class="token class-name">intptr_t</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>printf<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">intptr_t</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>rounds<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">size_t</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">57</span><span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">random_generator_pcg</span><span class="token punctuation">(</span>random<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printHex</span><span class="token punctuation">(</span>random<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token keyword">const</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">pcg_test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C </category>
          
      </categories>
      
      
        <tags>
            
            <tag> random generator </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++多态分配器</title>
      <link href="/C-%E5%A4%9A%E6%80%81%E5%88%86%E9%85%8D%E5%99%A8.html"/>
      <url>/C-%E5%A4%9A%E6%80%81%E5%88%86%E9%85%8D%E5%99%A8.html</url>
      
        <content type="html"><![CDATA[<h2 id="C-17-多态分配器，调试资源和自定义类型"><a href="#C-17-多态分配器，调试资源和自定义类型" class="headerlink" title="C++17: 多态分配器，调试资源和自定义类型"></a>C++17: 多态分配器，调试资源和自定义类型</h2><p>从C++17开始支持的多态分配器是标准库对标准分配器的增强。</p><p>它比常规分配器容易使用得多，并且允许相同的类型容器具有不同的分配器，甚至有可能在运行时改变分配器。</p><p>多态分配器符合标准库分配器的规则。尽管如此，它的核心还是使用内存资源对象来进行内存管理。</p><p>多态分配器包含指向内存资源类的指针，这就是为什么它可以使用虚函数调度。您可以在运行时更改内存资源，同时保留分配器的类型。这与常规分配器相反，后者使用不同分配器时是不同类型。</p><p>多态分配器的所有类型都位于单独的命名空间<code>std::pmr</code>在头文件<code>&lt;memory_resource&gt;</code>（PMR, Polymorphic Memory Resource）中。</p><h2 id="pmr核心要素"><a href="#pmr核心要素" class="headerlink" title="pmr核心要素"></a><code>pmr</code>核心要素</h2><p><code>pmr</code>的主要部分：</p><ul><li><code>std::pmr::memory_resource</code> - 是所有其他实现的抽象基类。它定义了以下纯函数：  <pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">virtual</span> <span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">do_allocate</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>size_t bytes<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>size_t alignment<span class="token punctuation">)</span><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">do_deallocate</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> p<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>size_t bytes<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>size_t alignment<span class="token punctuation">)</span><span class="token keyword">virtual</span> <span class="token keyword">bool</span> <span class="token function">do_is_equal</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>pmr<span class="token double-colon punctuation">::</span>memory_resource<span class="token operator">&amp;</span> other<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">noexcept</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><code>std::pmr::polymorphic_allocator</code> - 是标准分配器的实现，它使用 <code>memory_resource</code> 对象来管理内存分配和释放。</li><li><code>new_delete_resource()</code>和<code>null_memory_resource()</code>访问的是全局内存资源。</li><li>一组预先定义的内存池资源类：<ul><li><code>synchronized_pool_resource</code></li><li><code>unsynchronized_pool_resource</code></li><li><code>monotonic_buffer_resource</code></li></ul></li><li>模板特化的标准容器与多态分配器，例如<code>std::pmr::vector</code>，<code>std::pmr::string</code>，<code>std::pmr::map</code>等。每个特化容器都在与相应容器相同的头文件中定义。</li><li>同样值得一提的是，池资源可以链式包含。如果资源池中没有可用内存，分配器将从”上游”资源中分配。</li></ul><h2 id="预先定义的内存资源"><a href="#预先定义的内存资源" class="headerlink" title="预先定义的内存资源"></a>预先定义的内存资源</h2><h3 id="1-new-delete-resource"><a href="#1-new-delete-resource" class="headerlink" title="1. new_delete_resource()"></a>1. <code>new_delete_resource()</code></h3><p>它是一个函数，返回指向全局“默认”内存资源的指针。它使用全局 new 和 delete 管理内存。</p><h3 id="2-null-memory-resource"><a href="#2-null-memory-resource" class="headerlink" title="2. null_memory_resource()"></a>2. <code>null_memory_resource()</code></h3><p>它返回一个指向全局“空”内存资源的指针，它在每次分配时抛出<code>std::bad_alloc</code>。虽然听起来没什么用，但当你想保证你的对象不会在堆上分配任何内存时，它可能会很方便。或用于测试。</p><h3 id="3-synchronized-pool-resource"><a href="#3-synchronized-pool-resource" class="headerlink" title="3. synchronized_pool_resource"></a>3. synchronized_pool_resource</h3><p>这是一个线程安全的分配器，用于管理不同大小的池。每个池都是一组块，这些块被分成大小均匀的块。</p><h3 id="4-unsynchronized-pool-resource"><a href="#4-unsynchronized-pool-resource" class="headerlink" title="4. unsynchronized_pool_resource"></a>4. unsynchronized_pool_resource</h3><p>非线程安全的资源池。</p><h3 id="5-monotonic-buffer-resource"><a href="#5-monotonic-buffer-resource" class="headerlink" title="5. monotonic_buffer_resource"></a>5. monotonic_buffer_resource</h3><p>这是一个非线程安全的、快速的、特殊用途的资源，它从预先分配的缓冲区中获取内存，但不会通过release来释放它。它只能单向递增。</p><h2 id="多态分配器示例"><a href="#多态分配器示例" class="headerlink" title="多态分配器示例"></a>多态分配器示例</h2><p>使用<code>monotonic_buffer_resource</code>和<code>pmr::vector</code>的简单例子.</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;memory_resource></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> buffer<span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span><span class="token function">fill_n</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">begin</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span><span class="token function">size</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token char">'-'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> buffer <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>pmr<span class="token double-colon punctuation">::</span>monotonic_buffer_resource pool<span class="token punctuation">&#123;</span>std<span class="token double-colon punctuation">::</span><span class="token function">data</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">,</span>                                             std<span class="token double-colon punctuation">::</span><span class="token function">size</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>pmr<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">></span> vec<span class="token punctuation">&#123;</span><span class="token operator">&amp;</span>pool<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">char</span> i <span class="token operator">=</span> <span class="token char">'a'</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token char">'z'</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        vec<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> buffer <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出：</p><pre class="line-numbers language-none"><code class="language-none">---------------------------------------------------------------aababcdabcdefghabcdefghijklmnopabcdefghijklmnopqrstuvwxyz------<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在上面的例子中，我们使用了一个<code>monotonic_buffer_resource</code>，这个资源是用堆栈中的一个内存块(<code>buffer[]</code>)初始化的。通过使用一个简单的 <code>char buffer[]</code> 数组，我们可以轻松打印“内存”的内容。<code>vector</code>从池中获取内存（并且由于它在堆栈上，所以速度非常快），如果没有更多可用空间，它将从“上游”资源中请求内存。该示例显示了需要插入更多元素时的<code>vector</code>重新分配。向量每次获取更多空间来存放所有字母。正如您所见，<code>monotonic_buffer_resource</code>不会删除任何内存，它只会向前增长。</p><p>我们也可以在向量上使用<code>reserve()</code>，这会限制内存分配的数量，但这个例子的重点是说明容器的“扩展”。</p><p>在容器中存储比<code>char</code>大的类型会怎么样？</p><h3 id="存储pmr-string"><a href="#存储pmr-string" class="headerlink" title="存储pmr::string"></a>存储<code>pmr::string</code></h3><p>将字符串插入<code>pmr::vector</code>会怎么样？</p><p>多态分配器的好处在于，如果容器中的对象也使用多态分配器，那么它们将要求父容器的分配器来管理内存。</p><p>如果你想使用这个特性，你必须使用<code>std::pmr::string</code>而不是<code>std::string</code>.</p><p>请查看下面的示例，其中我们预先在堆栈上分配缓冲区，然后将其传递到字符串<code>vector</code>：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;memory_resource></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"sizeof(std::string): "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>string<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token char">'\n'</span><span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"sizeof(std::pmr::string): "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>pmr<span class="token double-colon punctuation">::</span>string<span class="token punctuation">)</span>              <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>    <span class="token keyword">char</span> buffer<span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token comment">// a small buffer on the stack</span>    std<span class="token double-colon punctuation">::</span><span class="token function">fill_n</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">begin</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span><span class="token function">size</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token char">'-'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token keyword">auto</span> BufferPrinter <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>string_view buf<span class="token punctuation">,</span>                                  std<span class="token double-colon punctuation">::</span>string_view title<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> title <span class="token operator">&lt;&lt;</span> <span class="token string">":\n"</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> ch <span class="token operator">:</span> buf<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>ch <span class="token operator">>=</span> <span class="token char">' '</span> <span class="token operator">?</span> ch <span class="token operator">:</span> <span class="token char">'#'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token function">BufferPrinter</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token string">"zeroed buffer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>pmr<span class="token double-colon punctuation">::</span>monotonic_buffer_resource pool<span class="token punctuation">&#123;</span>std<span class="token double-colon punctuation">::</span><span class="token function">data</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">,</span>                                             std<span class="token double-colon punctuation">::</span><span class="token function">size</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>pmr<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>pmr<span class="token double-colon punctuation">::</span>string<span class="token operator">></span>  vec<span class="token punctuation">&#123;</span><span class="token operator">&amp;</span>pool<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    vec<span class="token punctuation">.</span><span class="token function">reserve</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    vec<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    vec<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token string">"One Two Three"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">BufferPrinter</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">string_view</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span><span class="token function">size</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                  <span class="token string">"after two short strings"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    vec<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span><span class="token string">"This is a longer string"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">BufferPrinter</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">string_view</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span><span class="token function">size</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                  <span class="token string">"after longer string strings"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    vec<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token string">"Four Five Six"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">BufferPrinter</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">string_view</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span><span class="token function">size</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                  <span class="token string">"after the last string"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以下是我在gcc 11.1 上收到的输出</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">sizeof<span class="token punctuation">(</span>std::string<span class="token punctuation">)</span>: <span class="token number">32</span>sizeof<span class="token punctuation">(</span>std::pmr::string<span class="token punctuation">)</span>: <span class="token number">40</span>zeroed buffer:---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------after two short strings:<span class="token variable"><span class="token variable">`</span><span class="token comment">#!6#####!6###########Hello World####</span><span class="token variable">`</span></span><span class="token comment">#!6#####!6###########One Two Three###-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------#</span>after longer string strings:<span class="token variable"><span class="token variable">`</span><span class="token comment">#!6#####!6###########Hello World####</span><span class="token variable">`</span></span><span class="token comment">#!6#####!6###########One Two Three###`#!6#####!6###################----------------------------------------------------------------------------------------This is a longer string#-------------------------------#</span>after the last string:<span class="token variable"><span class="token variable">`</span><span class="token comment">#!6#####!6###########Hello World####</span><span class="token variable">`</span></span><span class="token comment">#!6#####!6###########One Two Three###`#!6#####!6###################--------`#!6###`#!6###########Four Five Six###----------------------------------------This is a longer string#-------------------------------#</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以下是这个例子观察到的主要事情：</p><ul><li><code>pmr::string</code>大小大于常规<code>std::string</code>。这是因为分配器不是无状态的，它必须存储指向内存资源的指针。</li><li>例子中的<code>vector</code>保留了五个元素，因此当插入四个元素时<code>vector</code>不会变长。</li><li>前两个字符串很短，因此它们可以放入<code>vector</code>的内存块中，此处没有动态内存分配。</li><li>但是对于第三个字符串，要求它是一个单独的内存块，并且<code>vector</code>只存储一个指向它的指针。正如您在输出中所见，`”This is a longer string”几乎位于缓冲区的末尾。</li><li>当我们插入另一个短字符串，然后它再次进入<code>vector</code>内存块。</li></ul><p>比较一下，下面使用常规<code>std::string</code>时的输出：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">sizeof<span class="token punctuation">(</span>std::string<span class="token punctuation">)</span>: <span class="token number">32</span>sizeof<span class="token punctuation">(</span>std::pmr::string<span class="token punctuation">)</span>: <span class="token number">40</span>zeroed buffer:---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------after two short strings:@l<span class="token comment">#############Hello World####`l#############One Two Three###-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------#</span>after longer string strings:@l<span class="token comment">#############Hello World####`l#############One Two Three#####n3#V##################-----------------------------------------------------------------------------------------------------------------------------------------------------------------------#</span>after the last string:@l<span class="token comment">#############Hello World####`l#############One Two Three#####n3#V##################--------#l#############Four Five Six###-------------------------------------------------------------------------------------------------------------------------------#</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这次容器中的元素使用更少的内存，因为不需要存储指向内存资源的指针。短字符串存储在<code>vector</code>的内存块中，但请注意较长的字符串……它不在缓冲区中！正确地说，向量存储一个指向分配长字符串的内存块的指针，但默认分配器分配了它，因此它不会出现在我们的输出中。</p><p>我提到，如果内存资源不够，则分配器将从上游资源获取内存。我们如何观察它？</p><h3 id="一些手段"><a href="#一些手段" class="headerlink" title="一些手段"></a>一些手段</h3><p>在前面的例子中，上游内存资源是默认的，因为我们没有改变它。这意味着使用的是new() 和 delete()。但是，我们必须记住， do_allocate() 和 do_deallocate() 成员函数也采用对齐参数。</p><p>这就是为什么如果我们想要查看内存是否由 <code>new()</code> 分配，我们必须使用 C++17 带对齐支持的<code>new()</code> ：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;memory_resource></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token keyword">void</span><span class="token operator">*</span>  lastAllocatedPtr <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>size_t lastSize         <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">void</span><span class="token operator">*</span> <span class="token keyword">operator</span> <span class="token keyword">new</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>size_t size<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>align_val_t align<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">auto</span> ptr <span class="token operator">=</span> <span class="token function">aligned_alloc</span><span class="token punctuation">(</span><span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>size_t<span class="token operator">></span></span></span><span class="token punctuation">(</span>align<span class="token punctuation">)</span><span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ptr<span class="token punctuation">)</span> <span class="token keyword">throw</span> std<span class="token double-colon punctuation">::</span>bad_alloc<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"new: "</span> <span class="token operator">&lt;&lt;</span> size              <span class="token operator">&lt;&lt;</span> <span class="token string">", align: "</span> <span class="token operator">&lt;&lt;</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>size_t<span class="token operator">></span></span></span><span class="token punctuation">(</span>align<span class="token punctuation">)</span>              <span class="token operator">&lt;&lt;</span> <span class="token string">", ptr: "</span> <span class="token operator">&lt;&lt;</span> ptr <span class="token operator">&lt;&lt;</span> <span class="token char">'\n'</span><span class="token punctuation">;</span>    lastAllocatedPtr <span class="token operator">=</span> ptr<span class="token punctuation">;</span>    lastSize         <span class="token operator">=</span> size<span class="token punctuation">;</span>    <span class="token keyword">return</span> ptr<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token keyword">operator</span> <span class="token keyword">delete</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> ptr<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>size_t size<span class="token punctuation">,</span>                     std<span class="token double-colon punctuation">::</span>align_val_t align<span class="token punctuation">)</span> <span class="token keyword">noexcept</span><span class="token punctuation">&#123;</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"delete: "</span> <span class="token operator">&lt;&lt;</span> size              <span class="token operator">&lt;&lt;</span> <span class="token string">", align: "</span> <span class="token operator">&lt;&lt;</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>size_t<span class="token operator">></span></span></span><span class="token punctuation">(</span>align<span class="token punctuation">)</span>              <span class="token operator">&lt;&lt;</span> <span class="token string">", ptr : "</span> <span class="token operator">&lt;&lt;</span> ptr <span class="token operator">&lt;&lt;</span> <span class="token char">'\n'</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">constexpr</span> size_t buf_size         <span class="token operator">=</span> <span class="token number">32</span><span class="token punctuation">;</span>    <span class="token keyword">uint16_t</span>         buffer<span class="token punctuation">[</span>buf_size<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token comment">// a small buffer on the stack</span>    std<span class="token double-colon punctuation">::</span>pmr<span class="token double-colon punctuation">::</span>monotonic_buffer_resource pool<span class="token punctuation">&#123;</span>        std<span class="token double-colon punctuation">::</span><span class="token function">data</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span><span class="token function">size</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">uint16_t</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>pmr<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">uint16_t</span><span class="token operator">></span> vec<span class="token punctuation">&#123;</span><span class="token operator">&amp;</span>pool<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>size_t i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">20</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> vec<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>size_t i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> buf_size<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> buffer<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>    <span class="token keyword">auto</span><span class="token operator">*</span> bufTemp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">uint16_t</span><span class="token operator">*</span><span class="token punctuation">)</span>lastAllocatedPtr<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>size_t i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> lastSize<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> bufTemp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面的代码中实现了对齐的<code>new()</code></p><p>还有两个丑陋的全局变量 :) 然而，多亏了它们，我们可以看到我们的内存何时消失.</p><p>这一次，我们存储<code>uint16_t</code>而不是<code>char</code>.</p><p>该程序试图在一个向量中存储 20 个数字，但由于向量不断增长，我们需要的不仅仅是预定义的缓冲区（只有 32 ）。这就是为什么在某些时候分配器会转向全局<code>new</code>和<code>delete</code>。</p><p>以下可能获得的输出：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">new: <span class="token number">128</span>, align: <span class="token number">16</span>, ptr: 0x55e22faebeb0<span class="token number">1</span> <span class="token number">1</span> <span class="token number">2</span> <span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span> <span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span> <span class="token number">5</span> <span class="token number">6</span> <span class="token number">7</span> <span class="token number">8</span> <span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span> <span class="token number">5</span> <span class="token number">6</span> <span class="token number">7</span> <span class="token number">8</span> <span class="token number">9</span> <span class="token number">10</span> <span class="token number">11</span> <span class="token number">12</span> <span class="token number">13</span> <span class="token number">14</span> <span class="token number">15</span> <span class="token number">16</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span> <span class="token number">5</span> <span class="token number">6</span> <span class="token number">7</span> <span class="token number">8</span> <span class="token number">9</span> <span class="token number">10</span> <span class="token number">11</span> <span class="token number">12</span> <span class="token number">13</span> <span class="token number">14</span> <span class="token number">15</span> <span class="token number">16</span> <span class="token number">17</span> <span class="token number">18</span> <span class="token number">19</span> <span class="token number">20</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span>  <span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>delete: <span class="token number">128</span>, align: <span class="token number">16</span>, ptr <span class="token builtin class-name">:</span> 0x55e22faebeb0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>看起来预定义的缓冲区最多只能存储第 16 个元素，当我们插入数字 17 时，向量必须增长，这就是我们看到新分配128 字节的原因。第二行显示自定义缓冲区的内容，而第三行显示通过<code>new() </code>分配的内存。</p><h3 id="更好的解决方案"><a href="#更好的解决方案" class="headerlink" title="更好的解决方案"></a>更好的解决方案</h3><p>前面的示例有效并向我们展示了一些东西，但是在生产代码中使用<code>new()</code> 和 <code>delete()</code> 进行特殊操作并不是您应该做的。事实上，内存资源是可扩展的，如果你想要最好的解决方案，你可以重用你的资源！</p><p>您所要做的就是实现以下内容：</p><ul><li>继承<code>std::pmr::memory_resource</code></li><li>实现相关接口：<ul><li><code>do_allocate()</code></li><li><code>do_deallocate()</code></li><li><code>do_is_equal()</code></li></ul></li><li>将自定义内存资源设置为对象和容器的资源池。</li></ul><p>下面是一些如何实现的参考：</p><ul><li><a href="https://www.youtube.com/watch?v=v3dz-AKOVL8">CppCon 2017: Pablo Halpern “Allocators: The Good Parts” - YouTube</a></li><li><a href="https://www.youtube.com/watch?v=FcpmMmyNNv8">Taming dynamic memory - An introduction to custom allocators in C++ - Andreas Weis - code::dive 2018 - YouTube</a></li><li>A whole extensive chapter in Nicolai’s book on C++17: <a href="https://leanpub.com/cpp17">C++17 - The Complete Guide</a>.</li><li><a href="https://www.youtube.com/watch?v=q6A7cKFXjY0&">C++ Weekly - Ep 222 - 3.5x Faster Standard Containers With PMR! - YouTube</a></li></ul><h3 id="调试内存资源"><a href="#调试内存资源" class="headerlink" title="调试内存资源"></a>调试内存资源</h3><p>为了有效地使用分配器，如果有一个工具可以让我们跟踪容器中的内存分配，这会很方便。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">debug_resource</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> std<span class="token double-colon punctuation">::</span>pmr<span class="token double-colon punctuation">::</span><span class="token class-name">memory_resource</span></span><span class="token punctuation">&#123;</span>  <span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">explicit</span> <span class="token function">debug_resource</span><span class="token punctuation">(</span>        std<span class="token double-colon punctuation">::</span>string name<span class="token punctuation">,</span>        std<span class="token double-colon punctuation">::</span>pmr<span class="token double-colon punctuation">::</span>memory_resource<span class="token operator">*</span> up <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>pmr<span class="token double-colon punctuation">::</span><span class="token function">get_default_resource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token operator">:</span> _name<span class="token punctuation">&#123;</span>std<span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> _upstream<span class="token punctuation">&#123;</span>up<span class="token punctuation">&#125;</span>    <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">do_allocate</span><span class="token punctuation">(</span>size_t bytes<span class="token punctuation">,</span> size_t alignment<span class="token punctuation">)</span> <span class="token keyword">override</span>    <span class="token punctuation">&#123;</span>        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> _name <span class="token operator">&lt;&lt;</span> <span class="token string">" do_allocate(): "</span> <span class="token operator">&lt;&lt;</span> bytes <span class="token operator">&lt;&lt;</span> <span class="token char">'\n'</span><span class="token punctuation">;</span>        <span class="token keyword">void</span><span class="token operator">*</span> ret <span class="token operator">=</span> _upstream<span class="token operator">-></span><span class="token function">allocate</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span> alignment<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ret<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">void</span> <span class="token function">do_deallocate</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> ptr<span class="token punctuation">,</span> size_t bytes<span class="token punctuation">,</span> size_t alignment<span class="token punctuation">)</span> <span class="token keyword">override</span>    <span class="token punctuation">&#123;</span>        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> _name <span class="token operator">&lt;&lt;</span> <span class="token string">" do_deallocate(): "</span> <span class="token operator">&lt;&lt;</span> bytes <span class="token operator">&lt;&lt;</span> <span class="token char">'\n'</span><span class="token punctuation">;</span>        _upstream<span class="token operator">-></span><span class="token function">deallocate</span><span class="token punctuation">(</span>ptr<span class="token punctuation">,</span> bytes<span class="token punctuation">,</span> alignment<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">bool</span> <span class="token function">do_is_equal</span><span class="token punctuation">(</span>        <span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>pmr<span class="token double-colon punctuation">::</span>memory_resource<span class="token operator">&amp;</span> other<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">noexcept</span> <span class="token keyword">override</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span> <span class="token operator">==</span> <span class="token operator">&amp;</span>other<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token keyword">private</span><span class="token operator">:</span>    std<span class="token double-colon punctuation">::</span>string _name<span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>pmr<span class="token double-colon punctuation">::</span>memory_resource<span class="token operator">*</span> _upstream<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>debug_resource</code>只是实际内存资源的包装器。正如在<code>do_allocate</code>/<code>do_deallocate</code>函数中看到的那样，我们只记录数字，然后使用上游资源进行实际内存分配。</p><p>示例用例：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">constexpr</span> size_t BUF_SIZE         <span class="token operator">=</span> <span class="token number">128</span><span class="token punctuation">;</span>    <span class="token keyword">char</span>             buffer<span class="token punctuation">[</span>BUF_SIZE<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span><span class="token function">fill_n</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">begin</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span><span class="token function">size</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token char">'-'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    debug_resource                      default_dbg<span class="token punctuation">&#123;</span><span class="token string">"default"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>pmr<span class="token double-colon punctuation">::</span>monotonic_buffer_resource pool<span class="token punctuation">&#123;</span>std<span class="token double-colon punctuation">::</span><span class="token function">data</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">,</span>                                             std<span class="token double-colon punctuation">::</span><span class="token function">size</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>default_dbg<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    debug_resource                      dbg<span class="token punctuation">&#123;</span><span class="token string">"pool"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>pool<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>pmr<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span>       strings<span class="token punctuation">&#123;</span><span class="token operator">&amp;</span>dbg<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    strings<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span><span class="token string">"Hello Short String"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    strings<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span><span class="token string">"Hello Short String 2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">pool do_allocate<span class="token punctuation">(</span><span class="token punctuation">)</span>: <span class="token number">32</span>pool do_allocate<span class="token punctuation">(</span><span class="token punctuation">)</span>: <span class="token number">64</span>pool do_deallocate<span class="token punctuation">(</span><span class="token punctuation">)</span>: <span class="token number">32</span>pool do_deallocate<span class="token punctuation">(</span><span class="token punctuation">)</span>: <span class="token number">64</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>上面我们使用了两次<code>debug_resource</code>，第一个“池”用于记录请求到<code>monotonic_buffer_resource</code>的每个分配。在输出中，您可以看到我们有两次分配和两次解除分配。</p><p>还有另一个<code>debug_resource</code> - <code>default</code>。这被配置为monotonic_buffer_resource 的父级。这意味着如果池需要分配。那么它必须通过我们的“default”对象请求内存。</p><p>如果您添加三个字符串，如下所示：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">strings<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span><span class="token string">"Hello Short String"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>strings<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span><span class="token string">"Hello Short String 2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>strings<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span><span class="token string">"Hello A bit longer String"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>那么输出就不一样了：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">pool do_allocate<span class="token punctuation">(</span><span class="token punctuation">)</span>: <span class="token number">32</span>pool do_allocate<span class="token punctuation">(</span><span class="token punctuation">)</span>: <span class="token number">64</span>pool do_deallocate<span class="token punctuation">(</span><span class="token punctuation">)</span>: <span class="token number">32</span>pool do_allocate<span class="token punctuation">(</span><span class="token punctuation">)</span>: <span class="token number">128</span>default do_allocate<span class="token punctuation">(</span><span class="token punctuation">)</span>: <span class="token number">256</span>pool do_deallocate<span class="token punctuation">(</span><span class="token punctuation">)</span>: <span class="token number">64</span>pool do_deallocate<span class="token punctuation">(</span><span class="token punctuation">)</span>: <span class="token number">128</span>default do_deallocate<span class="token punctuation">(</span><span class="token punctuation">)</span>: <span class="token number">256</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这次您可以注意到，对于第三个字符串，我们预定义的小缓冲区内没有空间，这就是为什么<code>monotonic_buffer_resource</code>必须要求另外256个字节的“default”。</p><h2 id="自定义类型"><a href="#自定义类型" class="headerlink" title="自定义类型"></a>自定义类型</h2><p>定义一个自定义类型：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">struct</span> <span class="token class-name">Product</span> <span class="token punctuation">&#123;</span>    std<span class="token double-colon punctuation">::</span>string name<span class="token punctuation">;</span>    <span class="token keyword">char</span>        cost<span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>如果将它插入向量：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>pmr<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>Product<span class="token operator">></span> vec<span class="token punctuation">&#123;</span><span class="token operator">&amp;</span>pool<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后，vector将使用提供的内存资源，但不会应用于自定义类型中。所以，如果 Product 必须为name分配内存，它将使用默认分配器。</p><p>我们必须“启用”我们的类型并让它知道分配器，以便它可以利用来自父容器的分配器。</p><p>配备了调试资源和一些“缓冲区打印技术”，我们现在可以检查我们的自定义类型是否与分配器一起工作。让我们来看看：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">struct</span> <span class="token class-name">SimpleProduct</span> <span class="token punctuation">&#123;</span>    std<span class="token double-colon punctuation">::</span>string name<span class="token punctuation">;</span>    <span class="token keyword">char</span>        cost<span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">constexpr</span> size_t BUF_SIZE         <span class="token operator">=</span> <span class="token number">256</span><span class="token punctuation">;</span>    <span class="token keyword">char</span>             buffer<span class="token punctuation">[</span>BUF_SIZE<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span><span class="token function">fill_n</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">begin</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span><span class="token function">size</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token char">'-'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token keyword">auto</span> BufferPrinter <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>string_view buf<span class="token punctuation">,</span>                                  std<span class="token double-colon punctuation">::</span>string_view title<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> title <span class="token operator">&lt;&lt;</span> <span class="token string">":\n"</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>size_t i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> buf<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>buf<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token char">' '</span> <span class="token operator">?</span> buf<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token char">'#'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">64</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token char">'\n'</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token char">'\n'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token function">BufferPrinter</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token string">"initial buffer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    debug_resource                      default_dbg<span class="token punctuation">&#123;</span><span class="token string">"default"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>pmr<span class="token double-colon punctuation">::</span>monotonic_buffer_resource pool<span class="token punctuation">&#123;</span>std<span class="token double-colon punctuation">::</span><span class="token function">data</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">,</span>                                             std<span class="token double-colon punctuation">::</span><span class="token function">size</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>default_dbg<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    debug_resource                      dbg<span class="token punctuation">&#123;</span><span class="token string">"buffer"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>pool<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>pmr<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>SimpleProduct<span class="token operator">></span>     products<span class="token punctuation">&#123;</span><span class="token operator">&amp;</span>dbg<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    products<span class="token punctuation">.</span><span class="token function">reserve</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    products<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>SimpleProduct<span class="token punctuation">&#123;</span><span class="token string">"car"</span><span class="token punctuation">,</span> <span class="token char">'7'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    products<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>SimpleProduct<span class="token punctuation">&#123;</span><span class="token string">"TV"</span><span class="token punctuation">,</span> <span class="token char">'9'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    products<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>SimpleProduct<span class="token punctuation">&#123;</span><span class="token string">"a bit longer product name"</span><span class="token punctuation">,</span> <span class="token char">'4'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">BufferPrinter</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>string_view<span class="token punctuation">&#123;</span>buffer<span class="token punctuation">,</span> BUF_SIZE<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">"after insertion"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">initial buffer:---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------buffer do_allocate<span class="token punctuation">(</span><span class="token punctuation">)</span>: <span class="token number">160</span>after insertion:<span class="token comment">###############car#er##@P#####7-------###############TV##er##</span>@P<span class="token comment">#####9-------##N##U##################--------4---------------</span>-------------------------------------------------------------------------------------------------------------------------------<span class="token comment">#</span>buffer do_deallocate<span class="token punctuation">(</span><span class="token punctuation">)</span>: <span class="token number">160</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>让我们解密代码和输出：</p><p>该<code>vector</code>包含<code>SimpleProduct</code>对象，它只是一个字符串和一个数字。我们保留了四个元素，您可以注意到我们的调试资源记录了 160 字节的分配。插入三个元素后，我们可以发现car和数字 7（这就是我使用 char 作为价格类型的原因）。然后是 9 的TV。我们也可以注意到<code>4</code>作为第三个元素的价格，但没有名字<code>a bit longer product name</code></p><p>让自定义类型分配器感知并不是很难，但我们必须记住以下几点：</p><ul><li>尽可能使用 pmr::* 类型，以便您可以将分配器传递给它们。</li><li>声明 allocator_type 以便分配器特征可以“识别”您的类型使用分配器。您还可以为分配器特征声明其他属性，但在大多数情况下，默认值就可以了。</li><li>声明接受分配器并将其进一步传递给您的成员的构造函数。</li><li>也注意声明分配器的复制和移动构造函数。</li><li>与分配和移动操作相同。</li></ul><p>这意味着我们相对简单的自定义类型声明必须变长：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">struct</span> <span class="token class-name">Product</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">using</span> allocator_type <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>pmr<span class="token double-colon punctuation">::</span>polymorphic_allocator<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">></span><span class="token punctuation">;</span>    <span class="token keyword">explicit</span> <span class="token function">Product</span><span class="token punctuation">(</span>allocator_type alloc <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token operator">:</span> _name<span class="token punctuation">&#123;</span>alloc<span class="token punctuation">&#125;</span>    <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token function">Product</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>pmr<span class="token double-colon punctuation">::</span>string name<span class="token punctuation">,</span> <span class="token keyword">char</span> price<span class="token punctuation">,</span>            <span class="token keyword">const</span> allocator_type<span class="token operator">&amp;</span> alloc <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token operator">:</span> _name<span class="token punctuation">&#123;</span>std<span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span> alloc<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> _price<span class="token punctuation">&#123;</span>price<span class="token punctuation">&#125;</span>    <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token function">Product</span><span class="token punctuation">(</span><span class="token keyword">const</span> Product<span class="token operator">&amp;</span> other<span class="token punctuation">,</span> <span class="token keyword">const</span> allocator_type<span class="token operator">&amp;</span> alloc<span class="token punctuation">)</span>        <span class="token operator">:</span> _name<span class="token punctuation">&#123;</span>other<span class="token punctuation">.</span>_name<span class="token punctuation">,</span> alloc<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> _price<span class="token punctuation">&#123;</span>other<span class="token punctuation">.</span>_price<span class="token punctuation">&#125;</span>    <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token function">Product</span><span class="token punctuation">(</span>Product<span class="token operator">&amp;&amp;</span> other<span class="token punctuation">,</span> <span class="token keyword">const</span> allocator_type<span class="token operator">&amp;</span> alloc<span class="token punctuation">)</span>        <span class="token operator">:</span> _name<span class="token punctuation">&#123;</span>std<span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span>other<span class="token punctuation">.</span>_name<span class="token punctuation">)</span><span class="token punctuation">,</span> alloc<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> _price<span class="token punctuation">&#123;</span>other<span class="token punctuation">.</span>_price<span class="token punctuation">&#125;</span>    <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    Product<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> Product<span class="token operator">&amp;</span> other<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">;</span>    Product<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span>Product<span class="token operator">&amp;&amp;</span> other<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>pmr<span class="token double-colon punctuation">::</span>string _name<span class="token punctuation">;</span>    <span class="token keyword">char</span> _price<span class="token punctuation">&#123;</span><span class="token char">'0'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">constexpr</span> size_t BUF_SIZE         <span class="token operator">=</span> <span class="token number">256</span><span class="token punctuation">;</span>    <span class="token keyword">char</span>             buffer<span class="token punctuation">[</span>BUF_SIZE<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span><span class="token function">fill_n</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">begin</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span><span class="token function">size</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token char">'-'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token keyword">auto</span> BufferPrinter <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>string_view buf<span class="token punctuation">,</span>                                  std<span class="token double-colon punctuation">::</span>string_view title<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> title <span class="token operator">&lt;&lt;</span> <span class="token string">":\n"</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>size_t i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> buf<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>buf<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token char">' '</span> <span class="token operator">?</span> buf<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token char">'#'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">64</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token char">'\n'</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token char">'\n'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    debug_resource                      default_dbg<span class="token punctuation">&#123;</span><span class="token string">"default"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>pmr<span class="token double-colon punctuation">::</span>monotonic_buffer_resource pool<span class="token punctuation">&#123;</span>std<span class="token double-colon punctuation">::</span><span class="token function">data</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">,</span>                                             std<span class="token double-colon punctuation">::</span><span class="token function">size</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>default_dbg<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    debug_resource                      dbg<span class="token punctuation">&#123;</span><span class="token string">"buffer"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>pool<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>pmr<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>Product<span class="token operator">></span>     products<span class="token punctuation">&#123;</span><span class="token operator">&amp;</span>dbg<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    products<span class="token punctuation">.</span><span class="token function">reserve</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    products<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>Product<span class="token punctuation">&#123;</span><span class="token string">"car"</span><span class="token punctuation">,</span> <span class="token char">'7'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    products<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>Product<span class="token punctuation">&#123;</span><span class="token string">"TV"</span><span class="token punctuation">,</span> <span class="token char">'9'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    products<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>Product<span class="token punctuation">&#123;</span><span class="token string">"a bit longer product name"</span><span class="token punctuation">,</span> <span class="token char">'4'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">BufferPrinter</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>string_view<span class="token punctuation">&#123;</span>buffer<span class="token punctuation">,</span> BUF_SIZE<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">"after insertion"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">buffer do_allocate<span class="token punctuation">(</span><span class="token punctuation">)</span>: <span class="token number">192</span>buffer do_allocate<span class="token punctuation">(</span><span class="token punctuation">)</span>: <span class="token number">26</span>after insertion:<span class="token comment">#######(##############car#+## ###+##7-------#######X######</span><span class="token comment">########TV##+## ###+##9-------##############################</span>--------4-------------------------------------------------------a bit longer product name<span class="token comment">#-------------------------------------#</span>buffer do_deallocate<span class="token punctuation">(</span><span class="token punctuation">)</span>: <span class="token number">26</span>buffer do_deallocate<span class="token punctuation">(</span><span class="token punctuation">)</span>: <span class="token number">192</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在输出中，第一个内存分配<code>192</code>字节用于<code>vector.reserve(3)</code>，然后有另一个用于更长的字符串（第三个元素）。还打印了完整的缓冲区，显示字符串所在的位置。</p><p>我们的自定义对象由其他<code>pmr</code>容器组成，因此更加简单！而且我想在大多数情况下您可以利用现有类型。但是，如果您需要访问分配器并执行自定义内存分配，那么您应该查看 Pablo 的演讲，他在其中介绍了自定义列表容器的示例。</p><p><a href="https://www.youtube.com/watch?v=v3dz-AKOVL8">CppCon 2017: Pablo Halpern “Allocators: The Good Parts” - YouTube</a></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过本文，我想向您展示一些有关pmr的基本示例和多态分配器的概念。如您所见，为<code>vector</code>设置分配器比使用常规分配器简单得多。您可以使用一组预定义的分配器，并且实现您的自定义版本相对容易。文章中的代码仅展示了一个简单的例子，以说明从何处获取内存。</p><p>在这篇博文中，我们在标准库的深层进行了另一次旅程。虽然分配器很可怕，但似乎多态分配器让事情变得更舒服。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://www.youtube.com/watch?v=v3dz-AKOVL8">CppCon 2017: Pablo Halpern “Allocators: The Good Parts” - YouTube</a> - in-depth explanations of allocators and the new PMR stuff. Even with a test implementation of some node-based container.</li><li><a href="https://www.youtube.com/watch?v=LIb3L4vKZ7U">CppCon 2015: Andrei Alexandrescu “std::allocator…” - YouTube</a> - from the introduction you can learn than <code>std::allocator</code> was meant to fix far/near issues and make it consistent, but right now we want much more from this system.</li><li><a href="https://stackoverflow.com/questions/4502691/what-is-the-purpose-of-allocator-traitst-in-c0x">c++ - What is the purpose of allocator_traits in C++0x? - Stack Overflow</a></li><li><a href="https://jguegant.github.io/blogs/tech/dense-hash-map3.html#dense-hash-map3">Jean Guegant’s Blog – Making a STL-compatible hash map from scratch - Part 3 - The wonderful world of iterators and allocators</a> - this is a super detailed blog post on how to make more use of allocators, not to mention good anecdotes and jokes :)</li><li><a href="https://blog.feabhas.com/2019/03/thanks-for-the-memory-allocator/">Thanks for the memory (allocator) - Sticky Bits</a> - a valuable introduction to allocators, their story and how the new model of PMR fit in. You can also see how to write your tracking pmr allocator and how <code>*_pool_resource</code> works.</li><li><a href="https://www.youtube.com/watch?v=IejdKidUwIg">CppCon 2018: Arthur O’Dwyer “An Allocator is a Handle to a Heap”</a> - a great talk from Arthur where he shares all the knowledge needed to understand allocators.</li><li><a href="https://amzn.to/3gsR3u9">C++17 - The Complete Guide</a> by Nicolai Josuttis - inside the book, there’s a long chapter about PMR allocators.</li></ul>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多态分配器 </tag>
            
            <tag> 内存池 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++-placement-new</title>
      <link href="/C-placement-new.html"/>
      <url>/C-placement-new.html</url>
      
        <content type="html"><![CDATA[<h2 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">test</span><span class="token punctuation">&#123;</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token keyword">int</span> _id<span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">_id</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"ctor. this="</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">this</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" id="</span> <span class="token operator">&lt;&lt;</span> _id <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token operator">~</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>test<span class="token double-colon punctuation">::</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"ctor. this="</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">this</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" id="</span> <span class="token operator">&lt;&lt;</span> _id <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token class-name">test</span><span class="token double-colon punctuation">::</span><span class="token operator">~</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"dtor. this="</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">this</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" id="</span> <span class="token operator">&lt;&lt;</span> _id <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">constexpr</span> <span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    test<span class="token operator">*</span>         buf  <span class="token operator">=</span> <span class="token keyword">new</span> test<span class="token punctuation">[</span>size<span class="token punctuation">]</span><span class="token punctuation">;</span>    test<span class="token operator">*</span> tmp <span class="token operator">=</span> buf<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"buf="</span> <span class="token operator">&lt;&lt;</span> buf <span class="token operator">&lt;&lt;</span> <span class="token string">" tmp="</span> <span class="token operator">&lt;&lt;</span> tmp <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>size_t i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">new</span> <span class="token punctuation">(</span>tmp<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">test</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"buf="</span> <span class="token operator">&lt;&lt;</span> buf <span class="token operator">&lt;&lt;</span> <span class="token string">" tmp="</span> <span class="token operator">&lt;&lt;</span> tmp <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buf<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">ctor. this&#x3D;0x5642615d9eb8 id&#x3D;0ctor. this&#x3D;0x5642615d9ebc id&#x3D;0ctor. this&#x3D;0x5642615d9ec0 id&#x3D;0buf&#x3D;0x5642615d9eb8 tmp&#x3D;0x5642615d9eb8ctor. this&#x3D;0x5642615d9eb8 id&#x3D;0ctor. this&#x3D;0x5642615d9ebc id&#x3D;1ctor. this&#x3D;0x5642615d9ec0 id&#x3D;2buf&#x3D;0x5642615d9eb8 tmp&#x3D;0x5642615d9ec4dtor. this&#x3D;0x5642615d9ec0 id&#x3D;2dtor. this&#x3D;0x5642615d9ebc id&#x3D;1dtor. this&#x3D;0x5642615d9eb8 id&#x3D;0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="示例2"><a href="#示例2" class="headerlink" title="示例2"></a>示例2</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdlib></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">test</span><span class="token punctuation">&#123;</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token keyword">int</span> _id<span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">_id</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"ctor. this="</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">this</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" id="</span> <span class="token operator">&lt;&lt;</span> _id <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token operator">~</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>test<span class="token double-colon punctuation">::</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"ctor. this="</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">this</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" id="</span> <span class="token operator">&lt;&lt;</span> _id <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token class-name">test</span><span class="token double-colon punctuation">::</span><span class="token operator">~</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"dtor. this="</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">this</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" id="</span> <span class="token operator">&lt;&lt;</span> _id <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">constexpr</span> <span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span><span class="token operator">*</span>size<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    test<span class="token operator">*</span> tmp <span class="token operator">=</span> <span class="token punctuation">(</span>test<span class="token operator">*</span><span class="token punctuation">)</span>buf<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"buf="</span> <span class="token operator">&lt;&lt;</span> buf <span class="token operator">&lt;&lt;</span> <span class="token string">" tmp="</span> <span class="token operator">&lt;&lt;</span> tmp <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>size_t i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">new</span> <span class="token punctuation">(</span>tmp<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">test</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"buf="</span> <span class="token operator">&lt;&lt;</span> buf <span class="token operator">&lt;&lt;</span> <span class="token string">" tmp="</span> <span class="token operator">&lt;&lt;</span> tmp <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">buf<span class="token operator">=</span> tmp<span class="token operator">=</span><span class="token number">0x7ffe2e9f91dc</span>ctor<span class="token punctuation">.</span> <span class="token keyword">this</span><span class="token operator">=</span><span class="token number">0x7ffe2e9f91dc</span> id<span class="token operator">=</span><span class="token number">0</span>ctor<span class="token punctuation">.</span> <span class="token keyword">this</span><span class="token operator">=</span><span class="token number">0x7ffe2e9f91e0</span> id<span class="token operator">=</span><span class="token number">1</span>ctor<span class="token punctuation">.</span> <span class="token keyword">this</span><span class="token operator">=</span><span class="token number">0x7ffe2e9f91e4</span> id<span class="token operator">=</span><span class="token number">2</span>buf<span class="token operator">=</span> tmp<span class="token operator">=</span><span class="token number">0x7ffe2e9f91e8</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> placement new </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++-new-del-重载</title>
      <link href="/C-new-del-%E9%87%8D%E8%BD%BD.html"/>
      <url>/C-new-del-%E9%87%8D%E8%BD%BD.html</url>
      
        <content type="html"><![CDATA[<h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">class</span> <span class="token class-name">test</span><span class="token punctuation">&#123;</span><span class="token keyword">private</span><span class="token operator">:</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">void</span><span class="token operator">*</span> <span class="token keyword">operator</span> <span class="token keyword">new</span><span class="token punctuation">(</span>size_t size<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"reload new\n"</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">malloc</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">void</span> <span class="token keyword">operator</span> <span class="token keyword">delete</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> ptr<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"reload del\n"</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">free</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">;</span>    <span class="token operator">~</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">void</span><span class="token operator">*</span> <span class="token keyword">operator</span> <span class="token keyword">new</span><span class="token punctuation">(</span>size_t size<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"g reload new\n"</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">malloc</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token keyword">operator</span> <span class="token keyword">delete</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> ptr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"g reload del\n"</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">free</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token keyword">const</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    test<span class="token operator">*</span> t <span class="token operator">=</span> <span class="token keyword">new</span> test<span class="token punctuation">;</span>    <span class="token keyword">delete</span> t<span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token operator">*</span> i <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">delete</span> i<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">reload newreload delg reload newg reload del<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> new </tag>
            
            <tag> delete </tag>
            
            <tag> overload </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++算法库算法整理</title>
      <link href="/C-%E7%AE%97%E6%B3%95%E5%BA%93%E7%AE%97%E6%B3%95%E6%95%B4%E7%90%86.html"/>
      <url>/C-%E7%AE%97%E6%B3%95%E5%BA%93%E7%AE%97%E6%B3%95%E6%95%B4%E7%90%86.html</url>
      
        <content type="html"><![CDATA[<h2 id="C-algorithm-lib"><a href="#C-algorithm-lib" class="headerlink" title="C++ algorithm lib"></a>C++ algorithm lib</h2><p>C++ 算法库做一个整理，方便以后查找使用。对应的执行策略版本因用法一致不显示。本文档不包含算法的ranges版本。</p><p>C++算法库提供大量用途的函数（例如查找、排序、计数、操作），它们在元素范围上操作。注意范围定义为 <code>[first, last)</code> ，其中 <code>last</code> 指代要查询或修改的最后元素的<em>后一个</em>元素。</p><blockquote><p><a href="https://zh.cppreference.com/w/cpp/algorithm/ranges">受约束算法</a></p><p>C++20 在命名空间 <code>std::ranges</code> 中提供大多数算法的受约束版本，能以迭代器-哨位对或单个 <code>range</code> 参数指定范围，并且支持投影和指向成员指针可调用对象。另外更改了大多数算法的返回类型，以返回算法执行过程中计算的所有潜在有用信息。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>ranges<span class="token double-colon punctuation">::</span><span class="token function">sort</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 有制约算法</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></blockquote><blockquote><p>执行策略</p><p>大多数算法拥有接受执行策略的重载。标准算法库提供几种执行策略，并提供对应执行策略的类型和对象。用户可以静态地选择执行策略，通过以对应类型的执行策略对象为参数，调用并行算法。</p><p>标准库实现（但不是用户）可以定义附加的执行策略作为扩展。以实现定义类型的执行策略对象调用的并行算法的语义是实现定义的。</p><p>允许算法的并行版本（除了 <code>std::for_each</code> 与 <code>std::for_each_n</code> 进行任意的元素复制，只要 <code>std::is_trivially_copy_constructible_v&lt;T&gt;</code> 与 <code>std::is_trivially_destructible_v&lt;T&gt;</code> 均为 <code>true</code> ，其中 <code>T</code> 是元素的类型。</p><table><thead><tr><th>定义于头文件 <code>&lt;execution&gt;</code> , 命名空间 <code>std::execution</code></th><th align="center"></th></tr></thead><tbody><tr><td>sequenced_policy<br />parallel_policy<br />parallel_unsequenced_policy<br />unsequenced_policy</td><td align="center">执行策略类型 (类)</td></tr><tr><td>seq<br />par<br />par_unseq<br />unseq</td><td align="center">全局执行策略对象 (常量)</td></tr><tr><td><code>std::is_execution_policy</code></td><td align="center">测试一个类是否表示某种执行策略</td></tr></tbody></table></blockquote><h3 id="不修改序列的操作"><a href="#不修改序列的操作" class="headerlink" title="不修改序列的操作"></a>不修改序列的操作</h3><h4 id="1-all-of-检查范围中所有元素对谓词为true"><a href="#1-all-of-检查范围中所有元素对谓词为true" class="headerlink" title="1. all_of 检查范围中所有元素对谓词为true"></a>1. <code>all_of</code> 检查范围中所有元素对谓词为<code>true</code></h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">InputIt</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">UnaryPredicate</span> <span class="token operator">></span><span class="token keyword">constexpr</span> <span class="token keyword">bool</span> <span class="token function">all_of</span><span class="token punctuation">(</span> InputIt first<span class="token punctuation">,</span> InputIt last<span class="token punctuation">,</span> UnaryPredicate p <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Proj - 以投影 proj 投影</span><span class="token keyword">template</span><span class="token operator">&lt;</span> std<span class="token double-colon punctuation">::</span>input_iterator I<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>sentinel_for<span class="token operator">&lt;</span>I<span class="token operator">></span> S<span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">Proj</span> <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>identity<span class="token punctuation">,</span>          std<span class="token double-colon punctuation">::</span>indirect_unary_predicate<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>projected<span class="token operator">&lt;</span>I<span class="token punctuation">,</span> Proj<span class="token operator">>></span> Pred <span class="token operator">></span><span class="token keyword">constexpr</span> <span class="token keyword">bool</span> <span class="token function">all_of</span><span class="token punctuation">(</span> I first<span class="token punctuation">,</span> S last<span class="token punctuation">,</span> Pred pred<span class="token punctuation">,</span> Proj proj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-any-of-检查范围中任一元素对谓词为true"><a href="#2-any-of-检查范围中任一元素对谓词为true" class="headerlink" title="2. any_of 检查范围中任一元素对谓词为true"></a>2. <code>any_of</code> 检查范围中任一元素对谓词为<code>true</code></h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">InputIt</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">UnaryPredicate</span> <span class="token operator">></span><span class="token keyword">constexpr</span> <span class="token keyword">bool</span> <span class="token function">any_of</span><span class="token punctuation">(</span> InputIt first<span class="token punctuation">,</span> InputIt last<span class="token punctuation">,</span> UnaryPredicate p <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">template</span><span class="token operator">&lt;</span> std<span class="token double-colon punctuation">::</span>input_iterator I<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>sentinel_for<span class="token operator">&lt;</span>I<span class="token operator">></span> S<span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">Proj</span> <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>identity<span class="token punctuation">,</span>          std<span class="token double-colon punctuation">::</span>indirect_unary_predicate<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>projected<span class="token operator">&lt;</span>I<span class="token punctuation">,</span> Proj<span class="token operator">>></span> Pred <span class="token operator">></span><span class="token keyword">constexpr</span> <span class="token keyword">bool</span> <span class="token function">any_of</span><span class="token punctuation">(</span> I first<span class="token punctuation">,</span> S last<span class="token punctuation">,</span> Pred pred<span class="token punctuation">,</span> Proj proj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-none-of-检查范围中没有元素对谓词为true"><a href="#3-none-of-检查范围中没有元素对谓词为true" class="headerlink" title="3. none_of 检查范围中没有元素对谓词为true"></a>3. <code>none_of</code> 检查范围中没有元素对谓词为<code>true</code></h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">InputIt</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">UnaryPredicate</span> <span class="token operator">></span><span class="token keyword">constexpr</span> <span class="token keyword">bool</span> <span class="token function">none_of</span><span class="token punctuation">(</span> InputIt first<span class="token punctuation">,</span> InputIt last<span class="token punctuation">,</span> UnaryPredicate p <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">template</span><span class="token operator">&lt;</span> std<span class="token double-colon punctuation">::</span>input_iterator I<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>sentinel_for<span class="token operator">&lt;</span>I<span class="token operator">></span> S<span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">Proj</span> <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>identity<span class="token punctuation">,</span>          std<span class="token double-colon punctuation">::</span>indirect_unary_predicate<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>projected<span class="token operator">&lt;</span>I<span class="token punctuation">,</span> Proj<span class="token operator">>></span> Pred <span class="token operator">></span><span class="token keyword">constexpr</span> <span class="token keyword">bool</span> <span class="token function">none_of</span><span class="token punctuation">(</span> I first<span class="token punctuation">,</span> S last<span class="token punctuation">,</span> Pred pred<span class="token punctuation">,</span> Proj proj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-for-each-应用函数到范围中的元素"><a href="#4-for-each-应用函数到范围中的元素" class="headerlink" title="4. for_each 应用函数到范围中的元素"></a>4. <code>for_each</code> 应用函数到范围中的元素</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">InputIt</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">UnaryFunction</span> <span class="token operator">></span><span class="token keyword">constexpr</span> UnaryFunction <span class="token function">for_each</span><span class="token punctuation">(</span> InputIt first<span class="token punctuation">,</span> InputIt last<span class="token punctuation">,</span> UnaryFunction f <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="5-for-each-n-应用一个函数对象到序列的前-n-个元素"><a href="#5-for-each-n-应用一个函数对象到序列的前-n-个元素" class="headerlink" title="5. for_each_n 应用一个函数对象到序列的前 n 个元素"></a>5. <code>for_each_n</code> 应用一个函数对象到序列的前 n 个元素</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">InputIt</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">Size</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">UnaryFunction</span> <span class="token operator">></span><span class="token keyword">constexpr</span> InputIt <span class="token function">for_each_n</span><span class="token punctuation">(</span> InputIt first<span class="token punctuation">,</span> Size n<span class="token punctuation">,</span> UnaryFunction f <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="6-count-返回满足特定判别标准的元素数。"><a href="#6-count-返回满足特定判别标准的元素数。" class="headerlink" title="6. count 返回满足特定判别标准的元素数。"></a>6. <code>count</code> 返回满足特定判别标准的元素数。</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">InputIt</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">T</span> <span class="token operator">></span><span class="token keyword">constexpr</span> <span class="token keyword">typename</span> <span class="token class-name">iterator_traits</span><span class="token operator">&lt;</span>InputIt<span class="token operator">></span><span class="token double-colon punctuation">::</span>difference_type <span class="token function">count</span><span class="token punctuation">(</span> InputIt first<span class="token punctuation">,</span> InputIt last<span class="token punctuation">,</span> <span class="token keyword">const</span> T <span class="token operator">&amp;</span>value <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="7-count-if-返回满足特定判别标准的元素数。"><a href="#7-count-if-返回满足特定判别标准的元素数。" class="headerlink" title="7. count_if 返回满足特定判别标准的元素数。"></a>7. <code>count_if</code> 返回满足特定判别标准的元素数。</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">InputIt</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">UnaryPredicate</span> <span class="token operator">></span><span class="token keyword">constexpr</span> <span class="token keyword">typename</span> <span class="token class-name">iterator_traits</span><span class="token operator">&lt;</span>InputIt<span class="token operator">></span><span class="token double-colon punctuation">::</span>difference_type<span class="token function">count_if</span><span class="token punctuation">(</span> InputIt first<span class="token punctuation">,</span> InputIt last<span class="token punctuation">,</span> UnaryPredicate p <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">template</span><span class="token operator">&lt;</span> std<span class="token double-colon punctuation">::</span>input_iterator I<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>sentinel_for<span class="token operator">&lt;</span>I<span class="token operator">></span> S<span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">Proj</span> <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>identity<span class="token punctuation">,</span>          std<span class="token double-colon punctuation">::</span>indirect_unary_predicate<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>projected<span class="token operator">&lt;</span>I<span class="token punctuation">,</span> Proj<span class="token operator">>></span> Pred <span class="token operator">></span><span class="token keyword">constexpr</span> std<span class="token double-colon punctuation">::</span>iter_difference_t<span class="token operator">&lt;</span>I<span class="token operator">></span><span class="token function">count_if</span><span class="token punctuation">(</span> I first<span class="token punctuation">,</span> S last<span class="token punctuation">,</span> Pred pred <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> Proj proj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="8-mismatch-寻找两个范围出现不同的首个位置"><a href="#8-mismatch-寻找两个范围出现不同的首个位置" class="headerlink" title="8. mismatch 寻找两个范围出现不同的首个位置"></a>8. <code>mismatch</code> 寻找两个范围出现不同的首个位置</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">InputIt1</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">InputIt2</span> <span class="token operator">></span><span class="token keyword">constexpr</span> std<span class="token double-colon punctuation">::</span>pair<span class="token operator">&lt;</span>InputIt1<span class="token punctuation">,</span>InputIt2<span class="token operator">></span><span class="token function">mismatch</span><span class="token punctuation">(</span> InputIt1 first1<span class="token punctuation">,</span> InputIt1 last1<span class="token punctuation">,</span> InputIt2 first2 <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">InputIt1</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">InputIt2</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">BinaryPredicate</span> <span class="token operator">></span><span class="token keyword">constexpr</span> std<span class="token double-colon punctuation">::</span>pair<span class="token operator">&lt;</span>InputIt1<span class="token punctuation">,</span>InputIt2<span class="token operator">></span><span class="token function">mismatch</span><span class="token punctuation">(</span> InputIt1 first1<span class="token punctuation">,</span> InputIt1 last1<span class="token punctuation">,</span> InputIt2 first2<span class="token punctuation">,</span> BinaryPredicate p <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">InputIt1</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">InputIt2</span> <span class="token operator">></span><span class="token keyword">constexpr</span> std<span class="token double-colon punctuation">::</span>pair<span class="token operator">&lt;</span>InputIt1<span class="token punctuation">,</span>InputIt2<span class="token operator">></span><span class="token function">mismatch</span><span class="token punctuation">(</span> InputIt1 first1<span class="token punctuation">,</span> InputIt1 last1<span class="token punctuation">,</span> InputIt2 first2<span class="token punctuation">,</span> InputIt2 last2 <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">InputIt1</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">InputIt2</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">BinaryPredicate</span> <span class="token operator">></span><span class="token keyword">constexpr</span> std<span class="token double-colon punctuation">::</span>pair<span class="token operator">&lt;</span>InputIt1<span class="token punctuation">,</span>InputIt2<span class="token operator">></span><span class="token function">mismatch</span><span class="token punctuation">(</span> InputIt1 first1<span class="token punctuation">,</span> InputIt1 last1<span class="token punctuation">,</span> InputIt2 first2<span class="token punctuation">,</span> InputIt2 last2<span class="token punctuation">,</span> BinaryPredicate p <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="9-find-寻找首个满足特定判别标准的元素"><a href="#9-find-寻找首个满足特定判别标准的元素" class="headerlink" title="9. find 寻找首个满足特定判别标准的元素"></a>9. find 寻找首个满足特定判别标准的元素</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">InputIt</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">T</span> <span class="token operator">></span><span class="token keyword">constexpr</span> InputIt <span class="token function">find</span><span class="token punctuation">(</span> InputIt first<span class="token punctuation">,</span> InputIt last<span class="token punctuation">,</span> <span class="token keyword">const</span> T<span class="token operator">&amp;</span> value <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">template</span><span class="token operator">&lt;</span> std<span class="token double-colon punctuation">::</span>input_iterator I<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>sentinel_for<span class="token operator">&lt;</span>I<span class="token operator">></span> S<span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">Proj</span> <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>identity <span class="token operator">></span><span class="token keyword">requires</span> std<span class="token double-colon punctuation">::</span>indirect_binary_predicate<span class="token operator">&lt;</span>ranges<span class="token double-colon punctuation">::</span>equal_to<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>projected<span class="token operator">&lt;</span>I<span class="token punctuation">,</span> Proj<span class="token operator">></span><span class="token punctuation">,</span> <span class="token keyword">const</span> T<span class="token operator">*</span><span class="token operator">></span><span class="token keyword">constexpr</span> I <span class="token function">find</span><span class="token punctuation">(</span> I first<span class="token punctuation">,</span> S last<span class="token punctuation">,</span> <span class="token keyword">const</span> T<span class="token operator">&amp;</span> value<span class="token punctuation">,</span> Proj proj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="10-find-if-寻找首个满足特定判别标准的元素"><a href="#10-find-if-寻找首个满足特定判别标准的元素" class="headerlink" title="10. find_if 寻找首个满足特定判别标准的元素"></a>10. find_if 寻找首个满足特定判别标准的元素</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">InputIt</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">UnaryPredicate</span> <span class="token operator">></span><span class="token keyword">constexpr</span> InputIt <span class="token function">find_if</span><span class="token punctuation">(</span> InputIt first<span class="token punctuation">,</span> InputIt last<span class="token punctuation">,</span> UnaryPredicate p <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="11-find-if-not-寻找首个不满足特定判别标准的元素"><a href="#11-find-if-not-寻找首个不满足特定判别标准的元素" class="headerlink" title="11. find_if_not 寻找首个不满足特定判别标准的元素"></a>11. find_if_not 寻找首个不满足特定判别标准的元素</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">InputIt</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">UnaryPredicate</span> <span class="token operator">></span><span class="token keyword">constexpr</span> InputIt <span class="token function">find_if_not</span><span class="token punctuation">(</span> InputIt first<span class="token punctuation">,</span> InputIt last<span class="token punctuation">,</span> UnaryPredicate q <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="12-find-end-在特定范围中寻找最后出现的元素序列"><a href="#12-find-end-在特定范围中寻找最后出现的元素序列" class="headerlink" title="12. find_end 在特定范围中寻找最后出现的元素序列"></a>12. find_end 在特定范围中寻找最后出现的元素序列</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">ForwardIt1</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">ForwardIt2</span> <span class="token operator">></span><span class="token keyword">constexpr</span> ForwardIt1 <span class="token function">find_end</span><span class="token punctuation">(</span> ForwardIt1 first<span class="token punctuation">,</span> ForwardIt1 last<span class="token punctuation">,</span>                               ForwardIt2 s_first<span class="token punctuation">,</span> ForwardIt2 s_last <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">ForwardIt1</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">ForwardIt2</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">BinaryPredicate</span> <span class="token operator">></span><span class="token keyword">constexpr</span> ForwardIt1 <span class="token function">find_end</span><span class="token punctuation">(</span> ForwardIt1 first<span class="token punctuation">,</span> ForwardIt1 last<span class="token punctuation">,</span>                               ForwardIt2 s_first<span class="token punctuation">,</span> ForwardIt2 s_last<span class="token punctuation">,</span> BinaryPredicate p <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="13-find-first-of-搜索元素集合中的任意元素"><a href="#13-find-first-of-搜索元素集合中的任意元素" class="headerlink" title="13. find_first_of 搜索元素集合中的任意元素"></a>13. find_first_of 搜索元素集合中的任意元素</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">InputIt</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">ForwardIt</span> <span class="token operator">></span><span class="token keyword">constexpr</span> InputIt <span class="token function">find_first_of</span><span class="token punctuation">(</span> InputIt first<span class="token punctuation">,</span> InputIt last<span class="token punctuation">,</span>                                 ForwardIt s_first<span class="token punctuation">,</span> ForwardIt s_last <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">InputIt</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">ForwardIt</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">BinaryPredicate</span> <span class="token operator">></span><span class="token keyword">constexpr</span> InputIt <span class="token function">find_first_of</span><span class="token punctuation">(</span> InputIt first<span class="token punctuation">,</span> InputIt last<span class="token punctuation">,</span>                                 ForwardIt s_first<span class="token punctuation">,</span> ForwardIt s_last<span class="token punctuation">,</span> BinaryPredicate p <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="14-adjacent-find-查找首对相邻的相同（或满足给定谓词的）元素"><a href="#14-adjacent-find-查找首对相邻的相同（或满足给定谓词的）元素" class="headerlink" title="14. adjacent_find 查找首对相邻的相同（或满足给定谓词的）元素"></a>14. adjacent_find 查找首对相邻的相同（或满足给定谓词的）元素</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">ForwardIt</span> <span class="token operator">></span><span class="token keyword">constexpr</span> ForwardIt <span class="token function">adjacent_find</span><span class="token punctuation">(</span> ForwardIt first<span class="token punctuation">,</span> ForwardIt last <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">ForwardIt</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">BinaryPredicate</span><span class="token operator">></span><span class="token keyword">constexpr</span> ForwardIt <span class="token function">adjacent_find</span><span class="token punctuation">(</span> ForwardIt first<span class="token punctuation">,</span> ForwardIt last<span class="token punctuation">,</span> BinaryPredicate p <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="15-search-搜索一个元素范围中子序列出现的位置"><a href="#15-search-搜索一个元素范围中子序列出现的位置" class="headerlink" title="15. search 搜索一个元素范围中子序列出现的位置"></a>15. search 搜索一个元素范围中子序列出现的位置</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">ForwardIt1</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">ForwardIt2</span> <span class="token operator">></span><span class="token keyword">constexpr</span> ForwardIt1 <span class="token function">search</span><span class="token punctuation">(</span> ForwardIt1 first<span class="token punctuation">,</span> ForwardIt1 last<span class="token punctuation">,</span>                             ForwardIt2 s_first<span class="token punctuation">,</span> ForwardIt2 s_last <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">ForwardIt1</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">ForwardIt2</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">BinaryPredicate</span> <span class="token operator">></span><span class="token keyword">constexpr</span> ForwardIt1 <span class="token function">search</span><span class="token punctuation">(</span> ForwardIt1 first<span class="token punctuation">,</span> ForwardIt1 last<span class="token punctuation">,</span>                             ForwardIt2 s_first<span class="token punctuation">,</span> ForwardIt2 s_last<span class="token punctuation">,</span> BinaryPredicate p <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 无 execution_policy 版本</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">ForwardIt</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">Searcher</span><span class="token operator">></span><span class="token keyword">constexpr</span> ForwardIt <span class="token function">search</span><span class="token punctuation">(</span> ForwardIt first<span class="token punctuation">,</span> ForwardIt last<span class="token punctuation">,</span> <span class="token keyword">const</span> Searcher<span class="token operator">&amp;</span> searcher <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>标准库提供下列搜索器：</th><th></th></tr></thead><tbody><tr><td>default_searcher</td><td>标准 C++ 库搜索算法实现(类模板)</td></tr><tr><td>boyer_moore_searcher</td><td>Boyer-Moore 搜索算法实现 (类模板)</td></tr><tr><td>boyer_moore_horspool_searcher</td><td>Boyer-Moore-Horspool 搜索算法实现 (类模板)</td></tr></tbody></table><h4 id="16-search-n-在范围中搜索一定量的某个元素的连续副本"><a href="#16-search-n-在范围中搜索一定量的某个元素的连续副本" class="headerlink" title="16. search_n 在范围中搜索一定量的某个元素的连续副本"></a>16. search_n 在范围中搜索一定量的某个元素的连续副本</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">ForwardIt</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">Size</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">T</span> <span class="token operator">></span><span class="token keyword">constexpr</span> ForwardIt <span class="token function">search_n</span><span class="token punctuation">(</span> ForwardIt first<span class="token punctuation">,</span> ForwardIt last<span class="token punctuation">,</span> Size count<span class="token punctuation">,</span> <span class="token keyword">const</span> T<span class="token operator">&amp;</span> value <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">ForwardIt</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">Size</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">BinaryPredicate</span> <span class="token operator">></span><span class="token keyword">constexpr</span> ForwardIt <span class="token function">search_n</span><span class="token punctuation">(</span> ForwardIt first<span class="token punctuation">,</span> ForwardIt last<span class="token punctuation">,</span> Size count<span class="token punctuation">,</span> <span class="token keyword">const</span> T<span class="token operator">&amp;</span> value<span class="token punctuation">,</span>                               BinaryPredicate p <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="修改序列的操作"><a href="#修改序列的操作" class="headerlink" title="修改序列的操作"></a>修改序列的操作</h3><h4 id="17-copy-将某一范围的元素复制到一个新的位置"><a href="#17-copy-将某一范围的元素复制到一个新的位置" class="headerlink" title="17. copy 将某一范围的元素复制到一个新的位置"></a>17. copy 将某一范围的元素复制到一个新的位置</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">InputIt</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">OutputIt</span> <span class="token operator">></span><span class="token keyword">constexpr</span> OutputIt <span class="token function">copy</span><span class="token punctuation">(</span> InputIt first<span class="token punctuation">,</span> InputIt last<span class="token punctuation">,</span> OutputIt d_first <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="18-copy-if-将某一范围的元素复制到一个新的位置"><a href="#18-copy-if-将某一范围的元素复制到一个新的位置" class="headerlink" title="18. copy_if 将某一范围的元素复制到一个新的位置"></a>18. copy_if 将某一范围的元素复制到一个新的位置</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">InputIt</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">OutputIt</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">UnaryPredicate</span> <span class="token operator">></span><span class="token keyword">constexpr</span> OutputIt <span class="token function">copy_if</span><span class="token punctuation">(</span> InputIt first<span class="token punctuation">,</span> InputIt last<span class="token punctuation">,</span> OutputIt d_first<span class="token punctuation">,</span> UnaryPredicate pred <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="19-copy-n-将一定数目的元素复制到一个新的位置"><a href="#19-copy-n-将一定数目的元素复制到一个新的位置" class="headerlink" title="19. copy_n 将一定数目的元素复制到一个新的位置"></a>19. copy_n 将一定数目的元素复制到一个新的位置</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">InputIt</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">Size</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">OutputIt</span> <span class="token operator">></span><span class="token keyword">constexpr</span> OutputIt <span class="token function">copy_n</span><span class="token punctuation">(</span> InputIt first<span class="token punctuation">,</span> Size count<span class="token punctuation">,</span> OutputIt result <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="20-copy-backward-按从后往前的顺序复制一个范围内的元素"><a href="#20-copy-backward-按从后往前的顺序复制一个范围内的元素" class="headerlink" title="20. copy_backward 按从后往前的顺序复制一个范围内的元素"></a>20. copy_backward 按从后往前的顺序复制一个范围内的元素</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">BidirIt1</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">BidirIt2</span> <span class="token operator">></span><span class="token keyword">constexpr</span> BidirIt2 <span class="token function">copy_backward</span><span class="token punctuation">(</span> BidirIt1 first<span class="token punctuation">,</span> BidirIt1 last<span class="token punctuation">,</span> BidirIt2 d_last <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="21-move-将某一范围的元素移动到一个新的位置"><a href="#21-move-将某一范围的元素移动到一个新的位置" class="headerlink" title="21. move 将某一范围的元素移动到一个新的位置"></a>21. move 将某一范围的元素移动到一个新的位置</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">InputIt</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">OutputIt</span> <span class="token operator">></span><span class="token keyword">constexpr</span> OutputIt <span class="token function">move</span><span class="token punctuation">(</span> InputIt first<span class="token punctuation">,</span> InputIt last<span class="token punctuation">,</span> OutputIt d_first <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="22-move-backward-按从后往前的顺序移动某一范围的元素到新的位置"><a href="#22-move-backward-按从后往前的顺序移动某一范围的元素到新的位置" class="headerlink" title="22. move_backward 按从后往前的顺序移动某一范围的元素到新的位置"></a>22. move_backward 按从后往前的顺序移动某一范围的元素到新的位置</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">BidirIt1</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">BidirIt2</span> <span class="token operator">></span><span class="token keyword">constexpr</span> BidirIt2 <span class="token function">move_backward</span><span class="token punctuation">(</span> BidirIt1 first<span class="token punctuation">,</span> BidirIt1 last<span class="token punctuation">,</span> BidirIt2 d_last <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="23-fill-将一个给定值复制赋值给一个范围内的每个元素"><a href="#23-fill-将一个给定值复制赋值给一个范围内的每个元素" class="headerlink" title="23. fill 将一个给定值复制赋值给一个范围内的每个元素"></a>23. fill 将一个给定值复制赋值给一个范围内的每个元素</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">ForwardIt</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">T</span> <span class="token operator">></span><span class="token keyword">constexpr</span> <span class="token keyword">void</span> <span class="token function">fill</span><span class="token punctuation">(</span> ForwardIt first<span class="token punctuation">,</span> ForwardIt last<span class="token punctuation">,</span> <span class="token keyword">const</span> T<span class="token operator">&amp;</span> value <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="24-fill-n-将一个给定值复制赋值给一个范围内的-N-个元素"><a href="#24-fill-n-将一个给定值复制赋值给一个范围内的-N-个元素" class="headerlink" title="24. fill_n 将一个给定值复制赋值给一个范围内的 N 个元素"></a>24. fill_n 将一个给定值复制赋值给一个范围内的 N 个元素</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">OutputIt</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">Size</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">T</span> <span class="token operator">></span><span class="token keyword">constexpr</span> OutputIt <span class="token function">fill_n</span><span class="token punctuation">(</span> OutputIt first<span class="token punctuation">,</span> Size count<span class="token punctuation">,</span> <span class="token keyword">const</span> T<span class="token operator">&amp;</span> value <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="25-transform-将一个函数应用于某一范围的各个元素，并在目标范围存储结果"><a href="#25-transform-将一个函数应用于某一范围的各个元素，并在目标范围存储结果" class="headerlink" title="25. transform 将一个函数应用于某一范围的各个元素，并在目标范围存储结果"></a>25. transform 将一个函数应用于某一范围的各个元素，并在目标范围存储结果</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">InputIt</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">OutputIt</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">UnaryOperation</span> <span class="token operator">></span><span class="token keyword">constexpr</span> OutputIt <span class="token function">transform</span><span class="token punctuation">(</span> InputIt first1<span class="token punctuation">,</span> InputIt last1<span class="token punctuation">,</span> OutputIt d_first<span class="token punctuation">,</span>                              UnaryOperation unary_op <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">InputIt1</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">InputIt2</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">OutputIt</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">BinaryOperation</span> <span class="token operator">></span><span class="token keyword">constexpr</span> OutputIt <span class="token function">transform</span><span class="token punctuation">(</span> InputIt1 first1<span class="token punctuation">,</span> InputIt1 last1<span class="token punctuation">,</span> InputIt2 first2<span class="token punctuation">,</span>                              OutputIt d_first<span class="token punctuation">,</span> BinaryOperation binary_op <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="26-generate"><a href="#26-generate" class="headerlink" title="26. generate"></a>26. generate</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">ForwardIt</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">Generator</span> <span class="token operator">></span><span class="token keyword">constexpr</span> <span class="token keyword">void</span> <span class="token function">generate</span><span class="token punctuation">(</span> ForwardIt first<span class="token punctuation">,</span> ForwardIt last<span class="token punctuation">,</span> Generator g <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// g - 将要调用的生成器函数。签名应等价于 ret func(); ret的类型必须和容器累心一致。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="27-generate-n-将相继的函数调用结果赋值给一个范围中的-N-个元素"><a href="#27-generate-n-将相继的函数调用结果赋值给一个范围中的-N-个元素" class="headerlink" title="27. generate_n 将相继的函数调用结果赋值给一个范围中的 N 个元素"></a>27. generate_n 将相继的函数调用结果赋值给一个范围中的 N 个元素</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">OutputIt</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">Size</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">Generator</span> <span class="token operator">></span><span class="token keyword">constexpr</span> OutputIt <span class="token function">generate_n</span><span class="token punctuation">(</span> OutputIt first<span class="token punctuation">,</span> Size count<span class="token punctuation">,</span> Generator g <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="28-remove-移除（以移动赋值的方式）满足特定判别标准的元素"><a href="#28-remove-移除（以移动赋值的方式）满足特定判别标准的元素" class="headerlink" title="28. remove 移除（以移动赋值的方式）满足特定判别标准的元素"></a>28. remove 移除（以移动赋值的方式）满足特定判别标准的元素</h4><p>调用 remove 典型地后随调用容器的 erase 方法</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">ForwardIt</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">T</span> <span class="token operator">></span><span class="token keyword">constexpr</span> ForwardIt <span class="token function">remove</span><span class="token punctuation">(</span> ForwardIt first<span class="token punctuation">,</span> ForwardIt last<span class="token punctuation">,</span> <span class="token keyword">const</span> T<span class="token operator">&amp;</span> value <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">ForwardIt</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">UnaryPredicate</span> <span class="token operator">></span><span class="token keyword">constexpr</span> ForwardIt <span class="token function">remove_if</span><span class="token punctuation">(</span> ForwardIt first<span class="token punctuation">,</span> ForwardIt last<span class="token punctuation">,</span> UnaryPredicate p <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="29-remove-copy-复制一个范围的元素，忽略满足特定判别标准的元素"><a href="#29-remove-copy-复制一个范围的元素，忽略满足特定判别标准的元素" class="headerlink" title="29. remove_copy 复制一个范围的元素，忽略满足特定判别标准的元素"></a>29. remove_copy 复制一个范围的元素，忽略满足特定判别标准的元素</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">InputIt</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">OutputIt</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">T</span> <span class="token operator">></span><span class="token keyword">constexpr</span> OutputIt <span class="token function">remove_copy</span><span class="token punctuation">(</span> InputIt first<span class="token punctuation">,</span> InputIt last<span class="token punctuation">,</span> OutputIt d_first<span class="token punctuation">,</span> <span class="token keyword">const</span> T<span class="token operator">&amp;</span> value <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="30-remove-copy-if-复制一个范围的元素，忽略满足特定判别标准的元素"><a href="#30-remove-copy-if-复制一个范围的元素，忽略满足特定判别标准的元素" class="headerlink" title="30. remove_copy_if 复制一个范围的元素，忽略满足特定判别标准的元素"></a>30. remove_copy_if 复制一个范围的元素，忽略满足特定判别标准的元素</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">InputIt</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">OutputIt</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">UnaryPredicate</span> <span class="token operator">></span><span class="token keyword">constexpr</span> OutputIt <span class="token function">remove_copy_if</span><span class="token punctuation">(</span> InputIt first<span class="token punctuation">,</span> InputIt last<span class="token punctuation">,</span> OutputIt d_first<span class="token punctuation">,</span>                                   UnaryPredicate p <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="31-replace-将所有满足特定判别标准的值替换为另一个值"><a href="#31-replace-将所有满足特定判别标准的值替换为另一个值" class="headerlink" title="31. replace 将所有满足特定判别标准的值替换为另一个值"></a>31. replace 将所有满足特定判别标准的值替换为另一个值</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">ForwardIt</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">T</span> <span class="token operator">></span><span class="token keyword">constexpr</span> <span class="token keyword">void</span> <span class="token function">replace</span><span class="token punctuation">(</span> ForwardIt first<span class="token punctuation">,</span> ForwardIt last<span class="token punctuation">,</span>                        <span class="token keyword">const</span> T<span class="token operator">&amp;</span> old_value<span class="token punctuation">,</span> <span class="token keyword">const</span> T<span class="token operator">&amp;</span> new_value <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="32-replace-if-将所有满足特定判别标准的值替换为另一个值"><a href="#32-replace-if-将所有满足特定判别标准的值替换为另一个值" class="headerlink" title="32. replace_if 将所有满足特定判别标准的值替换为另一个值"></a>32. replace_if 将所有满足特定判别标准的值替换为另一个值</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">ForwardIt</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">UnaryPredicate</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">T</span> <span class="token operator">></span><span class="token keyword">constexpr</span> <span class="token keyword">void</span> <span class="token function">replace_if</span><span class="token punctuation">(</span> ForwardIt first<span class="token punctuation">,</span> ForwardIt last<span class="token punctuation">,</span>                           UnaryPredicate p<span class="token punctuation">,</span> <span class="token keyword">const</span> T<span class="token operator">&amp;</span> new_value <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="33-replace-copy-复制一个范围内的元素，并将满足特定判别标准的元素替换为另一个值"><a href="#33-replace-copy-复制一个范围内的元素，并将满足特定判别标准的元素替换为另一个值" class="headerlink" title="33.  replace_copy 复制一个范围内的元素，并将满足特定判别标准的元素替换为另一个值"></a>33.  replace_copy 复制一个范围内的元素，并将满足特定判别标准的元素替换为另一个值</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">InputIt</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">OutputIt</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">T</span> <span class="token operator">></span><span class="token keyword">constexpr</span> OutputIt <span class="token function">replace_copy</span><span class="token punctuation">(</span> InputIt first<span class="token punctuation">,</span> InputIt last<span class="token punctuation">,</span> OutputIt d_first<span class="token punctuation">,</span>                                 <span class="token keyword">const</span> T<span class="token operator">&amp;</span> old_value<span class="token punctuation">,</span> <span class="token keyword">const</span> T<span class="token operator">&amp;</span> new_value <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="33-replace-copy-if-复制一个范围内的元素，并将满足特定判别标准的元素替换为另一个值"><a href="#33-replace-copy-if-复制一个范围内的元素，并将满足特定判别标准的元素替换为另一个值" class="headerlink" title="33.  replace_copy_if 复制一个范围内的元素，并将满足特定判别标准的元素替换为另一个值"></a>33.  replace_copy_if 复制一个范围内的元素，并将满足特定判别标准的元素替换为另一个值</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">InputIt</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">OutputIt</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">UnaryPredicate</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">T</span> <span class="token operator">></span><span class="token keyword">constexpr</span> OutputIt <span class="token function">replace_copy_if</span><span class="token punctuation">(</span> InputIt first<span class="token punctuation">,</span> InputIt last<span class="token punctuation">,</span> OutputIt d_first<span class="token punctuation">,</span>                                    UnaryPredicate p<span class="token punctuation">,</span> <span class="token keyword">const</span> T<span class="token operator">&amp;</span> new_value <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="34-swap-交换两个对象的值"><a href="#34-swap-交换两个对象的值" class="headerlink" title="34. swap 交换两个对象的值"></a>34. swap 交换两个对象的值</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">T</span> <span class="token operator">></span><span class="token keyword">constexpr</span> <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span> T<span class="token operator">&amp;</span> a<span class="token punctuation">,</span> T<span class="token operator">&amp;</span> b <span class="token punctuation">)</span> <span class="token keyword">noexcept</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>is_nothrow_swappable_v<span class="token operator">&lt;</span>T2<span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">T2</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>size_t N <span class="token operator">></span><span class="token keyword">constexpr</span> <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span> <span class="token function">T2</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token function">T2</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">noexcept</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>is_nothrow_swappable_v<span class="token operator">&lt;</span>T2<span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="35-swap-rangse-交换两个范围的元素"><a href="#35-swap-rangse-交换两个范围的元素" class="headerlink" title="35. swap_rangse 交换两个范围的元素"></a>35. swap_rangse 交换两个范围的元素</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">ForwardIt1</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">ForwardIt2</span> <span class="token operator">></span><span class="token keyword">constexpr</span> ForwardIt2 <span class="token function">swap_ranges</span><span class="token punctuation">(</span> ForwardIt1 first1<span class="token punctuation">,</span> ForwardIt1 last1<span class="token punctuation">,</span>                                  ForwardIt2 first2 <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="36-iter-swap-交换两个迭代器所指向的元素"><a href="#36-iter-swap-交换两个迭代器所指向的元素" class="headerlink" title="36. iter_swap 交换两个迭代器所指向的元素"></a>36. iter_swap 交换两个迭代器所指向的元素</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">ForwardIt1</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">ForwardIt2</span> <span class="token operator">></span><span class="token keyword">constexpr</span> <span class="token keyword">void</span> <span class="token function">iter_swap</span><span class="token punctuation">(</span> ForwardIt1 a<span class="token punctuation">,</span> ForwardIt2 b <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="37-reverse-逆转范围中的元素顺序"><a href="#37-reverse-逆转范围中的元素顺序" class="headerlink" title="37. reverse 逆转范围中的元素顺序"></a>37. reverse 逆转范围中的元素顺序</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">BidirIt</span> <span class="token operator">></span><span class="token keyword">constexpr</span> <span class="token keyword">void</span> <span class="token function">reverse</span><span class="token punctuation">(</span> BidirIt first<span class="token punctuation">,</span> BidirIt last <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="38-reverse-copy-创建一个范围的逆向副本"><a href="#38-reverse-copy-创建一个范围的逆向副本" class="headerlink" title="38. reverse_copy 创建一个范围的逆向副本"></a>38. reverse_copy 创建一个范围的逆向副本</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">BidirIt</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">OutputIt</span> <span class="token operator">></span><span class="token keyword">constexpr</span> OutputIt <span class="token function">reverse_copy</span><span class="token punctuation">(</span> BidirIt first<span class="token punctuation">,</span> BidirIt last<span class="token punctuation">,</span> OutputIt d_first <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="39-rotate-左旋转范围中的元素顺序-可以使用反向迭代器实现右旋转"><a href="#39-rotate-左旋转范围中的元素顺序-可以使用反向迭代器实现右旋转" class="headerlink" title="39. rotate 左旋转范围中的元素顺序(可以使用反向迭代器实现右旋转)"></a>39. rotate 左旋转范围中的元素顺序(可以使用反向迭代器实现右旋转)</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">ForwardIt</span> <span class="token operator">></span><span class="token keyword">constexpr</span> ForwardIt <span class="token function">rotate</span><span class="token punctuation">(</span> ForwardIt first<span class="token punctuation">,</span> ForwardIt n_first<span class="token punctuation">,</span> ForwardIt last <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="40-rotate-copy-复制并旋转元素范围"><a href="#40-rotate-copy-复制并旋转元素范围" class="headerlink" title="40. rotate_copy 复制并旋转元素范围"></a>40. rotate_copy 复制并旋转元素范围</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">ForwardIt</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">OutputIt</span> <span class="token operator">></span><span class="token keyword">constexpr</span> OutputIt <span class="token function">rotate_copy</span><span class="token punctuation">(</span> ForwardIt first<span class="token punctuation">,</span> ForwardIt n_first<span class="token punctuation">,</span>                                ForwardIt last<span class="token punctuation">,</span> OutputIt d_first <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="41-shift-left-左移范围中的元素"><a href="#41-shift-left-左移范围中的元素" class="headerlink" title="41. shift_left 左移范围中的元素"></a>41. shift_left 左移范围中的元素</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">ForwardIt</span> <span class="token operator">></span><span class="token keyword">constexpr</span> ForwardIt <span class="token function">shift_left</span><span class="token punctuation">(</span> ForwardIt first<span class="token punctuation">,</span> ForwardIt last<span class="token punctuation">,</span>                                <span class="token keyword">typename</span> <span class="token class-name">std</span><span class="token double-colon punctuation">::</span>iterator_traits<span class="token operator">&lt;</span>ForwardIt<span class="token operator">></span><span class="token double-colon punctuation">::</span>difference_type n <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="42-shift-right-右移范围中的元素"><a href="#42-shift-right-右移范围中的元素" class="headerlink" title="42. shift_right 右移范围中的元素"></a>42. shift_right 右移范围中的元素</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">ForwardIt</span> <span class="token operator">></span><span class="token keyword">constexpr</span> ForwardIt <span class="token function">shift_right</span><span class="token punctuation">(</span> ForwardIt first<span class="token punctuation">,</span> ForwardIt last<span class="token punctuation">,</span>                                 <span class="token keyword">typename</span> <span class="token class-name">std</span><span class="token double-colon punctuation">::</span>iterator_traits<span class="token operator">&lt;</span>ForwardIt<span class="token operator">></span><span class="token double-colon punctuation">::</span>difference_type n <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="43-shuffle-随机重排范围中的元素"><a href="#43-shuffle-随机重排范围中的元素" class="headerlink" title="43 shuffle 随机重排范围中的元素"></a>43 shuffle 随机重排范围中的元素</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">RandomIt</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">URBG</span> <span class="token operator">></span><span class="token keyword">void</span> <span class="token function">shuffle</span><span class="token punctuation">(</span> RandomIt first<span class="token punctuation">,</span> RandomIt last<span class="token punctuation">,</span> URBG<span class="token operator">&amp;&amp;</span> g <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// g - 随机数生成器</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="44-sample-从一个序列中随机选择-n-个元素"><a href="#44-sample-从一个序列中随机选择-n-个元素" class="headerlink" title="44 sample 从一个序列中随机选择 n 个元素"></a>44 sample 从一个序列中随机选择 n 个元素</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">PopulationIterator</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">SampleIterator</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">Distance</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">URBG</span> <span class="token operator">></span>SampleIterator <span class="token function">sample</span><span class="token punctuation">(</span> PopulationIterator first<span class="token punctuation">,</span> PopulationIterator last<span class="token punctuation">,</span>                       SampleIterator out<span class="token punctuation">,</span> Distance n<span class="token punctuation">,</span> URBG<span class="token operator">&amp;&amp;</span> g<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="45-unique-移除范围内的连续重复元素"><a href="#45-unique-移除范围内的连续重复元素" class="headerlink" title="45 unique 移除范围内的连续重复元素"></a>45 unique 移除范围内的连续重复元素</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">ForwardIt</span> <span class="token operator">></span><span class="token keyword">constexpr</span> ForwardIt <span class="token function">unique</span><span class="token punctuation">(</span> ForwardIt first<span class="token punctuation">,</span> ForwardIt last <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">ForwardIt</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">BinaryPredicate</span> <span class="token operator">></span><span class="token keyword">constexpr</span> ForwardIt <span class="token function">unique</span><span class="token punctuation">(</span> ForwardIt first<span class="token punctuation">,</span> ForwardIt last<span class="token punctuation">,</span> BinaryPredicate p <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="46-unique-copy-创建某范围的不含连续重复元素的副本"><a href="#46-unique-copy-创建某范围的不含连续重复元素的副本" class="headerlink" title="46 unique_copy 创建某范围的不含连续重复元素的副本"></a>46 unique_copy 创建某范围的不含连续重复元素的副本</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">InputIt</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">OutputIt</span> <span class="token operator">></span><span class="token keyword">constexpr</span> OutputIt <span class="token function">unique_copy</span><span class="token punctuation">(</span> InputIt first<span class="token punctuation">,</span> InputIt last<span class="token punctuation">,</span> OutputIt d_first <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">InputIt</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">OutputIt</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">BinaryPredicate</span> <span class="token operator">></span><span class="token keyword">constexpr</span> OutputIt <span class="token function">unique_copy</span><span class="token punctuation">(</span> InputIt first<span class="token punctuation">,</span> InputIt last<span class="token punctuation">,</span>                                OutputIt d_first<span class="token punctuation">,</span> BinaryPredicate p <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="划分操作"><a href="#划分操作" class="headerlink" title="划分操作"></a>划分操作</h3><h4 id="47-is-partitioned-判断范围是否已按给定的谓词划分"><a href="#47-is-partitioned-判断范围是否已按给定的谓词划分" class="headerlink" title="47. is_partitioned 判断范围是否已按给定的谓词划分"></a>47. is_partitioned 判断范围是否已按给定的谓词划分</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">InputIt</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">UnaryPredicate</span> <span class="token operator">></span><span class="token keyword">constexpr</span> <span class="token keyword">bool</span> <span class="token function">is_partitioned</span><span class="token punctuation">(</span> InputIt first<span class="token punctuation">,</span> InputIt last<span class="token punctuation">,</span> UnaryPredicate p <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="48-partition-将范围中的元素分为两组"><a href="#48-partition-将范围中的元素分为两组" class="headerlink" title="48. partition 将范围中的元素分为两组"></a>48. partition 将范围中的元素分为两组</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">ForwardIt</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">UnaryPredicate</span> <span class="token operator">></span><span class="token keyword">constexpr</span> ForwardIt <span class="token function">partition</span><span class="token punctuation">(</span> ForwardIt first<span class="token punctuation">,</span> ForwardIt last<span class="token punctuation">,</span> UnaryPredicate p <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="49-partition-copy-复制一个范围，将各元素分为两组"><a href="#49-partition-copy-复制一个范围，将各元素分为两组" class="headerlink" title="49.  partition_copy 复制一个范围，将各元素分为两组"></a>49.  partition_copy 复制一个范围，将各元素分为两组</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">InputIt</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">OutputIt1</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">OutputIt2</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">UnaryPredicate</span> <span class="token operator">></span><span class="token keyword">constexpr</span> std<span class="token double-colon punctuation">::</span>pair<span class="token operator">&lt;</span>OutputIt1<span class="token punctuation">,</span> OutputIt2<span class="token operator">></span><span class="token function">partition_copy</span><span class="token punctuation">(</span> InputIt first<span class="token punctuation">,</span> InputIt last<span class="token punctuation">,</span> OutputIt1 d_first_true<span class="token punctuation">,</span> OutputIt2 d_first_false<span class="token punctuation">,</span>                UnaryPredicate p <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="50-stable-partition-将元素分为两组，同时保留其相对顺序"><a href="#50-stable-partition-将元素分为两组，同时保留其相对顺序" class="headerlink" title="50. stable_partition 将元素分为两组，同时保留其相对顺序"></a>50. stable_partition 将元素分为两组，同时保留其相对顺序</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">BidirIt</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">UnaryPredicate</span> <span class="token operator">></span>BidirIt <span class="token function">stable_partition</span><span class="token punctuation">(</span> BidirIt first<span class="token punctuation">,</span> BidirIt last<span class="token punctuation">,</span> UnaryPredicate p <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="51-partition-point-定位已划分范围的划分点"><a href="#51-partition-point-定位已划分范围的划分点" class="headerlink" title="51. partition_point 定位已划分范围的划分点"></a>51. partition_point 定位已划分范围的划分点</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">ForwardIt</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">UnaryPredicate</span> <span class="token operator">></span><span class="token keyword">constexpr</span> ForwardIt <span class="token function">partition_point</span><span class="token punctuation">(</span> ForwardIt first<span class="token punctuation">,</span> ForwardIt last<span class="token punctuation">,</span> UnaryPredicate p <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="排序操作"><a href="#排序操作" class="headerlink" title="排序操作"></a>排序操作</h3><h4 id="52-is-sorted-检查范围是否已按升序排列"><a href="#52-is-sorted-检查范围是否已按升序排列" class="headerlink" title="52. is_sorted 检查范围是否已按升序排列"></a>52. is_sorted 检查范围是否已按升序排列</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">ForwardIt</span> <span class="token operator">></span><span class="token keyword">constexpr</span> <span class="token keyword">bool</span> <span class="token function">is_sorted</span><span class="token punctuation">(</span> ForwardIt first<span class="token punctuation">,</span> ForwardIt last <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">ForwardIt</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">Compare</span> <span class="token operator">></span><span class="token keyword">constexpr</span> <span class="token keyword">bool</span> <span class="token function">is_sorted</span><span class="token punctuation">(</span> ForwardIt first<span class="token punctuation">,</span> ForwardIt last<span class="token punctuation">,</span> Compare comp <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="53-is-sorted-until-找出最大的已排序子范围"><a href="#53-is-sorted-until-找出最大的已排序子范围" class="headerlink" title="53. is_sorted_until 找出最大的已排序子范围"></a>53. is_sorted_until 找出最大的已排序子范围</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">ForwardIt</span> <span class="token operator">></span><span class="token keyword">constexpr</span> ForwardIt <span class="token function">is_sorted_until</span><span class="token punctuation">(</span> ForwardIt first<span class="token punctuation">,</span> ForwardIt last <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">ForwardIt</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">Compare</span> <span class="token operator">></span><span class="token keyword">constexpr</span> ForwardIt <span class="token function">is_sorted_until</span><span class="token punctuation">(</span> ForwardIt first<span class="token punctuation">,</span> ForwardIt last<span class="token punctuation">,</span> Compare comp <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="54-sort-将范围按升序排序"><a href="#54-sort-将范围按升序排序" class="headerlink" title="54. sort 将范围按升序排序"></a>54. sort 将范围按升序排序</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">RandomIt</span> <span class="token operator">></span><span class="token keyword">constexpr</span> <span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span> RandomIt first<span class="token punctuation">,</span> RandomIt last <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">RandomIt</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">Compare</span> <span class="token operator">></span><span class="token keyword">constexpr</span> <span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span> RandomIt first<span class="token punctuation">,</span> RandomIt last<span class="token punctuation">,</span> Compare comp <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="55-partial-sort-排序一个范围的前-N-个元素"><a href="#55-partial-sort-排序一个范围的前-N-个元素" class="headerlink" title="55. partial_sort 排序一个范围的前 N 个元素"></a>55. partial_sort 排序一个范围的前 N 个元素</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">RandomIt</span> <span class="token operator">></span><span class="token keyword">constexpr</span> <span class="token keyword">void</span> <span class="token function">partial_sort</span><span class="token punctuation">(</span> RandomIt first<span class="token punctuation">,</span> RandomIt middle<span class="token punctuation">,</span> RandomIt last <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">RandomIt</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">Compare</span> <span class="token operator">></span><span class="token keyword">constexpr</span> <span class="token keyword">void</span> <span class="token function">partial_sort</span><span class="token punctuation">(</span> RandomIt first<span class="token punctuation">,</span> RandomIt middle<span class="token punctuation">,</span> RandomIt last<span class="token punctuation">,</span> Compare comp <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="56-partial-sort-copy-对范围内的元素进行复制并部分排序"><a href="#56-partial-sort-copy-对范围内的元素进行复制并部分排序" class="headerlink" title="56. partial_sort_copy 对范围内的元素进行复制并部分排序"></a>56. partial_sort_copy 对范围内的元素进行复制并部分排序</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">InputIt</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">RandomIt</span> <span class="token operator">></span><span class="token keyword">constexpr</span> RandomIt <span class="token function">partial_sort_copy</span><span class="token punctuation">(</span> InputIt first<span class="token punctuation">,</span> InputIt last<span class="token punctuation">,</span>                                      RandomIt d_first<span class="token punctuation">,</span> RandomIt d_last <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">InputIt</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">RandomIt</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">Compare</span> <span class="token operator">></span><span class="token keyword">constexpr</span> RandomIt <span class="token function">partial_sort_copy</span><span class="token punctuation">(</span> InputIt first<span class="token punctuation">,</span> InputIt last<span class="token punctuation">,</span>                                      RandomIt d_first<span class="token punctuation">,</span> RandomIt d_last<span class="token punctuation">,</span> Compare comp <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="57-将范围内的元素排序，同时保持相等的元素之间的顺序"><a href="#57-将范围内的元素排序，同时保持相等的元素之间的顺序" class="headerlink" title="57.将范围内的元素排序，同时保持相等的元素之间的顺序"></a>57.将范围内的元素排序，同时保持相等的元素之间的顺序</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">RandomIt</span> <span class="token operator">></span><span class="token keyword">void</span> <span class="token function">stable_sort</span><span class="token punctuation">(</span> RandomIt first<span class="token punctuation">,</span> RandomIt last <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">RandomIt</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">Compare</span> <span class="token operator">></span><span class="token keyword">void</span> <span class="token function">stable_sort</span><span class="token punctuation">(</span> RandomIt first<span class="token punctuation">,</span> RandomIt last<span class="token punctuation">,</span> Compare comp <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="58-nth-element-将给定的范围部分排序，确保其按给定元素划分"><a href="#58-nth-element-将给定的范围部分排序，确保其按给定元素划分" class="headerlink" title="58. nth_element 将给定的范围部分排序，确保其按给定元素划分"></a>58. nth_element 将给定的范围部分排序，确保其按给定元素划分</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">RandomIt</span> <span class="token operator">></span><span class="token keyword">constexpr</span> <span class="token keyword">void</span> <span class="token function">nth_element</span><span class="token punctuation">(</span> RandomIt first<span class="token punctuation">,</span> RandomIt nth<span class="token punctuation">,</span> RandomIt last <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">RandomIt</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">Compare</span> <span class="token operator">></span><span class="token keyword">constexpr</span> <span class="token keyword">void</span> <span class="token function">nth_element</span><span class="token punctuation">(</span> RandomIt first<span class="token punctuation">,</span> RandomIt nth<span class="token punctuation">,</span> RandomIt last<span class="token punctuation">,</span> Compare comp <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="已排序范围上的二分搜索操作"><a href="#已排序范围上的二分搜索操作" class="headerlink" title="已排序范围上的二分搜索操作"></a>已排序范围上的二分搜索操作</h3><p>无 policy</p><h4 id="59-lower-bound-返回指向第一个不小于给定值的元素的迭代器"><a href="#59-lower-bound-返回指向第一个不小于给定值的元素的迭代器" class="headerlink" title="59. lower_bound 返回指向第一个不小于给定值的元素的迭代器"></a>59. lower_bound 返回指向第一个<em>不小于</em>给定值的元素的迭代器</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">ForwardIt</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">T</span> <span class="token operator">></span><span class="token keyword">constexpr</span> ForwardIt <span class="token function">lower_bound</span><span class="token punctuation">(</span> ForwardIt first<span class="token punctuation">,</span> ForwardIt last<span class="token punctuation">,</span> <span class="token keyword">const</span> T<span class="token operator">&amp;</span> value <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">ForwardIt</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">Compare</span> <span class="token operator">></span><span class="token keyword">constexpr</span> ForwardIt <span class="token function">lower_bound</span><span class="token punctuation">(</span> ForwardIt first<span class="token punctuation">,</span> ForwardIt last<span class="token punctuation">,</span> <span class="token keyword">const</span> T<span class="token operator">&amp;</span> value<span class="token punctuation">,</span> Compare comp <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="60-upper-bound-返回指向第一个大于给定值的元素的迭代器"><a href="#60-upper-bound-返回指向第一个大于给定值的元素的迭代器" class="headerlink" title="60. upper_bound 返回指向第一个大于给定值的元素的迭代器"></a>60. upper_bound 返回指向第一个<em>大于</em>给定值的元素的迭代器</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">ForwardIt</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">T</span> <span class="token operator">></span><span class="token keyword">constexpr</span> ForwardIt <span class="token function">upper_bound</span><span class="token punctuation">(</span> ForwardIt first<span class="token punctuation">,</span> ForwardIt last<span class="token punctuation">,</span> <span class="token keyword">const</span> T<span class="token operator">&amp;</span> value <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">ForwardIt</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">Compare</span> <span class="token operator">></span><span class="token keyword">constexpr</span> ForwardIt <span class="token function">upper_bound</span><span class="token punctuation">(</span> ForwardIt first<span class="token punctuation">,</span> ForwardIt last<span class="token punctuation">,</span> <span class="token keyword">const</span> T<span class="token operator">&amp;</span> value<span class="token punctuation">,</span> Compare comp <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="61-binary-search-确定元素是否存在于某范围中"><a href="#61-binary-search-确定元素是否存在于某范围中" class="headerlink" title="61. binary_search 确定元素是否存在于某范围中"></a>61. binary_search 确定元素是否存在于某范围中</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">ForwardIt</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">T</span> <span class="token operator">></span><span class="token keyword">constexpr</span> <span class="token keyword">bool</span> <span class="token function">binary_search</span><span class="token punctuation">(</span> ForwardIt first<span class="token punctuation">,</span> ForwardIt last<span class="token punctuation">,</span> <span class="token keyword">const</span> T<span class="token operator">&amp;</span> value <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">ForwardIt</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">Compare</span> <span class="token operator">></span><span class="token keyword">constexpr</span> <span class="token keyword">bool</span> <span class="token function">binary_search</span><span class="token punctuation">(</span> ForwardIt first<span class="token punctuation">,</span> ForwardIt last<span class="token punctuation">,</span> <span class="token keyword">const</span> T<span class="token operator">&amp;</span> value<span class="token punctuation">,</span> Compare comp <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="62-equal-range-返回匹配特定键值的元素范围"><a href="#62-equal-range-返回匹配特定键值的元素范围" class="headerlink" title="62. equal_range 返回匹配特定键值的元素范围"></a>62. equal_range 返回匹配特定键值的元素范围</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">ForwardIt</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">T</span> <span class="token operator">></span><span class="token keyword">constexpr</span> std<span class="token double-colon punctuation">::</span>pair<span class="token operator">&lt;</span>ForwardIt<span class="token punctuation">,</span>ForwardIt<span class="token operator">></span><span class="token function">equal_range</span><span class="token punctuation">(</span> ForwardIt first<span class="token punctuation">,</span> ForwardIt last<span class="token punctuation">,</span> <span class="token keyword">const</span> T<span class="token operator">&amp;</span> value <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">ForwardIt</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">Compare</span> <span class="token operator">></span><span class="token keyword">constexpr</span> std<span class="token double-colon punctuation">::</span>pair<span class="token operator">&lt;</span>ForwardIt<span class="token punctuation">,</span>ForwardIt<span class="token operator">></span><span class="token function">equal_range</span><span class="token punctuation">(</span> ForwardIt first<span class="token punctuation">,</span> ForwardIt last<span class="token punctuation">,</span> <span class="token keyword">const</span> T<span class="token operator">&amp;</span> value<span class="token punctuation">,</span> Compare comp <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="其他已排序范围上的操作"><a href="#其他已排序范围上的操作" class="headerlink" title="其他已排序范围上的操作"></a>其他已排序范围上的操作</h3><h4 id="63-merge-归并两个已排序的范围"><a href="#63-merge-归并两个已排序的范围" class="headerlink" title="63. merge 归并两个已排序的范围"></a>63. merge 归并两个已排序的范围</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">InputIt1</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">InputIt2</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">OutputIt</span> <span class="token operator">></span><span class="token keyword">constexpr</span> OutputIt <span class="token function">merge</span><span class="token punctuation">(</span> InputIt1 first1<span class="token punctuation">,</span> InputIt1 last1<span class="token punctuation">,</span> InputIt2 first2<span class="token punctuation">,</span> InputIt2 last2<span class="token punctuation">,</span>                          OutputIt d_first <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">InputIt1</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">InputIt2</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">OutputIt</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">Compare</span><span class="token operator">></span><span class="token keyword">constexpr</span> OutputIt <span class="token function">merge</span><span class="token punctuation">(</span> InputIt1 first1<span class="token punctuation">,</span> InputIt1 last1<span class="token punctuation">,</span> InputIt2 first2<span class="token punctuation">,</span> InputIt2 last2<span class="token punctuation">,</span>                          OutputIt d_first<span class="token punctuation">,</span> Compare comp <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="64-inplace-merge-就地归并两个有序范围"><a href="#64-inplace-merge-就地归并两个有序范围" class="headerlink" title="64. inplace_merge 就地归并两个有序范围"></a>64. inplace_merge 就地归并两个有序范围</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">BidirIt</span> <span class="token operator">></span><span class="token keyword">void</span> <span class="token function">inplace_merge</span><span class="token punctuation">(</span> BidirIt first<span class="token punctuation">,</span> BidirIt middle<span class="token punctuation">,</span> BidirIt last <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">BidirIt</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">Compare</span><span class="token operator">></span><span class="token keyword">void</span> <span class="token function">inplace_merge</span><span class="token punctuation">(</span> BidirIt first<span class="token punctuation">,</span> BidirIt middle<span class="token punctuation">,</span> BidirIt last<span class="token punctuation">,</span> Compare comp <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="已排序范围上的集合操作"><a href="#已排序范围上的集合操作" class="headerlink" title="已排序范围上的集合操作"></a>已排序范围上的集合操作</h3><h4 id="65-includes-若一个序列是另一个的子列则返回-true"><a href="#65-includes-若一个序列是另一个的子列则返回-true" class="headerlink" title="65. includes 若一个序列是另一个的子列则返回 true"></a>65. includes 若一个序列是另一个的子列则返回 true</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">InputIt1</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">InputIt2</span> <span class="token operator">></span><span class="token keyword">constexpr</span> <span class="token keyword">bool</span> <span class="token function">includes</span><span class="token punctuation">(</span> InputIt1 first1<span class="token punctuation">,</span> InputIt1 last1<span class="token punctuation">,</span> InputIt2 first2<span class="token punctuation">,</span> InputIt2 last2 <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">InputIt1</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">InputIt2</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">Compare</span> <span class="token operator">></span><span class="token keyword">constexpr</span> <span class="token keyword">bool</span> <span class="token function">includes</span><span class="token punctuation">(</span> InputIt1 first1<span class="token punctuation">,</span> InputIt1 last1<span class="token punctuation">,</span> InputIt2 first2<span class="token punctuation">,</span> InputIt2 last2<span class="token punctuation">,</span>                         Compare comp <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="66-set-difference-计算两个集合的差集"><a href="#66-set-difference-计算两个集合的差集" class="headerlink" title="66. set_difference  计算两个集合的差集"></a>66. set_difference  计算两个集合的差集</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">InputIt1</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">InputIt2</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">OutputIt</span> <span class="token operator">></span><span class="token keyword">constexpr</span> OutputIt <span class="token function">set_difference</span><span class="token punctuation">(</span> InputIt1 first1<span class="token punctuation">,</span> InputIt1 last1<span class="token punctuation">,</span> InputIt2 first2<span class="token punctuation">,</span> InputIt2 last2<span class="token punctuation">,</span>                                   OutputIt d_first <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">constexpr</span> OutputIt <span class="token function">set_difference</span><span class="token punctuation">(</span> InputIt1 first1<span class="token punctuation">,</span> InputIt1 last1<span class="token punctuation">,</span> InputIt2 first2<span class="token punctuation">,</span> InputIt2 last2<span class="token punctuation">,</span>                                   OutputIt d_first<span class="token punctuation">,</span> Compare comp <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="67-set-intersection-计算两个集合的交集"><a href="#67-set-intersection-计算两个集合的交集" class="headerlink" title="67. set_intersection 计算两个集合的交集"></a>67. set_intersection 计算两个集合的交集</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">InputIt1</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">InputIt2</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">OutputIt</span> <span class="token operator">></span><span class="token keyword">constexpr</span> OutputIt <span class="token function">set_intersection</span><span class="token punctuation">(</span> InputIt1 first1<span class="token punctuation">,</span> InputIt1 last1<span class="token punctuation">,</span> InputIt2 first2<span class="token punctuation">,</span> InputIt2 last2<span class="token punctuation">,</span>                                     OutputIt d_first <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">InputIt1</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">InputIt2</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">OutputIt</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">Compare</span> <span class="token operator">></span><span class="token keyword">constexpr</span> OutputIt <span class="token function">set_intersection</span><span class="token punctuation">(</span> InputIt1 first1<span class="token punctuation">,</span> InputIt1 last1<span class="token punctuation">,</span> InputIt2 first2<span class="token punctuation">,</span> InputIt2 last2<span class="token punctuation">,</span>                                     OutputIt d_first<span class="token punctuation">,</span> Compare comp <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="68-set-symmetric-difference-计算两个集合的对称差"><a href="#68-set-symmetric-difference-计算两个集合的对称差" class="headerlink" title="68. set_symmetric_difference 计算两个集合的对称差"></a>68. set_symmetric_difference 计算两个集合的对称差</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">InputIt1</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">InputIt2</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">OutputIt</span> <span class="token operator">></span><span class="token keyword">constexpr</span> OutputIt <span class="token function">set_symmetric_difference</span><span class="token punctuation">(</span> InputIt1 first1<span class="token punctuation">,</span> InputIt1 last1<span class="token punctuation">,</span>                                             InputIt2 first2<span class="token punctuation">,</span> InputIt2 last2<span class="token punctuation">,</span>                                             OutputIt d_first <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">InputIt1</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">InputIt2</span><span class="token punctuation">,</span>          <span class="token keyword">class</span> <span class="token class-name">OutputIt</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">Compare</span> <span class="token operator">></span><span class="token keyword">constexpr</span> OutputIt <span class="token function">set_symmetric_difference</span><span class="token punctuation">(</span> InputIt1 first1<span class="token punctuation">,</span> InputIt1 last1<span class="token punctuation">,</span>                                             InputIt2 first2<span class="token punctuation">,</span> InputIt2 last2<span class="token punctuation">,</span>                                             OutputIt d_first<span class="token punctuation">,</span> Compare comp <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="69-set-union-计算两个集合的并集"><a href="#69-set-union-计算两个集合的并集" class="headerlink" title="69. set_union 计算两个集合的并集"></a>69. set_union 计算两个集合的并集</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">InputIt1</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">InputIt2</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">OutputIt</span> <span class="token operator">></span><span class="token keyword">constexpr</span> OutputIt <span class="token function">set_union</span><span class="token punctuation">(</span> InputIt1 first1<span class="token punctuation">,</span> InputIt1 last1<span class="token punctuation">,</span> InputIt2 first2<span class="token punctuation">,</span> InputIt2 last2<span class="token punctuation">,</span>                              OutputIt d_first <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">InputIt1</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">InputIt2</span><span class="token punctuation">,</span>          <span class="token keyword">class</span> <span class="token class-name">OutputIt</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">Compare</span> <span class="token operator">></span><span class="token keyword">constexpr</span> OutputIt <span class="token function">set_union</span><span class="token punctuation">(</span> InputIt1 first1<span class="token punctuation">,</span> InputIt1 last1<span class="token punctuation">,</span> InputIt2 first2<span class="token punctuation">,</span> InputIt2 last2<span class="token punctuation">,</span>                              OutputIt d_first<span class="token punctuation">,</span> Compare comp <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="堆操作"><a href="#堆操作" class="headerlink" title="堆操作"></a>堆操作</h3><p>只有is_heap好is_heap_until有policy.</p><h4 id="70-is-heap-检查给定范围是否为一个最大堆"><a href="#70-is-heap-检查给定范围是否为一个最大堆" class="headerlink" title="70. is_heap 检查给定范围是否为一个最大堆"></a>70. is_heap 检查给定范围是否为一个最大堆</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">RandomIt</span> <span class="token operator">></span><span class="token keyword">constexpr</span> <span class="token keyword">bool</span> <span class="token function">is_heap</span><span class="token punctuation">(</span> RandomIt first<span class="token punctuation">,</span> RandomIt last <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">RandomIt</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">Compare</span> <span class="token operator">></span><span class="token keyword">constexpr</span> <span class="token keyword">bool</span> <span class="token function">is_heap</span><span class="token punctuation">(</span> RandomIt first<span class="token punctuation">,</span> RandomIt last<span class="token punctuation">,</span> Compare comp <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="71-is-heap-until-检查给定范围是否为最大堆"><a href="#71-is-heap-until-检查给定范围是否为最大堆" class="headerlink" title="71. is_heap_until 检查给定范围是否为最大堆"></a>71. is_heap_until 检查给定范围是否为最大堆</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">RandomIt</span> <span class="token operator">></span><span class="token keyword">constexpr</span> RandomIt <span class="token function">is_heap_until</span><span class="token punctuation">(</span> RandomIt first<span class="token punctuation">,</span> RandomIt last <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">RandomIt</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">Compare</span> <span class="token operator">></span><span class="token keyword">constexpr</span> RandomIt <span class="token function">is_heap_until</span><span class="token punctuation">(</span> RandomIt first<span class="token punctuation">,</span> RandomIt last<span class="token punctuation">,</span> Compare comp <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="72-make-heap-从一个元素范围创建出一个最大堆"><a href="#72-make-heap-从一个元素范围创建出一个最大堆" class="headerlink" title="72. make_heap 从一个元素范围创建出一个最大堆"></a>72. make_heap 从一个元素范围创建出一个最大堆</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">RandomIt</span> <span class="token operator">></span><span class="token keyword">constexpr</span> <span class="token keyword">void</span> <span class="token function">make_heap</span><span class="token punctuation">(</span> RandomIt first<span class="token punctuation">,</span> RandomIt last <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">RandomIt</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">Compare</span> <span class="token operator">></span><span class="token keyword">constexpr</span> <span class="token keyword">void</span> <span class="token function">make_heap</span><span class="token punctuation">(</span> RandomIt first<span class="token punctuation">,</span> RandomIt last<span class="token punctuation">,</span> Compare comp <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="73-push-heap-将一个元素加入到一个最大堆"><a href="#73-push-heap-将一个元素加入到一个最大堆" class="headerlink" title="73. push_heap 将一个元素加入到一个最大堆"></a>73. push_heap 将一个元素加入到一个最大堆</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">RandomIt</span> <span class="token operator">></span><span class="token keyword">constexpr</span> <span class="token keyword">void</span> <span class="token function">push_heap</span><span class="token punctuation">(</span> RandomIt first<span class="token punctuation">,</span> RandomIt last <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">RandomIt</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">Compare</span> <span class="token operator">></span><span class="token keyword">constexpr</span> <span class="token keyword">void</span> <span class="token function">push_heap</span><span class="token punctuation">(</span> RandomIt first<span class="token punctuation">,</span> RandomIt last<span class="token punctuation">,</span> Compare comp <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="74-pop-heap-从最大堆中移除最大元素"><a href="#74-pop-heap-从最大堆中移除最大元素" class="headerlink" title="74. pop_heap 从最大堆中移除最大元素"></a>74. pop_heap 从最大堆中移除最大元素</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">RandomIt</span> <span class="token operator">></span><span class="token keyword">constexpr</span> <span class="token keyword">void</span> <span class="token function">pop_heap</span><span class="token punctuation">(</span> RandomIt first<span class="token punctuation">,</span> RandomIt last <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">RandomIt</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">Compare</span> <span class="token operator">></span><span class="token keyword">constexpr</span> <span class="token keyword">void</span> <span class="token function">pop_heap</span><span class="token punctuation">(</span> RandomIt first<span class="token punctuation">,</span> RandomIt last<span class="token punctuation">,</span> Compare comp <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="75-sort-heap-将一个最大堆变成一个按升序排序的元素范围"><a href="#75-sort-heap-将一个最大堆变成一个按升序排序的元素范围" class="headerlink" title="75. sort_heap 将一个最大堆变成一个按升序排序的元素范围"></a>75. sort_heap 将一个最大堆变成一个按升序排序的元素范围</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">RandomIt</span> <span class="token operator">></span><span class="token keyword">constexpr</span> <span class="token keyword">void</span> <span class="token function">sort_heap</span><span class="token punctuation">(</span> RandomIt first<span class="token punctuation">,</span> RandomIt last <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">RandomIt</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">Compare</span> <span class="token operator">></span><span class="token keyword">constexpr</span> <span class="token keyword">void</span> <span class="token function">sort_heap</span><span class="token punctuation">(</span> RandomIt first<span class="token punctuation">,</span> RandomIt last<span class="token punctuation">,</span> Compare comp <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="最大-最小操作"><a href="#最大-最小操作" class="headerlink" title="最大/最小操作"></a>最大/最小操作</h3><h4 id="76-max-返回各给定值中的较大者"><a href="#76-max-返回各给定值中的较大者" class="headerlink" title="76. max 返回各给定值中的较大者"></a>76. max 返回各给定值中的较大者</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">T</span> <span class="token operator">></span><span class="token keyword">constexpr</span> <span class="token keyword">const</span> T<span class="token operator">&amp;</span> <span class="token function">max</span><span class="token punctuation">(</span> <span class="token keyword">const</span> T<span class="token operator">&amp;</span> a<span class="token punctuation">,</span> <span class="token keyword">const</span> T<span class="token operator">&amp;</span> b <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">Compare</span> <span class="token operator">></span><span class="token keyword">constexpr</span> <span class="token keyword">const</span> T<span class="token operator">&amp;</span> <span class="token function">max</span><span class="token punctuation">(</span> <span class="token keyword">const</span> T<span class="token operator">&amp;</span> a<span class="token punctuation">,</span> <span class="token keyword">const</span> T<span class="token operator">&amp;</span> b<span class="token punctuation">,</span> Compare comp <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">T</span> <span class="token operator">></span><span class="token keyword">constexpr</span> T <span class="token function">max</span><span class="token punctuation">(</span> std<span class="token double-colon punctuation">::</span>initializer_list<span class="token operator">&lt;</span>T<span class="token operator">></span> ilist <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">Compare</span> <span class="token operator">></span><span class="token keyword">constexpr</span> T <span class="token function">max</span><span class="token punctuation">(</span> std<span class="token double-colon punctuation">::</span>initializer_list<span class="token operator">&lt;</span>T<span class="token operator">></span> ilist<span class="token punctuation">,</span> Compare comp <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 比较函数的签名应等价于如下：</span><span class="token keyword">bool</span> <span class="token function">cmp</span><span class="token punctuation">(</span><span class="token keyword">const</span> Type1 <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token keyword">const</span> Type2 <span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="77-max-element-返回范围内的最大元素"><a href="#77-max-element-返回范围内的最大元素" class="headerlink" title="77. max_element 返回范围内的最大元素"></a>77. max_element 返回范围内的最大元素</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">ForwardIt</span> <span class="token operator">></span><span class="token keyword">constexpr</span> ForwardIt <span class="token function">max_element</span><span class="token punctuation">(</span>ForwardIt first<span class="token punctuation">,</span> ForwardIt last <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">ForwardIt</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">Compare</span> <span class="token operator">></span><span class="token keyword">constexpr</span> ForwardIt <span class="token function">max_element</span><span class="token punctuation">(</span>ForwardIt first<span class="token punctuation">,</span> ForwardIt last<span class="token punctuation">,</span> Compare comp <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="78-min-返回各给定值中的较小者"><a href="#78-min-返回各给定值中的较小者" class="headerlink" title="78. min 返回各给定值中的较小者"></a>78. min 返回各给定值中的较小者</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">T</span> <span class="token operator">></span><span class="token keyword">constexpr</span> <span class="token keyword">const</span> T<span class="token operator">&amp;</span> <span class="token function">min</span><span class="token punctuation">(</span> <span class="token keyword">const</span> T<span class="token operator">&amp;</span> a<span class="token punctuation">,</span> <span class="token keyword">const</span> T<span class="token operator">&amp;</span> b <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">Compare</span> <span class="token operator">></span><span class="token keyword">constexpr</span> <span class="token keyword">const</span> T<span class="token operator">&amp;</span> <span class="token function">min</span><span class="token punctuation">(</span> <span class="token keyword">const</span> T<span class="token operator">&amp;</span> a<span class="token punctuation">,</span> <span class="token keyword">const</span> T<span class="token operator">&amp;</span> b<span class="token punctuation">,</span> Compare comp <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">T</span> <span class="token operator">></span><span class="token keyword">constexpr</span> T <span class="token function">min</span><span class="token punctuation">(</span> std<span class="token double-colon punctuation">::</span>initializer_list<span class="token operator">&lt;</span>T<span class="token operator">></span> ilist <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">Compare</span> <span class="token operator">></span><span class="token keyword">constexpr</span> T <span class="token function">min</span><span class="token punctuation">(</span> std<span class="token double-colon punctuation">::</span>initializer_list<span class="token operator">&lt;</span>T<span class="token operator">></span> ilist<span class="token punctuation">,</span> Compare comp <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="79-min-element-返回范围内的最小元素"><a href="#79-min-element-返回范围内的最小元素" class="headerlink" title="79. min_element 返回范围内的最小元素"></a>79. min_element 返回范围内的最小元素</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">ForwardIt</span> <span class="token operator">></span><span class="token keyword">constexpr</span> ForwardIt <span class="token function">min_element</span><span class="token punctuation">(</span> ForwardIt first<span class="token punctuation">,</span> ForwardIt last <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">ForwardIt</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">Compare</span> <span class="token operator">></span><span class="token keyword">constexpr</span> ForwardIt <span class="token function">min_element</span><span class="token punctuation">(</span> ForwardIt first<span class="token punctuation">,</span> ForwardIt last<span class="token punctuation">,</span> Compare comp <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="80-minmax-返回两个元素的较小和较大者"><a href="#80-minmax-返回两个元素的较小和较大者" class="headerlink" title="80. minmax 返回两个元素的较小和较大者"></a>80. minmax 返回两个元素的较小和较大者</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">T</span> <span class="token operator">></span><span class="token keyword">constexpr</span> std<span class="token double-colon punctuation">::</span>pair<span class="token operator">&lt;</span><span class="token keyword">const</span> T<span class="token operator">&amp;</span><span class="token punctuation">,</span><span class="token keyword">const</span> T<span class="token operator">&amp;</span><span class="token operator">></span> <span class="token function">minmax</span><span class="token punctuation">(</span> <span class="token keyword">const</span> T<span class="token operator">&amp;</span> a<span class="token punctuation">,</span> <span class="token keyword">const</span> T<span class="token operator">&amp;</span> b <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">Compare</span> <span class="token operator">></span><span class="token keyword">constexpr</span> std<span class="token double-colon punctuation">::</span>pair<span class="token operator">&lt;</span><span class="token keyword">const</span> T<span class="token operator">&amp;</span><span class="token punctuation">,</span><span class="token keyword">const</span> T<span class="token operator">&amp;</span><span class="token operator">></span> <span class="token function">minmax</span><span class="token punctuation">(</span> <span class="token keyword">const</span> T<span class="token operator">&amp;</span> a<span class="token punctuation">,</span> <span class="token keyword">const</span> T<span class="token operator">&amp;</span> b<span class="token punctuation">,</span> Compare comp <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">T</span> <span class="token operator">></span><span class="token keyword">constexpr</span> std<span class="token double-colon punctuation">::</span>pair<span class="token operator">&lt;</span>T<span class="token punctuation">,</span>T<span class="token operator">></span> <span class="token function">minmax</span><span class="token punctuation">(</span> std<span class="token double-colon punctuation">::</span>initializer_list<span class="token operator">&lt;</span>T<span class="token operator">></span> ilist<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">Compare</span> <span class="token operator">></span><span class="token keyword">constexpr</span> std<span class="token double-colon punctuation">::</span>pair<span class="token operator">&lt;</span>T<span class="token punctuation">,</span>T<span class="token operator">></span> <span class="token function">minmax</span><span class="token punctuation">(</span> std<span class="token double-colon punctuation">::</span>initializer_list<span class="token operator">&lt;</span>T<span class="token operator">></span> ilist<span class="token punctuation">,</span> Compare comp <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="81-minmax-element-返回范围内的最小元素和最大元素"><a href="#81-minmax-element-返回范围内的最小元素和最大元素" class="headerlink" title="81. minmax_element 返回范围内的最小元素和最大元素"></a>81. minmax_element 返回范围内的最小元素和最大元素</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">ForwardIt</span> <span class="token operator">></span><span class="token keyword">constexpr</span> std<span class="token double-colon punctuation">::</span>pair<span class="token operator">&lt;</span>ForwardIt<span class="token punctuation">,</span>ForwardIt<span class="token operator">></span> <span class="token function">minmax_element</span><span class="token punctuation">(</span> ForwardIt first<span class="token punctuation">,</span> ForwardIt last <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">ForwardIt</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">Compare</span> <span class="token operator">></span><span class="token keyword">constexpr</span> std<span class="token double-colon punctuation">::</span>pair<span class="token operator">&lt;</span>ForwardIt<span class="token punctuation">,</span>ForwardIt<span class="token operator">></span>    <span class="token function">minmax_element</span><span class="token punctuation">(</span> ForwardIt first<span class="token punctuation">,</span> ForwardIt last<span class="token punctuation">,</span> Compare comp <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="82-clamp-在一对边界值间的值"><a href="#82-clamp-在一对边界值间的值" class="headerlink" title="82. clamp 在一对边界值间的值"></a>82. clamp 在一对边界值间的值</h4><p>若 <code>v</code> 小于 <code>lo</code> 到则为 <code>lo</code> 的引用，若 <code>hi</code> 小于 <code>v</code> 则为到 <code>hi</code> 的引用，否则为到 <code>v</code> 的引用。若 <code>v</code> 小于 <code>lo</code> ，则返回 <code>lo</code> ；若 <code>v</code> 大于 <code>hi</code> ，则返回 <code>hi</code> ；否则返回 <code>v</code> 。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">></span><span class="token keyword">constexpr</span> <span class="token keyword">const</span> T<span class="token operator">&amp;</span> <span class="token function">clamp</span><span class="token punctuation">(</span> <span class="token keyword">const</span> T<span class="token operator">&amp;</span> v<span class="token punctuation">,</span> <span class="token keyword">const</span> T<span class="token operator">&amp;</span> lo<span class="token punctuation">,</span> <span class="token keyword">const</span> T<span class="token operator">&amp;</span> hi <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">Compare</span><span class="token operator">></span><span class="token keyword">constexpr</span> <span class="token keyword">const</span> T<span class="token operator">&amp;</span> <span class="token function">clamp</span><span class="token punctuation">(</span> <span class="token keyword">const</span> T<span class="token operator">&amp;</span> v<span class="token punctuation">,</span> <span class="token keyword">const</span> T<span class="token operator">&amp;</span> lo<span class="token punctuation">,</span> <span class="token keyword">const</span> T<span class="token operator">&amp;</span> hi<span class="token punctuation">,</span> Compare comp <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="比较操作"><a href="#比较操作" class="headerlink" title="比较操作"></a>比较操作</h3><h4 id="83-equal-确定两个元素集合是否是相同的"><a href="#83-equal-确定两个元素集合是否是相同的" class="headerlink" title="83. equal 确定两个元素集合是否是相同的"></a>83. equal 确定两个元素集合是否是相同的</h4><p>std::equal 不可应用到由 std::unordered_set 、 std::unordered_multiset 、 std::unordered_map 或 std::unordered_multimap 的迭代器构成的范围，因为即使此类容器存储相同的元素，在容器内元素存储的顺序也可能不同。比较整个容器是否相等时，针对该容器的 operator== 重载通常是更好的选择。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">InputIt1</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">InputIt2</span> <span class="token operator">></span><span class="token keyword">constexpr</span> <span class="token keyword">bool</span> <span class="token function">equal</span><span class="token punctuation">(</span> InputIt1 first1<span class="token punctuation">,</span> InputIt1 last1<span class="token punctuation">,</span> InputIt2 first2 <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">InputIt1</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">InputIt2</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">BinaryPredicate</span> <span class="token operator">></span><span class="token keyword">constexpr</span> <span class="token keyword">bool</span> <span class="token function">equal</span><span class="token punctuation">(</span> InputIt1 first1<span class="token punctuation">,</span> InputIt1 last1<span class="token punctuation">,</span> InputIt2 first2<span class="token punctuation">,</span> BinaryPredicate p <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">InputIt1</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">InputIt2</span> <span class="token operator">></span><span class="token keyword">constexpr</span> <span class="token keyword">bool</span> <span class="token function">equal</span><span class="token punctuation">(</span> InputIt1 first1<span class="token punctuation">,</span> InputIt1 last1<span class="token punctuation">,</span> InputIt2 first2<span class="token punctuation">,</span> InputIt2 last2 <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">InputIt1</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">InputIt2</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">BinaryPredicate</span> <span class="token operator">></span><span class="token keyword">constexpr</span> <span class="token keyword">bool</span> <span class="token function">equal</span><span class="token punctuation">(</span> InputIt1 first1<span class="token punctuation">,</span> InputIt1 last1<span class="token punctuation">,</span> InputIt2 first2<span class="token punctuation">,</span> InputIt2 last2<span class="token punctuation">,</span>                      BinaryPredicate p <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="84-lexicographical-compare-当一个范围按字典顺序小于另一个范围时，返回-true"><a href="#84-lexicographical-compare-当一个范围按字典顺序小于另一个范围时，返回-true" class="headerlink" title="84. lexicographical_compare 当一个范围按字典顺序小于另一个范围时，返回 true"></a>84. lexicographical_compare 当一个范围按字典顺序小于另一个范围时，返回 true</h4><p>检查第一个范围 [first1, last1) 是否按字典序小于第二个范围 [first2, last2) 。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">InputIt1</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">InputIt2</span> <span class="token operator">></span><span class="token keyword">constexpr</span> <span class="token keyword">bool</span> <span class="token function">lexicographical_compare</span><span class="token punctuation">(</span> InputIt1 first1<span class="token punctuation">,</span> InputIt1 last1<span class="token punctuation">,</span>                                        InputIt2 first2<span class="token punctuation">,</span> InputIt2 last2 <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">InputIt1</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">InputIt2</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">Compare</span> <span class="token operator">></span><span class="token keyword">constexpr</span> <span class="token keyword">bool</span> <span class="token function">lexicographical_compare</span><span class="token punctuation">(</span> InputIt1 first1<span class="token punctuation">,</span> InputIt1 last1<span class="token punctuation">,</span>                                        InputIt2 first2<span class="token punctuation">,</span> InputIt2 last2<span class="token punctuation">,</span>                                        Compare comp <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="85-lexicographical-compare-three-way-用三路比较比较两个范围"><a href="#85-lexicographical-compare-three-way-用三路比较比较两个范围" class="headerlink" title="85. lexicographical_compare_three_way 用三路比较比较两个范围"></a>85. lexicographical_compare_three_way 用三路比较比较两个范围</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">InputIt1</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">InputIt2</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">Cmp</span> <span class="token operator">></span><span class="token keyword">constexpr</span> <span class="token keyword">auto</span> <span class="token function">lexicographical_compare_three_way</span><span class="token punctuation">(</span> InputIt1 first1<span class="token punctuation">,</span> InputIt1 last1<span class="token punctuation">,</span>                                                  InputIt2 first2<span class="token punctuation">,</span> InputIt2 last2<span class="token punctuation">,</span>                                                  Cmp comp<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token keyword">decltype</span><span class="token punctuation">(</span><span class="token function">comp</span><span class="token punctuation">(</span><span class="token operator">*</span>first1<span class="token punctuation">,</span> <span class="token operator">*</span>first2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">InputIt1</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">InputIt2</span> <span class="token operator">></span><span class="token keyword">constexpr</span> <span class="token keyword">auto</span> <span class="token function">lexicographical_compare_three_way</span><span class="token punctuation">(</span> InputIt1 first1<span class="token punctuation">,</span> InputIt1 last1<span class="token punctuation">,</span>                                                  InputIt2 first2<span class="token punctuation">,</span> InputIt2 last2<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="排列操作"><a href="#排列操作" class="headerlink" title="排列操作"></a>排列操作</h3><h4 id="86-is-permutation-判断一个序列是否为另一个序列的排列"><a href="#86-is-permutation-判断一个序列是否为另一个序列的排列" class="headerlink" title="86. is_permutation 判断一个序列是否为另一个序列的排列"></a>86. is_permutation 判断一个序列是否为另一个序列的排列</h4><p>若存在范围 [first1, last1) 中元素的排列，使得该范围等于 [first2,last2) ，则返回 true </p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">ForwardIt1</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">ForwardIt2</span> <span class="token operator">></span><span class="token keyword">constexpr</span> <span class="token keyword">bool</span> <span class="token function">is_permutation</span><span class="token punctuation">(</span> ForwardIt1 first1<span class="token punctuation">,</span> ForwardIt1 last1<span class="token punctuation">,</span> ForwardIt2 first2 <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">ForwardIt1</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">ForwardIt2</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">BinaryPredicate</span> <span class="token operator">></span><span class="token keyword">constexpr</span> <span class="token keyword">bool</span> <span class="token function">is_permutation</span><span class="token punctuation">(</span> ForwardIt1 first1<span class="token punctuation">,</span> ForwardIt1 last1<span class="token punctuation">,</span>                               ForwardIt2 first2<span class="token punctuation">,</span> BinaryPredicate p <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">ForwardIt1</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">ForwardIt2</span> <span class="token operator">></span><span class="token keyword">constexpr</span> <span class="token keyword">bool</span> <span class="token function">is_permutation</span><span class="token punctuation">(</span> ForwardIt1 first1<span class="token punctuation">,</span> ForwardIt1 last1<span class="token punctuation">,</span>                               ForwardIt2 first2<span class="token punctuation">,</span> ForwardIt2 last2 <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">ForwardIt1</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">ForwardIt2</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">BinaryPredicate</span> <span class="token operator">></span><span class="token keyword">constexpr</span> <span class="token keyword">bool</span> <span class="token function">is_permutation</span><span class="token punctuation">(</span> ForwardIt1 first1<span class="token punctuation">,</span> ForwardIt1 last1<span class="token punctuation">,</span>                               ForwardIt2 first2<span class="token punctuation">,</span> ForwardIt2 last2<span class="token punctuation">,</span> BinaryPredicate p <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="87-next-permutation-产生某个元素范围的按字典顺序的下一个较大的排列"><a href="#87-next-permutation-产生某个元素范围的按字典顺序的下一个较大的排列" class="headerlink" title="87. next_permutation 产生某个元素范围的按字典顺序的下一个较大的排列"></a>87. next_permutation 产生某个元素范围的按字典顺序的下一个较大的排列</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">BidirIt</span> <span class="token operator">></span><span class="token keyword">constexpr</span> <span class="token keyword">bool</span> <span class="token function">next_permutation</span><span class="token punctuation">(</span> BidirIt first<span class="token punctuation">,</span> BidirIt last <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">BidirIt</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">Compare</span> <span class="token operator">></span><span class="token keyword">constexpr</span> <span class="token keyword">bool</span> <span class="token function">next_permutation</span><span class="token punctuation">(</span> BidirIt first<span class="token punctuation">,</span> BidirIt last<span class="token punctuation">,</span> Compare comp <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="88-prev-permutation-产生某个元素范围的按字典顺序的下一个较小的排列"><a href="#88-prev-permutation-产生某个元素范围的按字典顺序的下一个较小的排列" class="headerlink" title="88. prev_permutation 产生某个元素范围的按字典顺序的下一个较小的排列"></a>88. prev_permutation 产生某个元素范围的按字典顺序的下一个较小的排列</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">BidirIt</span> <span class="token operator">></span><span class="token keyword">constexpr</span> <span class="token keyword">bool</span> <span class="token function">prev_permutation</span><span class="token punctuation">(</span> BidirIt first<span class="token punctuation">,</span> BidirIt last<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">BidirIt</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">Compare</span> <span class="token operator">></span><span class="token keyword">constexpr</span> <span class="token keyword">bool</span> <span class="token function">prev_permutation</span><span class="token punctuation">(</span> BidirIt first<span class="token punctuation">,</span> BidirIt last<span class="token punctuation">,</span> Compare comp<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="数值运算"><a href="#数值运算" class="headerlink" title="数值运算"></a>数值运算</h3><h4 id="89-iota-用从起始值开始连续递增的值填充一个范围"><a href="#89-iota-用从起始值开始连续递增的值填充一个范围" class="headerlink" title="89. iota 用从起始值开始连续递增的值填充一个范围"></a>89. iota 用从起始值开始连续递增的值填充一个范围</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">ForwardIt</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">T</span> <span class="token operator">></span><span class="token keyword">constexpr</span> <span class="token keyword">void</span> <span class="token function">iota</span><span class="token punctuation">(</span> ForwardIt first<span class="token punctuation">,</span> ForwardIt last<span class="token punctuation">,</span> T value <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="90-accumulate-对一个范围内的元素求和"><a href="#90-accumulate-对一个范围内的元素求和" class="headerlink" title="90. accumulate 对一个范围内的元素求和"></a>90. accumulate 对一个范围内的元素求和</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">InputIt</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">T</span> <span class="token operator">></span><span class="token keyword">constexpr</span> T <span class="token function">accumulate</span><span class="token punctuation">(</span> InputIt first<span class="token punctuation">,</span> InputIt last<span class="token punctuation">,</span> T init <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">InputIt</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">BinaryOperation</span> <span class="token operator">></span><span class="token keyword">constexpr</span> T <span class="token function">accumulate</span><span class="token punctuation">(</span> InputIt first<span class="token punctuation">,</span> InputIt last<span class="token punctuation">,</span> T init<span class="token punctuation">,</span> BinaryOperation op <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="91-inner-product-计算两个范围的元素的内积"><a href="#91-inner-product-计算两个范围的元素的内积" class="headerlink" title="91. inner_product 计算两个范围的元素的内积"></a>91. inner_product 计算两个范围的元素的内积</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">InputIt1</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">InputIt2</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">T</span> <span class="token operator">></span><span class="token keyword">constexpr</span> T <span class="token function">inner_product</span><span class="token punctuation">(</span> InputIt1 first1<span class="token punctuation">,</span> InputIt1 last1<span class="token punctuation">,</span> InputIt2 first2<span class="token punctuation">,</span> T init <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">InputIt1</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">InputIt2</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">T</span><span class="token punctuation">,</span>         <span class="token keyword">class</span> <span class="token class-name">BinaryOperation1</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">BinaryOperation2</span><span class="token operator">></span><span class="token keyword">constexpr</span> T <span class="token function">inner_product</span><span class="token punctuation">(</span> InputIt1 first1<span class="token punctuation">,</span> InputIt1 last1<span class="token punctuation">,</span> InputIt2 first2<span class="token punctuation">,</span> T init<span class="token punctuation">,</span>                           BinaryOperation1 op1<span class="token punctuation">,</span> BinaryOperation2 op2 <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// acc = op1(acc, op2(*first1, *first2))</span><span class="token comment">// op1/op2的签名应当等价于： Ret fun(const Type1 &amp;a, const Type2 &amp;b);</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="92-adjacent-difference-计算范围内各相邻元素之间的差"><a href="#92-adjacent-difference-计算范围内各相邻元素之间的差" class="headerlink" title="92.  adjacent_difference 计算范围内各相邻元素之间的差"></a>92.  adjacent_difference 计算范围内各相邻元素之间的差</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">InputIt</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">OutputIt</span> <span class="token operator">></span><span class="token keyword">constexpr</span> OutputIt <span class="token function">adjacent_difference</span><span class="token punctuation">(</span> InputIt first<span class="token punctuation">,</span> InputIt last<span class="token punctuation">,</span> OutputIt d_first <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">InputIt</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">OutputIt</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">BinaryOperation</span> <span class="token operator">></span><span class="token keyword">constexpr</span> OutputIt <span class="token function">adjacent_difference</span><span class="token punctuation">(</span> InputIt first<span class="token punctuation">,</span> InputIt last<span class="token punctuation">,</span>                                        OutputIt d_first<span class="token punctuation">,</span> BinaryOperation op <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="93-partial-sum-计算范围内元素的部分和"><a href="#93-partial-sum-计算范围内元素的部分和" class="headerlink" title="93. partial_sum 计算范围内元素的部分和"></a>93. partial_sum 计算范围内元素的部分和</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">InputIt</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">OutputIt</span> <span class="token operator">></span><span class="token keyword">constexpr</span> OutputIt <span class="token function">partial_sum</span><span class="token punctuation">(</span> InputIt first<span class="token punctuation">,</span> InputIt last<span class="token punctuation">,</span> OutputIt d_first <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">InputIt</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">OutputIt</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">BinaryOperation</span> <span class="token operator">></span><span class="token keyword">constexpr</span> OutputIt <span class="token function">partial_sum</span><span class="token punctuation">(</span> InputIt first<span class="token punctuation">,</span> InputIt last<span class="token punctuation">,</span> OutputIt d_first<span class="token punctuation">,</span>                                BinaryOperation op <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="94-reduce-类似-std-accumulate，但不依序执行"><a href="#94-reduce-类似-std-accumulate，但不依序执行" class="headerlink" title="94. reduce 类似 std::accumulate，但不依序执行"></a>94. reduce 类似 std::accumulate，但不依序执行</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">InputIt</span><span class="token operator">></span><span class="token keyword">constexpr</span> <span class="token keyword">typename</span> <span class="token class-name">std</span><span class="token double-colon punctuation">::</span>iterator_traits<span class="token operator">&lt;</span>InputIt<span class="token operator">></span><span class="token double-colon punctuation">::</span>value_type <span class="token function">reduce</span><span class="token punctuation">(</span>    InputIt first<span class="token punctuation">,</span> InputIt last<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">InputIt</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">></span><span class="token keyword">constexpr</span> T <span class="token function">reduce</span><span class="token punctuation">(</span>InputIt first<span class="token punctuation">,</span> InputIt last<span class="token punctuation">,</span> T init<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">InputIt</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">BinaryOp</span><span class="token operator">></span><span class="token keyword">constexpr</span> T <span class="token function">reduce</span><span class="token punctuation">(</span>InputIt first<span class="token punctuation">,</span> InputIt last<span class="token punctuation">,</span> T init<span class="token punctuation">,</span> BinaryOp binary_op<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="95-exclusive-scan-类似-std-partial-sum，第-i-个和中排除第-i-个输入"><a href="#95-exclusive-scan-类似-std-partial-sum，第-i-个和中排除第-i-个输入" class="headerlink" title="95. exclusive_scan 类似 std::partial_sum，第 i 个和中排除第 i 个输入"></a>95. exclusive_scan 类似 std::partial_sum，第 i 个和中排除第 i 个输入</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">InputIt</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">OutputIt</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">T</span> <span class="token operator">></span><span class="token keyword">constexpr</span> OutputIt <span class="token function">exclusive_scan</span><span class="token punctuation">(</span> InputIt first<span class="token punctuation">,</span> InputIt last<span class="token punctuation">,</span> OutputIt d_first<span class="token punctuation">,</span> T init <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">InputIt</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">OutputIt</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">BinaryOperation</span> <span class="token operator">></span><span class="token keyword">constexpr</span> OutputIt <span class="token function">exclusive_scan</span><span class="token punctuation">(</span> InputIt first<span class="token punctuation">,</span> InputIt last<span class="token punctuation">,</span>                                   OutputIt d_first<span class="token punctuation">,</span> T init<span class="token punctuation">,</span> BinaryOperation binary_op <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="96-inclusive-scan-类似-std-partial-sum，第-i-个和中包含第-i-个输入"><a href="#96-inclusive-scan-类似-std-partial-sum，第-i-个和中包含第-i-个输入" class="headerlink" title="96.  inclusive_scan 类似 std::partial_sum，第 i 个和中包含第 i 个输入"></a>96.  inclusive_scan 类似 std::partial_sum，第 i 个和中包含第 i 个输入</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">InputIt</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">OutputIt</span> <span class="token operator">></span><span class="token keyword">constexpr</span> OutputIt <span class="token function">inclusive_scan</span><span class="token punctuation">(</span> InputIt first<span class="token punctuation">,</span> InputIt last<span class="token punctuation">,</span> OutputIt d_first <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">InputIt</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">OutputIt</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">BinaryOperation</span> <span class="token operator">></span><span class="token keyword">constexpr</span> OutputIt <span class="token function">inclusive_scan</span><span class="token punctuation">(</span> InputIt first<span class="token punctuation">,</span> InputIt last<span class="token punctuation">,</span>                                   OutputIt d_first<span class="token punctuation">,</span> BinaryOperation binary_op <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">InputIt</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">OutputIt</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">BinaryOperation</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">T</span> <span class="token operator">></span><span class="token keyword">constexpr</span> OutputIt <span class="token function">inclusive_scan</span><span class="token punctuation">(</span> InputIt first<span class="token punctuation">,</span> InputIt last<span class="token punctuation">,</span> OutputIt d_first<span class="token punctuation">,</span>                                   BinaryOperation binary_op<span class="token punctuation">,</span> T init <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="97-transform-reduce-应用一个函数对象，然后以乱序规约"><a href="#97-transform-reduce-应用一个函数对象，然后以乱序规约" class="headerlink" title="97. transform_reduce 应用一个函数对象，然后以乱序规约"></a>97. transform_reduce 应用一个函数对象，然后以乱序规约</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">InputIt1</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">InputIt2</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">></span><span class="token keyword">constexpr</span> T <span class="token function">transform_reduce</span><span class="token punctuation">(</span>InputIt1 first1<span class="token punctuation">,</span> InputIt1 last1<span class="token punctuation">,</span> InputIt2 first2<span class="token punctuation">,</span> T init<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//内积</span><span class="token comment">// 应用 binary_op2 到来自范围 [first; last) 和始于 first2 的范围的每对元素，并在 binary_op1 上与初始值 init 一同规约结果</span><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">InputIt1</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">InputIt2</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">BinaryOp1</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">BinaryOp2</span><span class="token operator">></span><span class="token keyword">constexpr</span> T <span class="token function">transform_reduce</span><span class="token punctuation">(</span>InputIt1 first1<span class="token punctuation">,</span> InputIt1 last1<span class="token punctuation">,</span> InputIt2 first2<span class="token punctuation">,</span>                             T init<span class="token punctuation">,</span> BinaryOp1 binary_op1<span class="token punctuation">,</span> BinaryOp2 binary_op2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 应用 unary_op 到范围 [first; last) 中的每个元素，并在 binary_op 上与初始值 init 一同规约结果（可以以未指定行为重排聚合）。</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">InputIt</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">BinaryOp</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">UnaryOp</span><span class="token operator">></span><span class="token keyword">constexpr</span> T <span class="token function">transform_reduce</span><span class="token punctuation">(</span>InputIt first<span class="token punctuation">,</span> InputIt last<span class="token punctuation">,</span>                             T init<span class="token punctuation">,</span> BinaryOp binop<span class="token punctuation">,</span> UnaryOp unary_op<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="98-transform-exclusive-scan-应用一个函数对象，然后进行排除扫描"><a href="#98-transform-exclusive-scan-应用一个函数对象，然后进行排除扫描" class="headerlink" title="98. transform_exclusive_scan 应用一个函数对象，然后进行排除扫描"></a>98. transform_exclusive_scan 应用一个函数对象，然后进行排除扫描</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">InputIt</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">OutputIt</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">BinaryOperation</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">UnaryOperation</span><span class="token operator">></span><span class="token keyword">constexpr</span> OutputIt <span class="token function">transform_exclusive_scan</span><span class="token punctuation">(</span> InputIt first<span class="token punctuation">,</span> InputIt last<span class="token punctuation">,</span> OutputIt d_first<span class="token punctuation">,</span>                                             T init<span class="token punctuation">,</span> BinaryOperation binary_op<span class="token punctuation">,</span>                                             UnaryOperation unary_op<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="99-transform-inclusive-scan-应用一个函数对象，然后进行包含扫描"><a href="#99-transform-inclusive-scan-应用一个函数对象，然后进行包含扫描" class="headerlink" title="99. transform_inclusive_scan 应用一个函数对象，然后进行包含扫描"></a>99. transform_inclusive_scan 应用一个函数对象，然后进行包含扫描</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">InputIt</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">OutputIt</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">BinaryOperation</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">UnaryOperation</span> <span class="token operator">></span><span class="token keyword">constexpr</span> OutputIt <span class="token function">transform_inclusive_scan</span><span class="token punctuation">(</span> InputIt first<span class="token punctuation">,</span> InputIt last<span class="token punctuation">,</span> OutputIt d_first<span class="token punctuation">,</span>                                             BinaryOperation binary_op<span class="token punctuation">,</span> UnaryOperation unary_op <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">InputIt</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">OutputIt</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">BinaryOperation</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">UnaryOperation</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">T</span> <span class="token operator">></span><span class="token keyword">constexpr</span> OutputIt <span class="token function">transform_inclusive_scan</span><span class="token punctuation">(</span> InputIt first<span class="token punctuation">,</span> InputIt last<span class="token punctuation">,</span> OutputIt d_first<span class="token punctuation">,</span>                                             BinaryOperation binary_op<span class="token punctuation">,</span> UnaryOperation unary_op<span class="token punctuation">,</span>                                             T init <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="迭代器操作"><a href="#迭代器操作" class="headerlink" title="迭代器操作"></a>迭代器操作</h3><h3 id="advance-令迭代器前进给定的距离"><a href="#advance-令迭代器前进给定的距离" class="headerlink" title="advance 令迭代器前进给定的距离"></a>advance 令迭代器前进给定的距离</h3><p>增加给定的迭代器 it 以 n 个元素的步长。若 n 为负，则迭代器自减。该情况下， InputIt 必须满足遗留双向迭代器 (LegacyBidirectionalIterator) 的要求，否则行为未定义。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">InputIt</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">Distance</span> <span class="token operator">></span><span class="token keyword">constexpr</span> <span class="token keyword">void</span> <span class="token function">advance</span><span class="token punctuation">(</span> InputIt<span class="token operator">&amp;</span> it<span class="token punctuation">,</span> Distance n <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="distance-返回两个迭代器间的距离"><a href="#distance-返回两个迭代器间的距离" class="headerlink" title="distance 返回两个迭代器间的距离"></a>distance 返回两个迭代器间的距离</h3><p>InputIt 必须满足遗留输入迭代器 (LegacyInputIterator) 的要求。若 InputIt 额外满足遗留随机访问迭代器 (LegacyRandomAccessIterator) 的要求则操作更高效。</p><p>从 <code>first</code> 走到 <code>last</code> 所需的自增数。若使用随机访问迭代器且 <code>first</code> 可从 <code>last</code> 抵达，则值可能为负。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">InputIt</span> <span class="token operator">></span><span class="token keyword">constexpr</span> <span class="token keyword">typename</span> <span class="token class-name">std</span><span class="token double-colon punctuation">::</span>iterator_traits<span class="token operator">&lt;</span>InputIt<span class="token operator">></span><span class="token double-colon punctuation">::</span>difference_type    <span class="token function">distance</span><span class="token punctuation">(</span> InputIt first<span class="token punctuation">,</span> InputIt last <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="next-令迭代器自增"><a href="#next-令迭代器自增" class="headerlink" title="next 令迭代器自增"></a>next 令迭代器自增</h3><p>返回迭代器 it 的第 n 个后继。InputIt 必须满足遗留输入迭代器 (LegacyInputIterator) 的要求。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">InputIt</span> <span class="token operator">></span><span class="token keyword">constexpr</span> InputIt <span class="token function">next</span><span class="token punctuation">(</span> InputIt it<span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">std</span><span class="token double-colon punctuation">::</span>iterator_traits<span class="token operator">&lt;</span>InputIt<span class="token operator">></span><span class="token double-colon punctuation">::</span>difference_type n <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="prev-令迭代器自减"><a href="#prev-令迭代器自减" class="headerlink" title="prev 令迭代器自减"></a>prev 令迭代器自减</h3><p>返回迭代器 <code>it</code> 的第 <code>n</code> 个前驱。BidirIt 必须满足遗留双向迭代器 (LegacyBidirectionalIterator) 的要求。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">BidirIt</span> <span class="token operator">></span><span class="token keyword">constexpr</span> BidirIt <span class="token function">prev</span><span class="token punctuation">(</span> BidirIt it<span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">std</span><span class="token double-colon punctuation">::</span>iterator_traits<span class="token operator">&lt;</span>BidirIt<span class="token operator">></span><span class="token double-colon punctuation">::</span>difference_type n <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><hr><h3 id="未初始化内存上的操作"><a href="#未初始化内存上的操作" class="headerlink" title="未初始化内存上的操作"></a>未初始化内存上的操作</h3><p>TODO</p><hr><h3 id="C库"><a href="#C库" class="headerlink" title="C库"></a>C库</h3><p>定义于头文件 <code>&lt;cstdlib&gt;</code></p><h4 id="qsort-对未指定类型的元素的一个范围进行排序"><a href="#qsort-对未指定类型的元素的一个范围进行排序" class="headerlink" title="qsort 对未指定类型的元素的一个范围进行排序"></a>qsort 对未指定类型的元素的一个范围进行排序</h4><p>comp - 比较函数。若首个参数<em>小于</em>第二个，则返回负整数值，若首个参数<em>大于</em>第二个，则返回正整数值，若两参数等价，则返回零。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">using</span> compare <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>a<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>b<span class="token punctuation">)</span><span class="token keyword">void</span> <span class="token function">qsort</span><span class="token punctuation">(</span> <span class="token keyword">void</span> <span class="token operator">*</span>ptr<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>size_t count<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>size_t size<span class="token punctuation">,</span> compare<span class="token operator">*</span> comp <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="bsearch-在未指定类型的数组中搜索元素"><a href="#bsearch-在未指定类型的数组中搜索元素" class="headerlink" title="bsearch 在未指定类型的数组中搜索元素"></a>bsearch 在未指定类型的数组中搜索元素</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">using</span> compare <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>a<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>b<span class="token punctuation">)</span><span class="token comment">// key - 指向要搜索的元素的指针, ptr - 指向要检验的数组的指针</span><span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">bsearch</span><span class="token punctuation">(</span> <span class="token keyword">const</span> <span class="token keyword">void</span><span class="token operator">*</span> key<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span><span class="token operator">*</span> ptr<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>size_t count<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>size_t size<span class="token punctuation">,</span> compare<span class="token operator">*</span> comp <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ STL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>README</title>
      <link href="/README.html"/>
      <url>/README.html</url>
      
        <content type="html"><![CDATA[<p>学习C、C++、Linux、网络等博客文章。</p><p>博客: nongguangxin.cn/nongguangxin.gitee.io</p><p>`</p>]]></content>
      
      
      
        <tags>
            
            <tag> README </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++ string</title>
      <link href="/C-string.html"/>
      <url>/C-string.html</url>
      
        <content type="html"><![CDATA[<h2 id="C-string"><a href="#C-string" class="headerlink" title="C++ string"></a>C++ string</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">CharT</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">Traits</span> <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>char_traits<span class="token operator">&lt;</span>CharT<span class="token operator">></span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">Allocator</span> <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>allocator<span class="token operator">&lt;</span>CharT<span class="token operator">></span><span class="token operator">></span> <span class="token keyword">class</span> <span class="token class-name">basic_string</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> pmr <span class="token punctuation">&#123;</span>    <span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">CharT</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">Traits</span> <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>char_traits<span class="token operator">&lt;</span>CharT<span class="token operator">>></span>    <span class="token keyword">using</span> basic_string <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>basic_string<span class="token operator">&lt;</span> CharT<span class="token punctuation">,</span> Traits<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>polymorphic_allocator<span class="token operator">&lt;</span>CharT<span class="token operator">>></span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>类模板 <code>basic_string</code> 存储并操纵作为非数组平凡标准布局类型的仿 char 对象序列。</p><h2 id="成员类型"><a href="#成员类型" class="headerlink" title="成员类型"></a>成员类型</h2><table><thead><tr><th>成员类型</th><th>定义</th></tr></thead><tbody><tr><td><code>traits_type</code></td><td>Traits</td></tr><tr><td><code>value_type</code></td><td><code>CharT</code></td></tr><tr><td><code>allocator_type</code></td><td><code>Allocator</code></td></tr><tr><td><code>size_type</code></td><td><code>std::allocator_traits&lt;Allocator&gt;::size_type</code></td></tr><tr><td><code>difference_type</code></td><td><code>std::allocator_traits&lt;Allocator&gt;::difference_type</code></td></tr><tr><td><code>reference</code></td><td><code>value_type&amp;</code></td></tr><tr><td><code>const_reference</code></td><td><code>const value_type&amp;</code></td></tr><tr><td><code>pointer</code></td><td><code>std::allocator_traits&lt;Allocator&gt;::pointer</code></td></tr><tr><td><code>const_pointer</code></td><td><code>std::allocator_traits&lt;Allocator&gt;::const_pointer</code></td></tr><tr><td><code>iterator</code></td><td>遗留随机访问迭代器 (LegacyRandomAccessIterator)</td></tr><tr><td><code>const_iterator</code></td><td>常随机访问迭代器</td></tr><tr><td><code>reverse_iterator</code></td><td><code>std::reverse_iterator&lt;iterator&gt;</code></td></tr><tr><td><code>const_reverse_iterator</code></td><td><code>std::reverse_iterator&lt;const_iterator&gt;</code></td></tr></tbody></table><h2 id="构造"><a href="#构造" class="headerlink" title="构造"></a>构造</h2><h4 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h4><ol><li><p>创建一个空string. </p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">constexpr</span> <span class="token function">basic_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">noexcept</span><span class="token punctuation">(</span><span class="token keyword">noexcept</span><span class="token punctuation">(</span> <span class="token function">Allocator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">basic_string</span><span class="token punctuation">(</span> <span class="token function">Allocator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">explicit</span> <span class="token keyword">constexpr</span> <span class="token function">basic_string</span><span class="token punctuation">(</span> <span class="token keyword">const</span> Allocator<span class="token operator">&amp;</span> alloc <span class="token punctuation">)</span> <span class="token keyword">noexcept</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>创建count个值为ch的容器</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">constexpr</span> <span class="token function">basic_string</span><span class="token punctuation">(</span> size_type count<span class="token punctuation">,</span> CharT ch<span class="token punctuation">,</span> <span class="token keyword">const</span> Allocator<span class="token operator">&amp;</span> alloc <span class="token operator">=</span> <span class="token function">Allocator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>以字符串s创建。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">constexpr</span> <span class="token function">basic_string</span><span class="token punctuation">(</span> <span class="token keyword">const</span> CharT<span class="token operator">*</span> s<span class="token punctuation">,</span> <span class="token keyword">const</span> Allocator<span class="token operator">&amp;</span> alloc <span class="token operator">=</span> <span class="token function">Allocator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>初始化列表</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">constexpr</span> <span class="token function">basic_string</span><span class="token punctuation">(</span> std<span class="token double-colon punctuation">::</span>initializer_list<span class="token operator">&lt;</span>CharT<span class="token operator">></span> ilist<span class="token punctuation">,</span>                        <span class="token keyword">const</span> Allocator<span class="token operator">&amp;</span> alloc <span class="token operator">=</span> <span class="token function">Allocator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>以另一个字符串的子串创建</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">constexpr</span> <span class="token function">basic_string</span><span class="token punctuation">(</span> <span class="token keyword">const</span> basic_string<span class="token operator">&amp;</span> other<span class="token punctuation">,</span> size_type pos<span class="token punctuation">,</span>                        <span class="token keyword">const</span> Allocator<span class="token operator">&amp;</span> alloc <span class="token operator">=</span> <span class="token function">Allocator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>以一对迭代器构建</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">InputIt</span> <span class="token operator">></span><span class="token keyword">constexpr</span> <span class="token function">basic_string</span><span class="token punctuation">(</span> InputIt first<span class="token punctuation">,</span> InputIt last<span class="token punctuation">,</span> <span class="token keyword">const</span> Allocator<span class="token operator">&amp;</span> alloc <span class="token operator">=</span> <span class="token function">Allocator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>以s的前面count个元素构建</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">constexpr</span> <span class="token function">basic_string</span><span class="token punctuation">(</span> <span class="token keyword">const</span> CharT<span class="token operator">*</span> s<span class="token punctuation">,</span>size_type count<span class="token punctuation">,</span>                        <span class="token keyword">const</span> Allocator<span class="token operator">&amp;</span> alloc <span class="token operator">=</span> <span class="token function">Allocator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>以其他的vector容器创建</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">constexpr</span> <span class="token function">basic_string</span><span class="token punctuation">(</span> <span class="token keyword">const</span> basic_string<span class="token operator">&amp;</span> other <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>还可以使用移动语义</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">constexpr</span> <span class="token function">basic_string</span><span class="token punctuation">(</span> basic_string<span class="token operator">&amp;&amp;</span> other <span class="token punctuation">)</span> <span class="token keyword">noexcept</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>其他可隐式转换为string_view的类型</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span> <span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">T</span> <span class="token operator">></span><span class="token keyword">explicit</span> <span class="token keyword">constexpr</span> <span class="token function">basic_string</span><span class="token punctuation">(</span> <span class="token keyword">const</span> T<span class="token operator">&amp;</span> t<span class="token punctuation">,</span> <span class="token keyword">const</span> Allocator<span class="token operator">&amp;</span> alloc <span class="token operator">=</span> <span class="token function">Allocator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">template</span> <span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">T</span> <span class="token operator">></span><span class="token keyword">constexpr</span> <span class="token function">basic_string</span><span class="token punctuation">(</span> <span class="token keyword">const</span> T<span class="token operator">&amp;</span> t<span class="token punctuation">,</span> size_type pos<span class="token punctuation">,</span> size_type n<span class="token punctuation">,</span>                        <span class="token keyword">const</span> Allocator<span class="token operator">&amp;</span> alloc <span class="token operator">=</span> <span class="token function">Allocator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="operator"><a href="#operator" class="headerlink" title="operator="></a>operator=</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">constexpr</span> basic_string<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span> <span class="token keyword">const</span> basic_string<span class="token operator">&amp;</span> str <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">constexpr</span> basic_string<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span> basic_string<span class="token operator">&amp;&amp;</span> str <span class="token punctuation">)</span> <span class="token keyword">noexcept</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>allocator_traits<span class="token operator">&lt;</span>Allocator<span class="token operator">></span><span class="token double-colon punctuation">::</span>propagate_on_container_move_assignment<span class="token double-colon punctuation">::</span>value <span class="token operator">||</span> std<span class="token double-colon punctuation">::</span>allocator_traits<span class="token operator">&lt;</span>Allocator<span class="token operator">></span><span class="token double-colon punctuation">::</span>is_always_equal<span class="token double-colon punctuation">::</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">constexpr</span> basic_string<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span> <span class="token keyword">const</span> CharT<span class="token operator">*</span> s <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">constexpr</span> basic_string<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span> CharT ch <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">constexpr</span> basic_string<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span> std<span class="token double-colon punctuation">::</span>initializer_list<span class="token operator">&lt;</span>CharT<span class="token operator">></span> ilist <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">></span><span class="token keyword">constexpr</span> basic_string<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span> <span class="token keyword">const</span> T<span class="token operator">&amp;</span> t <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="assign"><a href="#assign" class="headerlink" title="assign"></a>assign</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">constexpr</span> basic_string<span class="token operator">&amp;</span> <span class="token function">assign</span><span class="token punctuation">(</span> size_type count<span class="token punctuation">,</span> CharT ch <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">constexpr</span> basic_string<span class="token operator">&amp;</span> <span class="token function">assign</span><span class="token punctuation">(</span> <span class="token keyword">const</span> basic_string<span class="token operator">&amp;</span> str <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">constexpr</span> basic_string<span class="token operator">&amp;</span> <span class="token function">assign</span><span class="token punctuation">(</span> <span class="token keyword">const</span> basic_string<span class="token operator">&amp;</span> str<span class="token punctuation">,</span> size_type pos<span class="token punctuation">,</span> size_type count <span class="token operator">=</span> npos<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">constexpr</span> basic_string<span class="token operator">&amp;</span> <span class="token function">assign</span><span class="token punctuation">(</span> basic_string<span class="token operator">&amp;&amp;</span> str <span class="token punctuation">)</span> <span class="token keyword">noexcept</span><span class="token punctuation">(</span><span class="token comment">/* see below */</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">constexpr</span> basic_string<span class="token operator">&amp;</span> <span class="token function">assign</span><span class="token punctuation">(</span> <span class="token keyword">const</span> CharT<span class="token operator">*</span> s<span class="token punctuation">,</span> size_type count <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">constexpr</span> basic_string<span class="token operator">&amp;</span> <span class="token function">assign</span><span class="token punctuation">(</span> <span class="token keyword">const</span> CharT<span class="token operator">*</span> s <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">InputIt</span> <span class="token operator">></span><span class="token keyword">constexpr</span> basic_string<span class="token operator">&amp;</span> <span class="token function">assign</span><span class="token punctuation">(</span> InputIt first<span class="token punctuation">,</span> InputIt last <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">constexpr</span> basic_string<span class="token operator">&amp;</span> <span class="token function">assign</span><span class="token punctuation">(</span> std<span class="token double-colon punctuation">::</span>initializer_list<span class="token operator">&lt;</span>CharT<span class="token operator">></span> ilist <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">template</span> <span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">T</span> <span class="token operator">></span><span class="token keyword">constexpr</span> basic_string<span class="token operator">&amp;</span> <span class="token function">assign</span><span class="token punctuation">(</span> <span class="token keyword">const</span> T<span class="token operator">&amp;</span> t <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">template</span> <span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">T</span> <span class="token operator">></span><span class="token keyword">constexpr</span> basic_string<span class="token operator">&amp;</span> <span class="token function">assign</span><span class="token punctuation">(</span> <span class="token keyword">const</span> T<span class="token operator">&amp;</span> t<span class="token punctuation">,</span> size_type pos<span class="token punctuation">,</span> size_type count <span class="token operator">=</span> npos<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="get-allocator"><a href="#get-allocator" class="headerlink" title="get_allocator"></a>get_allocator</h3><p>返回与容器关联的分配器。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">constexpr</span> allocator_type <span class="token function">get_allocator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="元素访问"><a href="#元素访问" class="headerlink" title="元素访问"></a>元素访问</h2><h3 id="at"><a href="#at" class="headerlink" title="at"></a>at</h3><p>返回位于指定位置 <code>pos</code> 的元素的引用，有边界检查。若 <code>pos</code> 不在容器范围内，则抛出 std::out_of_range 类型的异常。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">constexpr</span> reference       <span class="token function">at</span><span class="token punctuation">(</span> size_type pos <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">constexpr</span> const_reference <span class="token function">at</span><span class="token punctuation">(</span> size_type pos <span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="operator-1"><a href="#operator-1" class="headerlink" title="operator[]"></a>operator[]</h3><p>返回位于指定位置 <code>pos</code> 的元素的引用。不进行边界检查。通过此运算符访问不存在的元素是未定义行为。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">constexpr</span> reference       <span class="token keyword">operator</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span> size_type pos <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">constexpr</span> const_reference <span class="token keyword">operator</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span> size_type pos <span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="front"><a href="#front" class="headerlink" title="front"></a>front</h3><p>返回到容器首元素的引用。在空容器上对 <code>front</code> 的调用是未定义的。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">constexpr</span> CharT<span class="token operator">&amp;</span> <span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">constexpr</span> <span class="token keyword">const</span> CharT<span class="token operator">&amp;</span> <span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="back"><a href="#back" class="headerlink" title="back"></a>back</h3><p>返回到容器中最后一个元素的引用。在空容器上调用 <code>back</code> 导致未定义行为。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">constexpr</span> CharT<span class="token operator">&amp;</span> <span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">constexpr</span> <span class="token keyword">const</span> CharT<span class="token operator">&amp;</span> <span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="data"><a href="#data" class="headerlink" title="data"></a>data</h3><p>返回指向作为元素存储工作的底层数组的指针。对于非空容器，返回的指针与首元素地址比较相等。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">constexpr</span> <span class="token keyword">const</span> CharT<span class="token operator">*</span> <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">noexcept</span><span class="token punctuation">;</span><span class="token keyword">constexpr</span> CharT<span class="token operator">*</span> <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">noexcept</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="c-str"><a href="#c-str" class="headerlink" title="c_str"></a>c_str</h3><p>返回字符串的不可修改的 C 字符数组版本，通过 <code>c_str()</code> 写入字符数组是未定义行为。<code>c_str()</code> 与 data() 同一功能。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">constexpr</span> <span class="token keyword">const</span> CharT<span class="token operator">*</span> <span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">noexcept</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="operator-basic-string-view"><a href="#operator-basic-string-view" class="headerlink" title="operator basic_string_view"></a>operator basic_string_view</h3><p>返回到整个字符串的不可修改的 <code>basic_string_view</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">constexpr</span> <span class="token keyword">operator</span> std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">basic_string_view</span><span class="token generic class-name"><span class="token operator">&lt;</span>CharT<span class="token punctuation">,</span> Traits<span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">noexcept</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h2><h3 id="begin-end"><a href="#begin-end" class="headerlink" title="begin - end"></a>begin - end</h3><p>返回指向容器开头和结尾的迭代器。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">constexpr</span> iterator <span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">noexcept</span><span class="token punctuation">;</span><span class="token keyword">constexpr</span> const_iterator <span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">noexcept</span><span class="token punctuation">;</span><span class="token keyword">constexpr</span> iterator <span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">noexcept</span><span class="token punctuation">;</span><span class="token keyword">constexpr</span> const_iterator <span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">noexcept</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="cbegin-cend"><a href="#cbegin-cend" class="headerlink" title="cbegin - cend"></a>cbegin - cend</h3><p>返回指向容器开头和结尾的常量迭代器。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">constexpr</span> const_iterator <span class="token function">cbegin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">noexcept</span><span class="token punctuation">;</span><span class="token keyword">constexpr</span> const_iterator <span class="token function">cend</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">noexcept</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="rbegin-rend"><a href="#rbegin-rend" class="headerlink" title="rbegin - rend"></a>rbegin - rend</h3><p>返回指向容器开头和结尾的反向迭代器。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">constexpr</span> reverse_iterator <span class="token function">rbegin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">noexcept</span><span class="token punctuation">;</span><span class="token keyword">constexpr</span> const_reverse_iterator <span class="token function">rbegin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">noexcept</span><span class="token punctuation">;</span><span class="token keyword">constexpr</span> reverse_iterator <span class="token function">rend</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">noexcept</span><span class="token punctuation">;</span><span class="token keyword">constexpr</span> const_reverse_iterator <span class="token function">rend</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">noexcept</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="crbegin-crend"><a href="#crbegin-crend" class="headerlink" title="crbegin - crend"></a>crbegin - crend</h3><p>返回指向容器开头和结尾的反向常量迭代器。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">constexpr</span> const_reverse_iterator <span class="token function">crbegin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">noexcept</span><span class="token punctuation">;</span><span class="token keyword">constexpr</span> const_reverse_iterator <span class="token function">crend</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">noexcept</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="容量"><a href="#容量" class="headerlink" title="容量"></a>容量</h2><h3 id="empty"><a href="#empty" class="headerlink" title="empty"></a>empty</h3><p>判断容器是否为空，空则为true</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">s<span class="token punctuation">[</span><span class="token punctuation">[</span>nodiscard<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token keyword">constexpr</span> <span class="token keyword">bool</span> <span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">noexcept</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="size"><a href="#size" class="headerlink" title="size"></a>size</h3><p>返回容器中的元素数, 即 <code>std::distance(begin(), end()) </code>。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">constexpr</span> size_type <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">noexcept</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="length"><a href="#length" class="headerlink" title="length"></a>length</h3><p>返回容器中的元素数</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">constexpr</span> size_type <span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">noexcept</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="max-size"><a href="#max-size" class="headerlink" title="max_size"></a>max_size</h3><p>返回根据系统或库实现限制的容器可保有的元素最大数量</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">constexpr</span> size_type <span class="token function">max_size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">noexcept</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="reserve"><a href="#reserve" class="headerlink" title="reserve"></a>reserve</h3><p>增加 <code>vector</code> 的容量到大于或等于 <code>new_cap</code> 的值。若 <code>new_cap</code> 大于当前的 capacity() ，则分配新存储.函数无返回值。不可用于减少容量。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">constexpr</span> <span class="token keyword">void</span> <span class="token function">reserve</span><span class="token punctuation">(</span> size_type new_cap <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="capacity"><a href="#capacity" class="headerlink" title="capacity"></a>capacity</h3><p>返回容器当前已为之分配空间的元素数。取决于实现。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">constexpr size_type capacity() const noexcept;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="shrink-to-fit"><a href="#shrink-to-fit" class="headerlink" title="shrink_to_fit"></a>shrink_to_fit</h3><p>请求移除未使用的容量。它是减少 <code>capacity()</code> 到 <code>size()</code>非强制性请求。请求是否达成依赖于实现。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">constexpr void shrink_to_fit();<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><h3 id="clear"><a href="#clear" class="headerlink" title="clear"></a>clear</h3><p>擦除所有元素。此调用后 <code>size()</code> 返回零。非法化任何指代所含元素的引用、指针或迭代器。任何尾后迭代器亦被非法化</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">constexpr</span> <span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">noexcept</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="insert"><a href="#insert" class="headerlink" title="insert"></a>insert</h3><p>插入元素到容器中的指定位置。</p><p>1.在index前插入s</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">constexpr basic_string&amp; insert( size_type index, const CharT* s )<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2.在 <code>pos</code> 前插入 <code>ch</code> 的 <code>count</code> 个副本。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">constexpr basic_string&amp; insert( size_type index, size_type count, CharT ch );<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3.在 <code>index</code>插入<code>[s, s+count]</code> .</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">constexpr basic_string&amp; insert( size_type index, const CharT* s, size_type count );<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>4.在 <code>index</code>处插入<code>str</code>. </p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">constexpr</span> basic_string<span class="token operator">&amp;</span> <span class="token function">insert</span><span class="token punctuation">(</span> size_type index<span class="token punctuation">,</span> <span class="token keyword">const</span> basic_string<span class="token operator">&amp;</span> str <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>5.在<code>index</code>处插入<code>str[index_str, index_str+count]</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">constexpr</span> basic_string<span class="token operator">&amp;</span> <span class="token function">insert</span><span class="token punctuation">(</span> size_type index<span class="token punctuation">,</span> <span class="token keyword">const</span> basic_string<span class="token operator">&amp;</span> str<span class="token punctuation">,</span>                                size_type index_str<span class="token punctuation">,</span> size_type count <span class="token operator">=</span> npos<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>6.在<code>pos</code>前插入<code>ch</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">constexpr</span> iterator <span class="token function">insert</span><span class="token punctuation">(</span> const_iterator pos<span class="token punctuation">,</span> CharT ch <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>7.在<code>pos</code>前<code>count</code>个<code>ch</code>.</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">constexpr iterator insert( const_iterator pos, size_type count, CharT ch );<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>8.在<code>pos</code>前插入<code>[first, last]</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">InputIt</span> <span class="token operator">></span><span class="token keyword">constexpr</span> iterator <span class="token function">insert</span><span class="token punctuation">(</span> const_iterator pos<span class="token punctuation">,</span> InputIt first<span class="token punctuation">,</span> InputIt last <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>9.在<code>pos</code>前插入<code>ilist</code>.</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">constexpr</span> iterator <span class="token function">insert</span><span class="token punctuation">(</span> const_iterator pos<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>initializer_list<span class="token operator">&lt;</span>CharT<span class="token operator">></span> ilist <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>10.在pos前插入t</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span> <span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">T</span> <span class="token operator">></span><span class="token keyword">constexpr</span> basic_string<span class="token operator">&amp;</span> <span class="token function">insert</span><span class="token punctuation">(</span> size_type pos<span class="token punctuation">,</span> <span class="token keyword">const</span> T<span class="token operator">&amp;</span> t <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>11.在pos前插入<code>t[index_str, index+count]</code>.</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span> <span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">T</span> <span class="token operator">></span><span class="token keyword">constexpr</span> basic_string<span class="token operator">&amp;</span> <span class="token function">insert</span><span class="token punctuation">(</span> size_type index<span class="token punctuation">,</span> <span class="token keyword">const</span> T<span class="token operator">&amp;</span> t<span class="token punctuation">,</span>                                size_type index_str<span class="token punctuation">,</span> size_type count <span class="token operator">=</span> npos<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="erase"><a href="#erase" class="headerlink" title="erase"></a>erase</h3><p>从容器擦除指定的元素。</p><p>1.移除<code>[index, index+count]</code>.</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">constexpr</span> basic_string<span class="token operator">&amp;</span> <span class="token function">erase</span><span class="token punctuation">(</span> size_type index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> size_type count <span class="token operator">=</span> npos <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2.移除位于<code>pos</code>元素。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">constexpr</span> iterator <span class="token function">erase</span><span class="token punctuation">(</span> const_iterator position <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3.移除<code>[first, last]</code>.</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">constexpr</span> iterator <span class="token function">erase</span><span class="token punctuation">(</span> const_iterator first<span class="token punctuation">,</span> const_iterator last <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="push-back"><a href="#push-back" class="headerlink" title="push_back"></a>push_back</h3><p>添加元素到容器尾。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">constexpr void push_back( CharT ch );<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="pop-back"><a href="#pop-back" class="headerlink" title="pop_back"></a>pop_back</h3><p>移除容器的末元素。在空容器上调用 <code>pop_back</code> 导致未定义行为。非法化指向末元素的迭代器和引用，以及 <code>end()</code> 迭代器。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">constexpr void pop_back();<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="append"><a href="#append" class="headerlink" title="append"></a>append</h3><p>后附字符到结尾</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">constexpr</span> basic_string<span class="token operator">&amp;</span> <span class="token function">append</span><span class="token punctuation">(</span> size_type count<span class="token punctuation">,</span> CharT ch <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">constexpr</span> basic_string<span class="token operator">&amp;</span> <span class="token function">append</span><span class="token punctuation">(</span> <span class="token keyword">const</span> basic_string<span class="token operator">&amp;</span> str <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">constexpr</span> basic_string<span class="token operator">&amp;</span> <span class="token function">append</span><span class="token punctuation">(</span> <span class="token keyword">const</span> basic_string<span class="token operator">&amp;</span> str<span class="token punctuation">,</span> size_type pos<span class="token punctuation">,</span> size_type count <span class="token operator">=</span> npos <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">constexpr</span> basic_string<span class="token operator">&amp;</span> <span class="token function">append</span><span class="token punctuation">(</span> <span class="token keyword">const</span> CharT<span class="token operator">*</span> s<span class="token punctuation">,</span> size_type count <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">constexpr</span> basic_string<span class="token operator">&amp;</span> <span class="token function">append</span><span class="token punctuation">(</span> <span class="token keyword">const</span> CharT<span class="token operator">*</span> s <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">InputIt</span> <span class="token operator">></span> <span class="token keyword">constexpr</span> basic_string<span class="token operator">&amp;</span> <span class="token function">append</span><span class="token punctuation">(</span> InputIt first<span class="token punctuation">,</span> InputIt last <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">constexpr</span> basic_string<span class="token operator">&amp;</span> <span class="token function">append</span><span class="token punctuation">(</span> std<span class="token double-colon punctuation">::</span>initializer_list<span class="token operator">&lt;</span>CharT<span class="token operator">></span> ilist <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">template</span> <span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">T</span> <span class="token operator">></span> <span class="token keyword">constexpr</span> basic_string<span class="token operator">&amp;</span> <span class="token function">append</span><span class="token punctuation">(</span> <span class="token keyword">const</span> T<span class="token operator">&amp;</span> t <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">template</span> <span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">T</span> <span class="token operator">></span> <span class="token keyword">constexpr</span> basic_string<span class="token operator">&amp;</span> <span class="token function">append</span><span class="token punctuation">(</span> <span class="token keyword">const</span> T<span class="token operator">&amp;</span> t<span class="token punctuation">,</span> size_type pos<span class="token punctuation">,</span> size_type count <span class="token operator">=</span> npos <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="operator-2"><a href="#operator-2" class="headerlink" title="operator+="></a>operator+=</h3><p>后附字符到结尾</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">constexpr</span> basic_string<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">+=</span><span class="token punctuation">(</span> <span class="token keyword">const</span> basic_string<span class="token operator">&amp;</span> str <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">constexpr</span> basic_string<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">+=</span><span class="token punctuation">(</span> CharT ch <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">constexpr</span> basic_string<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">+=</span><span class="token punctuation">(</span> <span class="token keyword">const</span> CharT<span class="token operator">*</span> s <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">constexpr</span> basic_string<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">+=</span><span class="token punctuation">(</span> std<span class="token double-colon punctuation">::</span>initializer_list<span class="token operator">&lt;</span>CharT<span class="token operator">></span> ilist <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">template</span> <span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">T</span> <span class="token operator">></span> <span class="token keyword">constexpr</span> basic_string<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">+=</span><span class="token punctuation">(</span> <span class="token keyword">const</span> T<span class="token operator">&amp;</span> t <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="compare"><a href="#compare" class="headerlink" title="compare"></a>compare</h3><p>比较二个字符串. 若<code>this&gt;str</code>，则返回正值；<code>this == str</code>返回0.</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">constexpr</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span> <span class="token keyword">const</span> basic_string<span class="token operator">&amp;</span> str <span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">noexcept</span><span class="token punctuation">;</span><span class="token keyword">constexpr</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span> size_type pos1<span class="token punctuation">,</span> size_type count1<span class="token punctuation">,</span> <span class="token keyword">const</span> basic_string<span class="token operator">&amp;</span> str <span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span><span class="token keyword">constexpr</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span> size_type pos1<span class="token punctuation">,</span> size_type count1<span class="token punctuation">,</span> <span class="token keyword">const</span> basic_string<span class="token operator">&amp;</span> str<span class="token punctuation">,</span>                       size_type pos2<span class="token punctuation">,</span> size_type count2 <span class="token operator">=</span> npos <span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span><span class="token keyword">constexpr</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span> <span class="token keyword">const</span> CharT<span class="token operator">*</span> s <span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span><span class="token keyword">constexpr</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span> size_type pos1<span class="token punctuation">,</span> size_type count1<span class="token punctuation">,</span> <span class="token keyword">const</span> CharT<span class="token operator">*</span> s <span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span><span class="token keyword">constexpr</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span> size_type pos1<span class="token punctuation">,</span> size_type count1<span class="token punctuation">,</span>                       <span class="token keyword">const</span> CharT<span class="token operator">*</span> s<span class="token punctuation">,</span> size_type count2 <span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span><span class="token keyword">template</span> <span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">T</span> <span class="token operator">></span> <span class="token keyword">constexpr</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span> <span class="token keyword">const</span> T<span class="token operator">&amp;</span> t <span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">noexcept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">template</span> <span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">T</span> <span class="token operator">></span> <span class="token keyword">constexpr</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span> size_type pos1<span class="token punctuation">,</span> size_type count1<span class="token punctuation">,</span> <span class="token keyword">const</span> T<span class="token operator">&amp;</span> t <span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span><span class="token keyword">template</span> <span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">T</span> <span class="token operator">></span><span class="token keyword">constexpr</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span> size_type pos1<span class="token punctuation">,</span> size_type count1<span class="token punctuation">,</span> <span class="token keyword">const</span> T<span class="token operator">&amp;</span> t<span class="token punctuation">,</span>                       size_type pos2<span class="token punctuation">,</span> size_type count2 <span class="token operator">=</span> npos<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="starts-with"><a href="#starts-with" class="headerlink" title="starts_with"></a>starts_with</h3><p>检查 string 是否始于给定前缀</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">constexpr</span> <span class="token keyword">bool</span> <span class="token function">starts_with</span><span class="token punctuation">(</span> std<span class="token double-colon punctuation">::</span>basic_string_view<span class="token operator">&lt;</span>CharT<span class="token punctuation">,</span>Traits<span class="token operator">></span> sv <span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">noexcept</span><span class="token punctuation">;</span><span class="token keyword">constexpr</span> <span class="token keyword">bool</span> <span class="token function">starts_with</span><span class="token punctuation">(</span> CharT c <span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">noexcept</span><span class="token punctuation">;</span><span class="token keyword">constexpr</span> <span class="token keyword">bool</span> <span class="token function">starts_with</span><span class="token punctuation">(</span> <span class="token keyword">const</span> CharT<span class="token operator">*</span> s <span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="ends-with"><a href="#ends-with" class="headerlink" title="ends_with"></a>ends_with</h3><p>检查 string 是否终于给定后缀</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">constexpr</span> <span class="token keyword">bool</span> <span class="token function">ends_with</span><span class="token punctuation">(</span> std<span class="token double-colon punctuation">::</span>basic_string_view<span class="token operator">&lt;</span>CharT<span class="token punctuation">,</span>Traits<span class="token operator">></span> sv <span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">noexcept</span><span class="token punctuation">;</span><span class="token keyword">constexpr</span> <span class="token keyword">bool</span> <span class="token function">ends_with</span><span class="token punctuation">(</span> CharT c <span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">noexcept</span><span class="token punctuation">;</span><span class="token keyword">constexpr</span> <span class="token keyword">bool</span> <span class="token function">ends_with</span><span class="token punctuation">(</span> <span class="token keyword">const</span> CharT<span class="token operator">*</span> s <span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="contains"><a href="#contains" class="headerlink" title="contains"></a>contains</h3><p>检查字符串是否含有给定的子串或字符</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">constexpr</span> <span class="token keyword">bool</span> <span class="token function">contains</span><span class="token punctuation">(</span> std<span class="token double-colon punctuation">::</span>basic_string_view<span class="token operator">&lt;</span>CharT<span class="token punctuation">,</span>Traits<span class="token operator">></span> sv <span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">noexcept</span><span class="token punctuation">;</span><span class="token keyword">constexpr</span> <span class="token keyword">bool</span> <span class="token function">contains</span><span class="token punctuation">(</span> CharT c <span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">noexcept</span><span class="token punctuation">;</span><span class="token keyword">constexpr</span> <span class="token keyword">bool</span> <span class="token function">contains</span><span class="token punctuation">(</span> <span class="token keyword">const</span> CharT<span class="token operator">*</span> s <span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="replace"><a href="#replace" class="headerlink" title="replace"></a>replace</h3><p>替换字符串的指定部分</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">constexpr</span> basic_string<span class="token operator">&amp;</span> <span class="token function">replace</span><span class="token punctuation">(</span> size_type pos<span class="token punctuation">,</span> size_type count<span class="token punctuation">,</span> <span class="token keyword">const</span> basic_string<span class="token operator">&amp;</span> str <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">constexpr</span> basic_string<span class="token operator">&amp;</span> <span class="token function">replace</span><span class="token punctuation">(</span> const_iterator first<span class="token punctuation">,</span> const_iterator last<span class="token punctuation">,</span> <span class="token keyword">const</span> basic_string<span class="token operator">&amp;</span> str <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">constexpr</span> basic_string<span class="token operator">&amp;</span> <span class="token function">replace</span><span class="token punctuation">(</span> size_type pos<span class="token punctuation">,</span> size_type count<span class="token punctuation">,</span> <span class="token keyword">const</span> basic_string<span class="token operator">&amp;</span> str<span class="token punctuation">,</span>                                 size_type pos2<span class="token punctuation">,</span> size_type count2 <span class="token operator">=</span> npos <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">InputIt</span> <span class="token operator">></span><span class="token keyword">constexpr</span> basic_string<span class="token operator">&amp;</span> <span class="token function">replace</span><span class="token punctuation">(</span> const_iterator first<span class="token punctuation">,</span> const_iterator last<span class="token punctuation">,</span>                                 InputIt first2<span class="token punctuation">,</span> InputIt last2 <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">constexpr</span> basic_string<span class="token operator">&amp;</span> <span class="token function">replace</span><span class="token punctuation">(</span> size_type pos<span class="token punctuation">,</span> size_type count<span class="token punctuation">,</span>                                 <span class="token keyword">const</span> CharT<span class="token operator">*</span> cstr<span class="token punctuation">,</span> size_type count2 <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">constexpr</span> basic_string<span class="token operator">&amp;</span> <span class="token function">replace</span><span class="token punctuation">(</span> const_iterator first<span class="token punctuation">,</span> const_iterator last<span class="token punctuation">,</span>                                 <span class="token keyword">const</span> CharT<span class="token operator">*</span> cstr<span class="token punctuation">,</span> size_type count2 <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">constexpr</span> basic_string<span class="token operator">&amp;</span> <span class="token function">replace</span><span class="token punctuation">(</span> size_type pos<span class="token punctuation">,</span> size_type count<span class="token punctuation">,</span> <span class="token keyword">const</span> CharT<span class="token operator">*</span> cstr <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">constexpr</span> basic_string<span class="token operator">&amp;</span> <span class="token function">replace</span><span class="token punctuation">(</span> const_iterator first<span class="token punctuation">,</span> const_iterator last<span class="token punctuation">,</span><span class="token keyword">const</span> CharT<span class="token operator">*</span> cstr <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">constexpr</span> basic_string<span class="token operator">&amp;</span> <span class="token function">replace</span><span class="token punctuation">(</span> size_type pos<span class="token punctuation">,</span> size_type count<span class="token punctuation">,</span> size_type count2<span class="token punctuation">,</span> CharT ch <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">constexpr</span> basic_string<span class="token operator">&amp;</span> <span class="token function">replace</span><span class="token punctuation">(</span> const_iterator first<span class="token punctuation">,</span> const_iterator last<span class="token punctuation">,</span>                                 size_type count2<span class="token punctuation">,</span> CharT ch <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">constexpr</span> basic_string<span class="token operator">&amp;</span> <span class="token function">replace</span><span class="token punctuation">(</span> const_iterator first<span class="token punctuation">,</span> const_iterator last<span class="token punctuation">,</span>                                 std<span class="token double-colon punctuation">::</span>initializer_list<span class="token operator">&lt;</span>CharT<span class="token operator">></span> ilist <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">template</span> <span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">T</span> <span class="token operator">></span><span class="token keyword">constexpr</span> basic_string<span class="token operator">&amp;</span> <span class="token function">replace</span><span class="token punctuation">(</span> size_type pos<span class="token punctuation">,</span> size_type count<span class="token punctuation">,</span> <span class="token keyword">const</span> T<span class="token operator">&amp;</span> t <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">template</span> <span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">T</span> <span class="token operator">></span><span class="token keyword">constexpr</span> basic_string<span class="token operator">&amp;</span> <span class="token function">replace</span><span class="token punctuation">(</span> const_iterator first<span class="token punctuation">,</span> const_iterator last<span class="token punctuation">,</span> <span class="token keyword">const</span> T<span class="token operator">&amp;</span> t <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">template</span> <span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">T</span> <span class="token operator">></span><span class="token keyword">constexpr</span> basic_string<span class="token operator">&amp;</span> <span class="token function">replace</span><span class="token punctuation">(</span> size_type pos<span class="token punctuation">,</span> size_type count<span class="token punctuation">,</span> <span class="token keyword">const</span> T<span class="token operator">&amp;</span> t<span class="token punctuation">,</span>                                 size_type pos2<span class="token punctuation">,</span> size_type count2 <span class="token operator">=</span> npos <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="substr"><a href="#substr" class="headerlink" title="substr"></a>substr</h3><p>返回子串</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">constexpr</span> basic_string <span class="token function">substr</span><span class="token punctuation">(</span> size_type pos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> size_type count <span class="token operator">=</span> npos <span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="copy"><a href="#copy" class="headerlink" title="copy"></a>copy</h3><p>复制字符,返回值复制的字符数</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">constexpr</span> size_type <span class="token function">copy</span><span class="token punctuation">(</span> CharT<span class="token operator">*</span> dest<span class="token punctuation">,</span> size_type count<span class="token punctuation">,</span> size_type pos <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="resize"><a href="#resize" class="headerlink" title="resize"></a>resize</h3><p>重设容器大小以容纳 <code>count</code> 个元素.若当前元素大于 <code>count</code> ，则减小容器为其首 <code>count</code> 个元素。若当前容量小于count则插入默认 元素或指定的ch值。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">constexpr</span> <span class="token keyword">void</span> <span class="token function">resize</span><span class="token punctuation">(</span> size_type count <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">constexpr</span> <span class="token keyword">void</span> <span class="token function">resize</span><span class="token punctuation">(</span> size_type count<span class="token punctuation">,</span> CharT ch <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="swap"><a href="#swap" class="headerlink" title="swap"></a>swap</h3><p>将内容与其他容器交换。可能非法化所有迭代器和引用。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">constexpr</span> <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span> basic_string<span class="token operator">&amp;</span> other <span class="token punctuation">)</span> <span class="token keyword">noexcept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h2><h3 id="find"><a href="#find" class="headerlink" title="find"></a>find</h3><p>于字符串pos后寻找字符</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">constexpr</span> size_type <span class="token function">find</span><span class="token punctuation">(</span> <span class="token keyword">const</span> basic_string<span class="token operator">&amp;</span> str<span class="token punctuation">,</span> size_type pos <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">noexcept</span><span class="token punctuation">;</span><span class="token keyword">constexpr</span> size_type <span class="token function">find</span><span class="token punctuation">(</span> <span class="token keyword">const</span> CharT<span class="token operator">*</span> s<span class="token punctuation">,</span> size_type pos<span class="token punctuation">,</span> size_type count <span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span><span class="token keyword">constexpr</span> size_type <span class="token function">find</span><span class="token punctuation">(</span> <span class="token keyword">const</span> CharT<span class="token operator">*</span> s<span class="token punctuation">,</span> size_type pos <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span><span class="token keyword">constexpr</span> size_type <span class="token function">find</span><span class="token punctuation">(</span> CharT ch<span class="token punctuation">,</span> size_type pos <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">noexcept</span><span class="token punctuation">;</span><span class="token keyword">template</span> <span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">T</span> <span class="token operator">></span> <span class="token keyword">constexpr</span> size_type <span class="token function">find</span><span class="token punctuation">(</span> <span class="token keyword">const</span> T<span class="token operator">&amp;</span> t<span class="token punctuation">,</span> size_type pos <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">noexcept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="rfind"><a href="#rfind" class="headerlink" title="rfind"></a>rfind</h3><p>于字符串pos后寻找子串的最后一次出现,找到的子串的首字符位置，或若找不到这种子串则为 npos 。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">constexpr</span> size_type <span class="token function">rfind</span><span class="token punctuation">(</span> <span class="token keyword">const</span> basic_string<span class="token operator">&amp;</span> str<span class="token punctuation">,</span> size_type pos <span class="token operator">=</span> npos <span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">noexcept</span><span class="token punctuation">;</span><span class="token keyword">constexpr</span> size_type <span class="token function">rfind</span><span class="token punctuation">(</span> <span class="token keyword">const</span> CharT<span class="token operator">*</span> s<span class="token punctuation">,</span> size_type pos<span class="token punctuation">,</span> size_type count <span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span><span class="token keyword">constexpr</span> size_type <span class="token function">rfind</span><span class="token punctuation">(</span> <span class="token keyword">const</span> CharT<span class="token operator">*</span> s<span class="token punctuation">,</span> size_type pos <span class="token operator">=</span> npos <span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span><span class="token keyword">constexpr</span> size_type <span class="token function">rfind</span><span class="token punctuation">(</span> CharT ch<span class="token punctuation">,</span> size_type pos <span class="token operator">=</span> npos <span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">noexcept</span><span class="token punctuation">;</span><span class="token keyword">template</span> <span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">T</span> <span class="token operator">></span> <span class="token keyword">constexpr</span> size_type <span class="token function">rfind</span><span class="token punctuation">(</span> <span class="token keyword">const</span> T<span class="token operator">&amp;</span> t<span class="token punctuation">,</span> size_type pos <span class="token operator">=</span> npos <span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">noexcept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="find-first-of"><a href="#find-first-of" class="headerlink" title="find_first_of"></a>find_first_of</h3><p>寻找字符的首次出现.若区间中不存在字符，则返回 npos 。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">constexpr</span> size_type <span class="token function">find_first_of</span><span class="token punctuation">(</span> <span class="token keyword">const</span> basic_string<span class="token operator">&amp;</span> str<span class="token punctuation">,</span> size_type pos <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">noexcept</span><span class="token punctuation">;</span><span class="token keyword">constexpr</span> size_type <span class="token function">find_first_of</span><span class="token punctuation">(</span> <span class="token keyword">const</span> CharT<span class="token operator">*</span> s<span class="token punctuation">,</span> size_type pos<span class="token punctuation">,</span> size_type count <span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span><span class="token keyword">constexpr</span> size_type <span class="token function">find_first_of</span><span class="token punctuation">(</span> <span class="token keyword">const</span> CharT<span class="token operator">*</span> s<span class="token punctuation">,</span> size_type pos <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span><span class="token keyword">constexpr</span> size_type <span class="token function">find_first_of</span><span class="token punctuation">(</span> CharT ch<span class="token punctuation">,</span> size_type pos <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">noexcept</span><span class="token punctuation">;</span><span class="token keyword">template</span> <span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">T</span> <span class="token operator">></span><span class="token keyword">constexpr</span> size_type <span class="token function">find_first_of</span><span class="token punctuation">(</span> <span class="token keyword">const</span> T<span class="token operator">&amp;</span> t<span class="token punctuation">,</span> size_type pos <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">noexcept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="find-first-not-of"><a href="#find-first-not-of" class="headerlink" title="find_first_not_of"></a>find_first_not_of</h3><p>寻找不等于给定字符序列中任何字符的首个字符 。若区间中不存在字符，则将返回 npos 。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">constexpr</span> size_type <span class="token function">find_first_not_of</span><span class="token punctuation">(</span> <span class="token keyword">const</span> basic_string<span class="token operator">&amp;</span> str<span class="token punctuation">,</span> size_type pos <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">noexcept</span><span class="token punctuation">;</span><span class="token keyword">constexpr</span> size_type <span class="token function">find_first_not_of</span><span class="token punctuation">(</span> <span class="token keyword">const</span> CharT<span class="token operator">*</span> s<span class="token punctuation">,</span> size_type pos<span class="token punctuation">,</span> size_type count <span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span><span class="token keyword">constexpr</span> size_type <span class="token function">find_first_not_of</span><span class="token punctuation">(</span> <span class="token keyword">const</span> CharT<span class="token operator">*</span> s<span class="token punctuation">,</span> size_type pos <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span><span class="token keyword">constexpr</span> size_type <span class="token function">find_first_not_of</span><span class="token punctuation">(</span> CharT ch<span class="token punctuation">,</span> size_type pos <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">noexcept</span><span class="token punctuation">;</span><span class="token keyword">template</span> <span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">T</span> <span class="token operator">></span><span class="token keyword">constexpr</span> size_type <span class="token function">find_first_not_of</span><span class="token punctuation">(</span> <span class="token keyword">const</span> T<span class="token operator">&amp;</span> t<span class="token punctuation">,</span> size_type pos <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">noexcept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="find-last-of"><a href="#find-last-of" class="headerlink" title="find_last_of"></a>find_last_of</h3><p>寻找字符的最后一次出现,找到的字符位置，或若找不到这种字符则为 npos 。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">constexpr</span> size_type <span class="token function">find_last_of</span><span class="token punctuation">(</span> <span class="token keyword">const</span> basic_string<span class="token operator">&amp;</span> str<span class="token punctuation">,</span> size_type pos <span class="token operator">=</span> npos <span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">noexcept</span><span class="token punctuation">;</span><span class="token keyword">constexpr</span> size_type <span class="token function">find_last_of</span><span class="token punctuation">(</span> <span class="token keyword">const</span> CharT<span class="token operator">*</span> s<span class="token punctuation">,</span> size_type pos<span class="token punctuation">,</span> size_type count <span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span><span class="token keyword">constexpr</span> size_type <span class="token function">find_last_of</span><span class="token punctuation">(</span> <span class="token keyword">const</span> CharT<span class="token operator">*</span> s<span class="token punctuation">,</span> size_type pos <span class="token operator">=</span> npos <span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span><span class="token keyword">constexpr</span> size_type <span class="token function">find_last_of</span><span class="token punctuation">(</span> CharT ch<span class="token punctuation">,</span> size_type pos <span class="token operator">=</span> npos <span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">noexcept</span><span class="token punctuation">;</span><span class="token keyword">template</span> <span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">T</span> <span class="token operator">></span><span class="token keyword">constexpr</span> size_type <span class="token function">find_last_of</span><span class="token punctuation">(</span> <span class="token keyword">const</span> T<span class="token operator">&amp;</span> t<span class="token punctuation">,</span> size_type pos <span class="token operator">=</span> npos <span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">noexcept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="find-last-not-of"><a href="#find-last-not-of" class="headerlink" title="find_last_not_of"></a>find_last_not_of</h3><p>寻找不等于给定字符序列中任何字符的最后字符。若区间中不存在这种字符，则返回 npos 。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">constexpr</span> size_type <span class="token function">find_last_not_of</span><span class="token punctuation">(</span> <span class="token keyword">const</span> basic_string<span class="token operator">&amp;</span> str<span class="token punctuation">,</span> size_type pos <span class="token operator">=</span> npos <span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">noexcept</span><span class="token punctuation">;</span><span class="token keyword">constexpr</span> size_type <span class="token function">find_last_not_of</span><span class="token punctuation">(</span> <span class="token keyword">const</span> CharT<span class="token operator">*</span> s<span class="token punctuation">,</span> size_type pos<span class="token punctuation">,</span> size_type count <span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span><span class="token keyword">constexpr</span> size_type <span class="token function">find_last_not_of</span><span class="token punctuation">(</span> <span class="token keyword">const</span> CharT<span class="token operator">*</span> s<span class="token punctuation">,</span> size_type pos <span class="token operator">=</span> npos <span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span><span class="token keyword">constexpr</span> size_type <span class="token function">find_last_not_of</span><span class="token punctuation">(</span> CharT ch<span class="token punctuation">,</span> size_type pos <span class="token operator">=</span> npos <span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">noexcept</span><span class="token punctuation">;</span><span class="token keyword">template</span> <span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">T</span> <span class="token operator">></span><span class="token keyword">constexpr</span> size_type <span class="token function">find_last_not_of</span><span class="token punctuation">(</span> <span class="token keyword">const</span> T<span class="token operator">&amp;</span> t<span class="token punctuation">,</span> size_type pos <span class="token operator">=</span> npos <span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">noexcept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><h3 id="npos"><a href="#npos" class="headerlink" title="npos"></a>npos</h3><p>特殊值。准确含义依赖语境.</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">static</span> <span class="token keyword">const</span> size_type npos <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="非成员函数"><a href="#非成员函数" class="headerlink" title="非成员函数"></a>非成员函数</h2><h3 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h3><ol><li><code>operator+</code>  2.<code>operator==</code>   3.<code>operator&lt;=&gt;</code></li></ol><h3 id="swap-1"><a href="#swap-1" class="headerlink" title="swap"></a>swap</h3><p><code>std::swap(std::basic_string)</code>  特化 <code>std::swap</code> 算法</p><h3 id="擦除"><a href="#擦除" class="headerlink" title="擦除"></a>擦除</h3><p><code>erase(std::basic_string)， erase_if(std::basic_string)</code>  擦除所有满足特定判别标准的元素</p><h3 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h3><p><code>operator&lt;&lt;</code> ，<code>operator&gt;&gt;</code> 执行字符串的流输入与输出</p><p><code>getline</code> 从 I/O 流读取数据到字符串</p><h3 id="数值转换"><a href="#数值转换" class="headerlink" title="数值转换"></a>数值转换</h3><p><code>stoi</code>, <code>stol</code>, <code>stoll</code>    转换字符串为有符号整数.</p><p><code>stoul</code>, <code>stoull</code>    转换字符串为无符号整数</p><p><code>stof</code>, <code>stod</code>, <code>stold</code>    转换字符串为浮点值</p><p><code>to_string</code>    转换整数或浮点值为 <code>string</code></p><h3 id="字面量"><a href="#字面量" class="headerlink" title="字面量"></a>字面量</h3><p>定义于内联命名空间 <code>std::literals::string_literals</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">operator</span><span class="token string">""</span>s <span class="token comment">//转换字符数组字面量为 basic_string </span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> basic_string </tag>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++ span API</title>
      <link href="/C-span-API.html"/>
      <url>/C-span-API.html</url>
      
        <content type="html"><![CDATA[<h1 id="C-span"><a href="#C-span" class="headerlink" title="C++ span"></a>C++ span</h1><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span>    <span class="token keyword">class</span> <span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token comment">// 元素类型；必须是完整对象类型且非抽象类</span>    std<span class="token double-colon punctuation">::</span>size_t Extent <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>dynamic_extent <span class="token comment">// 序列中的元素数，或若它为动态则为 std::dynamic_extent</span><span class="token operator">></span> <span class="token keyword">class</span> <span class="token class-name">span</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>类模板 <code>span</code> 所描述的对象能指代对象的相接序列，序列的首元素在零位置。 <code>span</code> 能拥有静态长度，该情况下序列中的元素数已知并编码于类型中，或拥有动态长度。可以用于防止数组传参时类型退化。</p><h2 id="成员类型"><a href="#成员类型" class="headerlink" title="成员类型"></a>成员类型</h2><table><thead><tr><th>成员类型</th><th>定义</th></tr></thead><tbody><tr><td><code>element_type</code></td><td><code>T</code></td></tr><tr><td><code>value_type</code></td><td><code>std::remove_cv_t&lt;T&gt;</code></td></tr><tr><td><code>size_type</code></td><td><code>std::size_t</code></td></tr><tr><td><code>difference_type</code></td><td><code>std::ptrdiff_t</code></td></tr><tr><td><code>reference</code></td><td><code>T&amp;</code></td></tr><tr><td><code>const_reference</code></td><td><code>const T&amp;</code></td></tr><tr><td><code>pointer</code></td><td><code>T*</code></td></tr><tr><td><code>const_pointer</code></td><td><code>const T*</code></td></tr><tr><td><code>iterator</code></td><td>实现定义的遗留随机访问迭代器 、常量表达式迭代器兼遗留连续迭代器  ，其 <code>value_type</code> 为 <code>value_type</code></td></tr><tr><td><code>reverse_iterator</code></td><td><code>std::reverse_iterator&lt;iterator&gt;</code></td></tr><tr><td><code>const_reverse_iterator</code></td><td><code>std::reverse_iterator&lt;const_iterator&gt;</code></td></tr></tbody></table><h2 id="成员常量"><a href="#成员常量" class="headerlink" title="成员常量"></a>成员常量</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">static</span> <span class="token keyword">constexpr</span> std<span class="token double-colon punctuation">::</span>size_t extent <span class="token operator">=</span> Extent<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="构造"><a href="#构造" class="headerlink" title="构造"></a>构造</h2><h4 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h4><ol><li><p>创建一个空容器.  构造空 <code>span</code> 使其 <code>data() == nullptr</code> 而 <code>size() == 0</code> 。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">constexpr</span> <span class="token function">span</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">noexcept</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>构造作为范围 <code>[first, first + count)</code> 上的视图的 <code>span</code> ；产生的 <code>span</code> 有 <code>data() == std::to_address(first)</code> 与 <code>size() == count</code> 。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">It</span> <span class="token operator">></span><span class="token keyword">explicit</span><span class="token punctuation">(</span>extent <span class="token operator">!=</span> std<span class="token double-colon punctuation">::</span>dynamic_extent<span class="token punctuation">)</span> <span class="token keyword">constexpr</span> <span class="token function">span</span><span class="token punctuation">(</span> It first<span class="token punctuation">,</span> size_type count <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>构造作为范围 <code>[first, last)</code> 上的视图的 <code>span</code> ；产生的 <code>span</code> 有 <code>data() == std::to_address(first)</code> 与 <code>size() == last-first</code> 。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">It</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">End</span> <span class="token operator">></span><span class="token keyword">explicit</span><span class="token punctuation">(</span>extent <span class="token operator">!=</span> std<span class="token double-colon punctuation">::</span>dynamic_extent<span class="token punctuation">)</span> <span class="token keyword">constexpr</span> <span class="token function">span</span><span class="token punctuation">(</span> It first<span class="token punctuation">,</span> End last <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>构造作为数组 <code>arr</code> 上的视图的 <code>span</code> ；产生的 <code>span</code> 有 <code>size() == N</code> 与 <code>data() == std::data(arr)</code> 。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span> std<span class="token double-colon punctuation">::</span>size_t N <span class="token operator">></span><span class="token keyword">constexpr</span> <span class="token function">span</span><span class="token punctuation">(</span> <span class="token function">element_type</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span>arr<span class="token punctuation">)</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token keyword">noexcept</span><span class="token punctuation">;</span><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">U</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>size_t N <span class="token operator">></span><span class="token keyword">constexpr</span> <span class="token function">span</span><span class="token punctuation">(</span> std<span class="token double-colon punctuation">::</span>array<span class="token operator">&lt;</span>U<span class="token punctuation">,</span> N<span class="token operator">></span><span class="token operator">&amp;</span> arr <span class="token punctuation">)</span> <span class="token keyword">noexcept</span><span class="token punctuation">;</span><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">U</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>size_t N <span class="token operator">></span><span class="token keyword">constexpr</span> <span class="token function">span</span><span class="token punctuation">(</span> <span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>array<span class="token operator">&lt;</span>U<span class="token punctuation">,</span> N<span class="token operator">></span><span class="token operator">&amp;</span> arr <span class="token punctuation">)</span> <span class="token keyword">noexcept</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>构造作为范围 <code>range</code> 上的视图的 <code>span</code> ；产生的 <code>span</code> 有 <code>size() == std::ranges::size(r)</code> 与 <code>data() == std::ranges::data(range)</code>。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">R</span> <span class="token operator">></span><span class="token keyword">explicit</span><span class="token punctuation">(</span>extent <span class="token operator">!=</span> std<span class="token double-colon punctuation">::</span>dynamic_extent<span class="token punctuation">)</span> <span class="token keyword">constexpr</span> <span class="token function">span</span><span class="token punctuation">(</span> R<span class="token operator">&amp;&amp;</span> range <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>从另一 <code>span source</code> 的转换构造函数；产生的 <code>span</code> 有 <code>size() == source.size()</code> 与 <code>data() == source.data()</code>.</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">U</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>size_t N <span class="token operator">></span><span class="token keyword">explicit</span><span class="token punctuation">(</span>extent <span class="token operator">!=</span> std<span class="token double-colon punctuation">::</span>dynamic_extent <span class="token operator">&amp;&amp;</span> N <span class="token operator">==</span> std<span class="token double-colon punctuation">::</span>dynamic_extent<span class="token punctuation">)</span><span class="token keyword">constexpr</span> <span class="token function">span</span><span class="token punctuation">(</span> <span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>span<span class="token operator">&lt;</span>U<span class="token punctuation">,</span> N<span class="token operator">></span><span class="token operator">&amp;</span> s <span class="token punctuation">)</span> <span class="token keyword">noexcept</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>默认化的赋值构造函数复制大小与数据指针；产生的 <code>span</code> 有 <code>size() == other.size()</code> 与 <code>data() == other.data()</code> 。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">constexpr</span> <span class="token function">span</span><span class="token punctuation">(</span> <span class="token keyword">const</span> span<span class="token operator">&amp;</span> other <span class="token punctuation">)</span> <span class="token keyword">noexcept</span> <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h3 id="operator"><a href="#operator" class="headerlink" title="operator="></a>operator=</h3><p>赋值 <code>other</code> 给<code> *this</code> 。此默认化的赋值运算符进行数据指针和大小的浅复制，即调用此函数后， <code>data() == other.data()</code> 且 <code>size() == other.size()</code> 。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">constexpr</span> span<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span> <span class="token keyword">const</span> span<span class="token operator">&amp;</span> other <span class="token punctuation">)</span> <span class="token keyword">noexcept</span> <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="元素访问"><a href="#元素访问" class="headerlink" title="元素访问"></a>元素访问</h2><h3 id="operator-1"><a href="#operator-1" class="headerlink" title="operator[]"></a>operator[]</h3><p>返回位于指定位置 <code>pos</code> 的元素的引用。通过此运算符访问不存在的元素是未定义行为。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">constexpr</span> reference <span class="token keyword">operator</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>size_type idx<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="front"><a href="#front" class="headerlink" title="front"></a>front</h3><p>返回到容器首元素的引用。在空容器上对 <code>front</code> 的调用是未定义的。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">constexpr</span> reference <span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="back"><a href="#back" class="headerlink" title="back"></a>back</h3><p>返回到容器中最后一个元素的引用。在空容器上调用 <code>back</code> 导致未定义行为。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">constexpr</span> reference <span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="data"><a href="#data" class="headerlink" title="data"></a>data</h3><p>返回指向作为元素存储工作的底层数组的指针。对于非空容器，返回的指针与首元素地址比较相等。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">constexpr</span> pointer <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">noexcept</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h2><h3 id="begin-end"><a href="#begin-end" class="headerlink" title="begin - end"></a>begin - end</h3><p>返回指向容器开头和结尾的迭代器。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">constexpr</span> iterator <span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">noexcept</span><span class="token punctuation">;</span><span class="token keyword">constexpr</span> iterator <span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">noexcept</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="rbegin-rend"><a href="#rbegin-rend" class="headerlink" title="rbegin - rend"></a>rbegin - rend</h3><p>返回指向容器开头和结尾的反向迭代器。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">constexpr</span> reverse_iterator <span class="token function">rbegin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">noexcept</span><span class="token punctuation">;</span><span class="token keyword">constexpr</span> reverse_iterator <span class="token function">rend</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">noexcept</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="观察器"><a href="#观察器" class="headerlink" title="观察器"></a>观察器</h2><h3 id="empty"><a href="#empty" class="headerlink" title="empty"></a>empty</h3><p>检查 span 是否为空。空则为true</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token punctuation">[</span><span class="token punctuation">[</span>nodiscard<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token keyword">constexpr</span> <span class="token keyword">bool</span> <span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">noexcept</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="size"><a href="#size" class="headerlink" title="size"></a>size</h3><p>返回 span 中的元素数。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">constexpr</span> size_type <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">noexcept</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="size-bytes"><a href="#size-bytes" class="headerlink" title="size_bytes"></a>size_bytes</h3><p>返回以字节表示的序列大小.</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">constexpr</span> size_type <span class="token function">size_bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">noexcept</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="子视图"><a href="#子视图" class="headerlink" title="子视图"></a>子视图</h2><h3 id="first"><a href="#first" class="headerlink" title="first"></a>first</h3><p>获得由序列首 N 个元素组成的子段.作为<code>*this</code> 的首 <code>Count</code> 个元素上的视图的 <code>span r</code> ，满足 <code>r.data() == this-&gt;data() &amp;&amp; r.size() == Count</code> 。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span> std<span class="token double-colon punctuation">::</span>size_t Count <span class="token operator">></span><span class="token keyword">constexpr</span> std<span class="token double-colon punctuation">::</span>span<span class="token operator">&lt;</span>element_type<span class="token punctuation">,</span> Count<span class="token operator">></span> <span class="token function">first</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span><span class="token keyword">constexpr</span> std<span class="token double-colon punctuation">::</span>span<span class="token operator">&lt;</span>element_type<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>dynamic_extent<span class="token operator">></span> <span class="token function">first</span><span class="token punctuation">(</span> std<span class="token double-colon punctuation">::</span>size_t Count <span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="last"><a href="#last" class="headerlink" title="last"></a>last</h3><p>获得由序列末 N 个元素组成的子段.</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span> std<span class="token double-colon punctuation">::</span>size_t Count <span class="token operator">></span> <span class="token keyword">constexpr</span> std<span class="token double-colon punctuation">::</span>span<span class="token operator">&lt;</span>element_type<span class="token punctuation">,</span> Count<span class="token operator">></span> <span class="token function">last</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span><span class="token keyword">constexpr</span> std<span class="token double-colon punctuation">::</span>span<span class="token operator">&lt;</span>element_type<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>dynamic_extent<span class="token operator">></span> <span class="token function">last</span><span class="token punctuation">(</span> std<span class="token double-colon punctuation">::</span>size_t Count <span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="subspan"><a href="#subspan" class="headerlink" title="subspan"></a>subspan</h3><p>获得子段.获得 span ，它是此 span 的始于偏移 <code>Offset</code> 的 <code>Count</code> 个元素上的视图。若 <code>Count</code> 为 <code>std::dynamic_extent</code> ，则子段中的元素数为 <code>size() - offset</code> （即它结束于 <code>*this</code> 的结尾）。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span> std<span class="token double-colon punctuation">::</span>size_t Offset<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>size_t Count <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>dynamic_extent <span class="token operator">></span> <span class="token keyword">constexpr</span> std<span class="token double-colon punctuation">::</span>span<span class="token operator">&lt;</span>element_type<span class="token punctuation">,</span> E <span class="token operator">></span> <span class="token function">subspan</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span><span class="token comment">// 返回的 span 的长度模板实参 E ：</span><span class="token comment">//若 Count 不是 std::dynamic_extent 则为 Count ；</span><span class="token comment">//否则，若 Extent 不是 std::dynamic_extent ，则为 Extent - Offset ；</span><span class="token comment">//否则为 std::dynamic_extent 。</span><span class="token keyword">constexpr</span> std<span class="token double-colon punctuation">::</span>span<span class="token operator">&lt;</span>element_type<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>dynamic_extent<span class="token operator">></span><span class="token function">subspan</span><span class="token punctuation">(</span> std<span class="token double-colon punctuation">::</span>size_t Offset<span class="token punctuation">,</span>std<span class="token double-colon punctuation">::</span>size_t Count <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>dynamic_extent <span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="非成员函数"><a href="#非成员函数" class="headerlink" title="非成员函数"></a>非成员函数</h2><h3 id="as-bytes"><a href="#as-bytes" class="headerlink" title="as_bytes"></a>as_bytes</h3><p>转换 <code>span</code> 为对其底层字节的视图.以 <code>&#123;reinterpret_cast&lt;const std::byte*&gt;(s.data()), s.size_bytes()&#125;</code>构造的 span 。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">T</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>size_t N<span class="token operator">></span>std<span class="token double-colon punctuation">::</span>span<span class="token operator">&lt;</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>byte<span class="token punctuation">,</span> S<span class="token operator">></span> <span class="token function">as_bytes</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>span<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> N<span class="token operator">></span> s<span class="token punctuation">)</span> <span class="token keyword">noexcept</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="as-writable-bytes"><a href="#as-writable-bytes" class="headerlink" title="as_writable_bytes"></a>as_writable_bytes</h3><p>转换 span 为对其底层字节的视图.以 <code>&#123;reinterpret_cast&lt;std::byte*&gt;(s.data()), s.size_bytes()&#125;</code> 构造的 span 。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">T</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>size_t N<span class="token operator">></span>std<span class="token double-colon punctuation">::</span>span<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>byte<span class="token punctuation">,</span> S<span class="token operator">></span> <span class="token function">as_writable_bytes</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>span<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> N<span class="token operator">></span> s<span class="token punctuation">)</span> <span class="token keyword">noexcept</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="非成员常量"><a href="#非成员常量" class="headerlink" title="非成员常量"></a>非成员常量</h2><h3 id="dynamic-extent"><a href="#dynamic-extent" class="headerlink" title="dynamic_extent"></a>dynamic_extent</h3><p><code>size_t</code> 类型常量，指明 <code>span</code> 拥有动态长度</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">inline</span> <span class="token keyword">constexpr</span> std<span class="token double-colon punctuation">::</span>size_t dynamic_extent <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token class-name">numeric_limits</span><span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>size_t<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="辅助模板"><a href="#辅助模板" class="headerlink" title="辅助模板"></a>辅助模板</h2><p><code>std::ranges::enable_borrowed_range</code> 的此特化使得 span 满足 <code>borrowed_range</code> 。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>size_t Extent<span class="token operator">></span><span class="token keyword">inline</span> <span class="token keyword">constexpr</span> <span class="token keyword">bool</span> ranges<span class="token double-colon punctuation">::</span>enable_borrowed_range<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>span<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> Extent<span class="token operator">>></span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>std::ranges::enable_view</code> 的此特化使零或动态长度的 span 满足 <code>view</code> 。非零静态长度的 span 非 <code>default_initializable</code> 从而不是视图。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>size_t Extent<span class="token operator">></span><span class="token keyword">inline</span> <span class="token keyword">constexpr</span> <span class="token keyword">bool</span> ranges<span class="token double-colon punctuation">::</span>enable_view<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>span<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> Extent<span class="token operator">>></span> <span class="token operator">=</span>    Extent <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> Extent <span class="token operator">==</span> dynamic_extent<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STL </tag>
            
            <tag> 连续容器视图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++ priority_queue API</title>
      <link href="/C-priority-queue-API.html"/>
      <url>/C-priority-queue-API.html</url>
      
        <content type="html"><![CDATA[<h2 id="C-priority-queue"><a href="#C-priority-queue" class="headerlink" title="C++ priority_queue"></a>C++ priority_queue</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">Container</span> <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">,</span>    <span class="token keyword">class</span> <span class="token class-name">Compare</span> <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>less<span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">Container</span><span class="token double-colon punctuation">::</span>value_type<span class="token operator">></span><span class="token operator">></span> <span class="token keyword">class</span> <span class="token class-name">priority_queue</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>std::priority_queue </code> 是容器适配器，它提供常数时间的（默认）最大元素查找，对数代价的插入与释出。</p><p>可用用户提供的 <code>Compare </code>更改顺序，例如，用 <code>std::greater&lt;T&gt;</code> 将导致最小元素作为 <code>top()</code> 出现。用 <code>priority_queue</code> 工作类似管理某些随机访问容器中的堆，优势是不可能突然把堆非法化。</p><h2 id="成员类型"><a href="#成员类型" class="headerlink" title="成员类型"></a>成员类型</h2><table><thead><tr><th>成员类型</th><th>定义</th></tr></thead><tbody><tr><td><code>container_type</code></td><td><code>Container</code></td></tr><tr><td><code>value_compare</code></td><td><code>Compare</code></td></tr><tr><td><code>value_type</code></td><td><code>Container::value_type</code></td></tr><tr><td><code>size_type</code></td><td><code>Container::size_type</code></td></tr><tr><td><code>reference</code></td><td><code>Container::reference</code></td></tr><tr><td><code>const_reference</code></td><td><code>Container::const_reference</code></td></tr></tbody></table><h2 id="构造"><a href="#构造" class="headerlink" title="构造"></a>构造</h2><h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><ol><li><p>创建一个空容器. </p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token function">priority_queue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">priority_queue</span><span class="token punctuation">(</span><span class="token function">Compare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">Container</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">Alloc</span> <span class="token operator">></span><span class="token keyword">explicit</span> <span class="token function">priority_queue</span><span class="token punctuation">(</span> <span class="token keyword">const</span> Alloc<span class="token operator">&amp;</span> alloc <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">Alloc</span> <span class="token operator">></span><span class="token function">priority_queue</span><span class="token punctuation">(</span> <span class="token keyword">const</span> Compare<span class="token operator">&amp;</span> compare<span class="token punctuation">,</span> <span class="token keyword">const</span> Alloc<span class="token operator">&amp;</span> alloc <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>以指定内容构造</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">explicit</span> <span class="token function">priority_queue</span><span class="token punctuation">(</span><span class="token keyword">const</span> Compare<span class="token operator">&amp;</span> compare<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">priority_queue</span><span class="token punctuation">(</span>compare<span class="token punctuation">,</span> <span class="token function">Container</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span><span class="token function">priority_queue</span><span class="token punctuation">(</span> <span class="token keyword">const</span> Compare<span class="token operator">&amp;</span> compare<span class="token punctuation">,</span> <span class="token keyword">const</span> Container<span class="token operator">&amp;</span> cont <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">priority_queue</span><span class="token punctuation">(</span> <span class="token keyword">const</span> Compare<span class="token operator">&amp;</span> compare<span class="token punctuation">,</span> Container<span class="token operator">&amp;&amp;</span> cont <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">Alloc</span> <span class="token operator">></span><span class="token function">priority_queue</span><span class="token punctuation">(</span> <span class="token keyword">const</span> Compare<span class="token operator">&amp;</span> compare<span class="token punctuation">,</span> <span class="token keyword">const</span> Container<span class="token operator">&amp;</span> cont<span class="token punctuation">,</span> <span class="token keyword">const</span> Alloc<span class="token operator">&amp;</span> alloc <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>以其他的容器创建</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token function">priority_queue</span><span class="token punctuation">(</span> <span class="token keyword">const</span> priority_queue<span class="token operator">&amp;</span> other <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">Alloc</span> <span class="token operator">></span><span class="token function">priority_queue</span><span class="token punctuation">(</span> <span class="token keyword">const</span> priority_queue<span class="token operator">&amp;</span> other<span class="token punctuation">,</span> <span class="token keyword">const</span> Alloc<span class="token operator">&amp;</span> alloc <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>还可以使用移动语义</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token function">priority_queue</span><span class="token punctuation">(</span> priority_queue<span class="token operator">&amp;&amp;</span> other <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">Alloc</span> <span class="token operator">></span><span class="token function">priority_queue</span><span class="token punctuation">(</span> priority_queue<span class="token operator">&amp;&amp;</span> other<span class="token punctuation">,</span> <span class="token keyword">const</span> Alloc<span class="token operator">&amp;</span> alloc <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>以一对迭代器创建</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">InputIt</span> <span class="token operator">></span><span class="token function">priority_queue</span><span class="token punctuation">(</span> InputIt first<span class="token punctuation">,</span> InputIt last<span class="token punctuation">,</span> <span class="token keyword">const</span> Compare<span class="token operator">&amp;</span> compare<span class="token punctuation">,</span> <span class="token keyword">const</span> Container<span class="token operator">&amp;</span> cont <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">InputIt</span> <span class="token operator">></span><span class="token function">priority_queue</span><span class="token punctuation">(</span> InputIt first<span class="token punctuation">,</span> InputIt last<span class="token punctuation">,</span><span class="token keyword">const</span> Compare<span class="token operator">&amp;</span> compare <span class="token operator">=</span> <span class="token function">Compare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                Container<span class="token operator">&amp;&amp;</span> cont <span class="token operator">=</span> <span class="token function">Container</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="operator"><a href="#operator" class="headerlink" title="operator="></a>operator=</h3>   <pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">priority_queue<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span> <span class="token keyword">const</span> priority_queue<span class="token operator">&amp;</span> other <span class="token punctuation">)</span><span class="token punctuation">;</span>priority_queue<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span> priority_queue<span class="token operator">&amp;&amp;</span> other <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="元素访问"><a href="#元素访问" class="headerlink" title="元素访问"></a>元素访问</h2><h3 id="top"><a href="#top" class="headerlink" title="top"></a>top</h3><p>访问栈顶元素。若使用默认比较函数，则返回的元素亦为优先队列中最大的元素。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">const_reference <span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="容量"><a href="#容量" class="headerlink" title="容量"></a>容量</h2><h3 id="empty"><a href="#empty" class="headerlink" title="empty"></a>empty</h3><p>判断底层容器是否为空，空则为true</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token punctuation">[</span><span class="token punctuation">[</span>nodiscard<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token keyword">bool</span> <span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="size"><a href="#size" class="headerlink" title="size"></a>size</h3><p>返回容器中的元素数 。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">size_type <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="修改器"><a href="#修改器" class="headerlink" title="修改器"></a>修改器</h2><h3 id="push"><a href="#push" class="headerlink" title="push"></a>push</h3><p>向队列尾部插入元素。等效地调用 <code>c.push_back(value); std::push_heap(c.begin(), c.end(), comp);</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span> <span class="token keyword">const</span> value_type<span class="token operator">&amp;</span> value <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span> value_type<span class="token operator">&amp;&amp;</span> value <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="emplace"><a href="#emplace" class="headerlink" title="emplace"></a>emplace</h3><p>于尾部原位构造元素。等效地调用 <code>c.emplace_back(std::forward&lt;Args&gt;(args)...); std::push_heap(c.begin(), c.end(), comp);</code> 。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> Args <span class="token operator">></span><span class="token keyword">void</span> <span class="token function">emplace</span><span class="token punctuation">(</span> Args<span class="token operator">&amp;&amp;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="pop"><a href="#pop" class="headerlink" title="pop"></a>pop</h3><p>移除顶元素.等效地调用 <code>std::pop_heap(c.begin(), c.end(), comp); c.pop_back(); </code>。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="swap"><a href="#swap" class="headerlink" title="swap"></a>swap</h3><p>将内容与其他容器交换。等效地调用 <code>using std::swap; swap(c, other.c); swap(comp, other.comp);</code> 。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span> priority_queue<span class="token operator">&amp;</span> other <span class="token punctuation">)</span>     <span class="token keyword">noexcept</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>is_nothrow_swappable<span class="token operator">&lt;</span>Container<span class="token operator">></span><span class="token double-colon punctuation">::</span>value <span class="token operator">&amp;&amp;</span>             std<span class="token double-colon punctuation">::</span>is_nothrow_swappable<span class="token operator">&lt;</span>Compare<span class="token operator">></span><span class="token double-colon punctuation">::</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="成员对象"><a href="#成员对象" class="headerlink" title="成员对象"></a>成员对象</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Container c<span class="token punctuation">;</span> <span class="token comment">// 底层容器Compare comp; // 比较函数对象</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="非成员函数"><a href="#非成员函数" class="headerlink" title="非成员函数"></a>非成员函数</h2><h3 id="swap-1"><a href="#swap-1" class="headerlink" title="swap"></a>swap</h3><p><code>std::swap(std::priority_queue)</code>  特化 <code>std::swap</code> 算法</p><h2 id="辅助类"><a href="#辅助类" class="headerlink" title="辅助类"></a>辅助类</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>uses_allocator<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>priority_queue<span class="token operator">></span> <span class="token comment">// 特化 std::uses_allocator 类型特征</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STL </tag>
            
            <tag> 容器适配器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++ queue API</title>
      <link href="/C-queue-API.html"/>
      <url>/C-queue-API.html</url>
      
        <content type="html"><![CDATA[<h2 id="C-queue"><a href="#C-queue" class="headerlink" title="C++ queue"></a>C++ queue</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span>    <span class="token keyword">class</span> <span class="token class-name">T</span><span class="token punctuation">,</span>    <span class="token keyword">class</span> <span class="token class-name">Container</span> <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>deque<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token operator">></span> <span class="token keyword">class</span> <span class="token class-name">queue</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><code>std::queue</code> 类是容器适配器，它给予程序员队列的功能——尤其是 FIFO （先进先出）数据结构。</p><p>类模板表现为底层容器的包装器 —— 只提供特定的函数集合。 queue 在底层容器尾端推入元素，从首端弹出元素。</p><h2 id="成员类型"><a href="#成员类型" class="headerlink" title="成员类型"></a>成员类型</h2><table><thead><tr><th>成员类型</th><th>定义</th></tr></thead><tbody><tr><td><code>container_type</code></td><td><code>Container</code></td></tr><tr><td><code>value_type</code></td><td><code>Container::value_type</code></td></tr><tr><td><code>size_type</code></td><td><code>Container::size_type</code></td></tr><tr><td><code>reference</code></td><td><code>Container::reference</code></td></tr><tr><td><code>const_reference</code></td><td><code>Container::const_reference</code></td></tr></tbody></table><h2 id="构造"><a href="#构造" class="headerlink" title="构造"></a>构造</h2><h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><ol><li><p>创建一个空容器. </p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token function">queue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">queue</span><span class="token punctuation">(</span><span class="token function">Container</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">Alloc</span> <span class="token operator">></span><span class="token keyword">explicit</span> <span class="token function">queue</span><span class="token punctuation">(</span> <span class="token keyword">const</span> Alloc<span class="token operator">&amp;</span> alloc <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>以指定内容构造</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">explicit</span> <span class="token function">queue</span><span class="token punctuation">(</span> <span class="token keyword">const</span> Container<span class="token operator">&amp;</span> cont <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">explicit</span> <span class="token function">queue</span><span class="token punctuation">(</span> Container<span class="token operator">&amp;&amp;</span> cont <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">Alloc</span> <span class="token operator">></span><span class="token function">queue</span><span class="token punctuation">(</span> <span class="token keyword">const</span> Container<span class="token operator">&amp;</span> cont<span class="token punctuation">,</span> <span class="token keyword">const</span> Alloc<span class="token operator">&amp;</span> alloc <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">Alloc</span> <span class="token operator">></span><span class="token function">queue</span><span class="token punctuation">(</span> Container<span class="token operator">&amp;&amp;</span> cont<span class="token punctuation">,</span> <span class="token keyword">const</span> Alloc<span class="token operator">&amp;</span> alloc <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>以其他的容器创建</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token function">queue</span><span class="token punctuation">(</span> <span class="token keyword">const</span> queue<span class="token operator">&amp;</span> other <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">Alloc</span> <span class="token operator">></span><span class="token function">queue</span><span class="token punctuation">(</span> <span class="token keyword">const</span> queue<span class="token operator">&amp;</span> other<span class="token punctuation">,</span> <span class="token keyword">const</span> Alloc<span class="token operator">&amp;</span> alloc <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>还可以使用移动语义</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token function">queue</span><span class="token punctuation">(</span> queue<span class="token operator">&amp;&amp;</span> other <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">Alloc</span> <span class="token operator">></span><span class="token function">queue</span><span class="token punctuation">(</span> queue<span class="token operator">&amp;&amp;</span> other<span class="token punctuation">,</span> <span class="token keyword">const</span> Alloc<span class="token operator">&amp;</span> alloc <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="operator"><a href="#operator" class="headerlink" title="operator="></a>operator=</h3>   <pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">queue<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span> <span class="token keyword">const</span> queue<span class="token operator">&amp;</span> other <span class="token punctuation">)</span><span class="token punctuation">;</span>queue<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span> queue<span class="token operator">&amp;&amp;</span> other <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="元素访问"><a href="#元素访问" class="headerlink" title="元素访问"></a>元素访问</h2><h3 id="front"><a href="#front" class="headerlink" title="front"></a>front</h3><p>返回到 queue 中首元素的引用。此元素将是调用 pop() 时第一个移除的元素。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">reference <span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>const_reference <span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="back"><a href="#back" class="headerlink" title="back"></a>back</h3><p>返回到 queue 中末元素的引用。这是最近推入的元素。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">reference <span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>const_reference <span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="容量"><a href="#容量" class="headerlink" title="容量"></a>容量</h2><h3 id="empty"><a href="#empty" class="headerlink" title="empty"></a>empty</h3><p>判断容器是否为空，空则为true</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token punctuation">[</span><span class="token punctuation">[</span>nodiscard<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token keyword">bool</span> <span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="size"><a href="#size" class="headerlink" title="size"></a>size</h3><p>返回容器中的元素数 。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">size_type <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="修改器"><a href="#修改器" class="headerlink" title="修改器"></a>修改器</h2><h3 id="push"><a href="#push" class="headerlink" title="push"></a>push</h3><p>向队列尾部插入元素</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span> <span class="token keyword">const</span> value_type<span class="token operator">&amp;</span> value <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span> value_type<span class="token operator">&amp;&amp;</span> value <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="emplace"><a href="#emplace" class="headerlink" title="emplace"></a>emplace</h3><p>于尾部原位构造元素</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> Args <span class="token operator">></span><span class="token keyword">decltype</span><span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token punctuation">)</span> <span class="token function">emplace</span><span class="token punctuation">(</span> Args<span class="token operator">&amp;&amp;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="pop"><a href="#pop" class="headerlink" title="pop"></a>pop</h3><p>删除首个元素.等效地调用<code>c.pop_front()</code>。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="swap"><a href="#swap" class="headerlink" title="swap"></a>swap</h3><p>将内容与其他容器交换。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span> queue<span class="token operator">&amp;</span> other <span class="token punctuation">)</span> <span class="token keyword">noexcept</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>is_nothrow_swappable<span class="token operator">&lt;</span>Container<span class="token operator">></span><span class="token double-colon punctuation">::</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="成员对象"><a href="#成员对象" class="headerlink" title="成员对象"></a>成员对象</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Container c <span class="token comment">// 底层容器</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="非成员函数"><a href="#非成员函数" class="headerlink" title="非成员函数"></a>非成员函数</h2><h3 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h3><ol><li><code>operator==</code>  2.<code>operator!=</code>  3.<code>operator&lt;</code>  4.<code>operator&lt;=</code>  5.<code>operator&gt;</code>  6.<code>operator&gt;=</code>  7.<code>operator&lt;=&gt;</code></li></ol><h3 id="swap-1"><a href="#swap-1" class="headerlink" title="swap"></a>swap</h3><p><code>std::swap(std::queue)</code>  特化 <code>std::swap</code> 算法</p><h2 id="辅助类"><a href="#辅助类" class="headerlink" title="辅助类"></a>辅助类</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>uses_allocator<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>queue<span class="token operator">></span> <span class="token comment">// 特化 std::uses_allocator 类型特征</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STL </tag>
            
            <tag> 容器适配器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++ unordered_multimap API</title>
      <link href="/C-unordered-multimap-API.html"/>
      <url>/C-unordered-multimap-API.html</url>
      
        <content type="html"><![CDATA[<h2 id="C-unordered-multimap"><a href="#C-unordered-multimap" class="headerlink" title="C++ unordered_multimap"></a>C++ unordered_multimap</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">Key</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">Hash</span> <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>hash<span class="token operator">&lt;</span>Key<span class="token operator">></span><span class="token punctuation">,</span>    <span class="token keyword">class</span> <span class="token class-name">KeyEqual</span> <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>equal_to<span class="token operator">&lt;</span>Key<span class="token operator">></span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">Allocator</span> <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>allocator<span class="token operator">&lt;</span> std<span class="token double-colon punctuation">::</span>pair<span class="token operator">&lt;</span><span class="token keyword">const</span> Key<span class="token punctuation">,</span> T<span class="token operator">></span> <span class="token operator">></span><span class="token operator">></span> <span class="token keyword">class</span> <span class="token class-name">unordered_multimap</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> pmr <span class="token punctuation">&#123;</span>    <span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">Key</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">Hash</span> <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>hash<span class="token operator">&lt;</span>Key<span class="token operator">></span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">KeyEqual</span> <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>equal_to<span class="token operator">&lt;</span>Key<span class="token operator">>></span><span class="token keyword">using</span> unordered_map <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>unordered_map<span class="token operator">&lt;</span>Key<span class="token punctuation">,</span> T<span class="token punctuation">,</span> Hash<span class="token punctuation">,</span> Pred<span class="token punctuation">,</span>              std<span class="token double-colon punctuation">::</span>pmr<span class="token double-colon punctuation">::</span>polymorphic_allocator<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>pair<span class="token operator">&lt;</span><span class="token keyword">const</span> Key<span class="token punctuation">,</span>T<span class="token operator">>></span><span class="token operator">></span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>unordered_multimap</code> 是无序关联容器，支持等价的关键（一个 <code>unordered_multimap</code> 可含有每个关键值的多个副本）和将关键与另一类型的值关联。 <code>unordered_multimap</code> 类支持向前迭代器。搜索、插入和移除拥有平均常数时间复杂度。</p><p>元素在内部不以任何特定顺序排序，而是组织到桶中。元素被放进哪个桶完全依赖于其关键的哈希。这允许到单独元素的快速访问，因为哈希一旦计算，则它指代元素被放进的准确的桶。</p><h2 id="成员类型"><a href="#成员类型" class="headerlink" title="成员类型"></a>成员类型</h2><table><thead><tr><th>成员类型</th><th>定义</th></tr></thead><tbody><tr><td><code>key_type</code></td><td><code>Key</code></td></tr><tr><td><code>mapped_type</code></td><td><code>T</code></td></tr><tr><td><code>value_type</code></td><td><code>std::pair&lt;const Key, T&gt;</code></td></tr><tr><td><code>size_type</code></td><td>无符号整数类型（通常是 <code>std::size_t</code> ）</td></tr><tr><td><code>difference_type</code></td><td>有符号整数类型（通常是 <code>std::ptrdiff_t</code> ）</td></tr><tr><td><code>hasher</code></td><td><code>Hash</code></td></tr><tr><td><code>key_equal</code></td><td><code>KeyEqual</code></td></tr><tr><td><code>allocator_type</code></td><td><code>Allocator</code></td></tr><tr><td><code>reference</code></td><td><code>value_type&amp;</code></td></tr><tr><td><code>const_reference</code></td><td><code>const value_type&amp;</code></td></tr><tr><td><code>pointer</code></td><td><code>std::allocator_traits&lt;Allocator&gt;::pointer</code></td></tr><tr><td><code>const_pointer</code></td><td><code>std::allocator_traits&lt;Allocator&gt;::const_pointer</code></td></tr><tr><td><code>iterator</code></td><td>遗留向前迭代器 (LegacyRandomAccessIterator)</td></tr><tr><td><code>const_iterator</code></td><td>常向前迭代器</td></tr><tr><td><code>local_iterator</code></td><td>类别、值、差、指针和引用类型都与 <code>iterator</code> 相同的迭代器类型。能用此迭代器在单个桶迭代，但不能跨桶。</td></tr><tr><td><code>const_local_iterator</code></td><td>类别、值、差、指针和引用类型都与 <code>const_iterator</code> 相同的迭代器类型。能用此迭代器在单个桶迭代，但不能跨桶。</td></tr><tr><td><code>node_type</code></td><td>表示容器结点的结点句柄特化</td></tr></tbody></table><h2 id="构造"><a href="#构造" class="headerlink" title="构造"></a>构造</h2><h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><ol><li><p>创建一个空容器. </p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token function">unordered_multimap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">explicit</span> <span class="token function">unordered_multimap</span><span class="token punctuation">(</span> <span class="token keyword">const</span> Allocator<span class="token operator">&amp;</span> alloc <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">explicit</span> <span class="token function">unordered_multimap</span><span class="token punctuation">(</span> size_type bucket_count<span class="token punctuation">,</span> <span class="token keyword">const</span> Hash<span class="token operator">&amp;</span> hash <span class="token operator">=</span> <span class="token function">Hash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                             <span class="token keyword">const</span> key_equal<span class="token operator">&amp;</span> equal <span class="token operator">=</span> <span class="token function">key_equal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                             <span class="token keyword">const</span> Allocator<span class="token operator">&amp;</span> alloc <span class="token operator">=</span> <span class="token function">Allocator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>初始化列表</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token function">unordered_multimap</span><span class="token punctuation">(</span> std<span class="token double-colon punctuation">::</span>initializer_list<span class="token operator">&lt;</span>value_type<span class="token operator">></span> init<span class="token punctuation">,</span>                    size_type bucket_count <span class="token operator">=</span> <span class="token comment">/*implementation-defined*/</span><span class="token punctuation">,</span>                    <span class="token keyword">const</span> Hash<span class="token operator">&amp;</span> hash <span class="token operator">=</span> <span class="token function">Hash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">const</span> key_equal<span class="token operator">&amp;</span> equal <span class="token operator">=</span> <span class="token function">key_equal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    <span class="token keyword">const</span> Allocator<span class="token operator">&amp;</span> alloc <span class="token operator">=</span> <span class="token function">Allocator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>以一对迭代器创建</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">InputIt</span> <span class="token operator">></span><span class="token function">unordered_multimap</span><span class="token punctuation">(</span> InputIt first<span class="token punctuation">,</span> InputIt last<span class="token punctuation">,</span>                    size_type bucket_count <span class="token operator">=</span> <span class="token comment">/*implementation-defined*/</span><span class="token punctuation">,</span>                    <span class="token keyword">const</span> Hash<span class="token operator">&amp;</span> hash <span class="token operator">=</span> <span class="token function">Hash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">const</span> key_equal<span class="token operator">&amp;</span> equal <span class="token operator">=</span> <span class="token function">key_equal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    <span class="token keyword">const</span> Allocator<span class="token operator">&amp;</span> alloc <span class="token operator">=</span> <span class="token function">Allocator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>以其他的容器创建</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token function">unordered_multimap</span><span class="token punctuation">(</span> <span class="token keyword">const</span> unordered_multimap<span class="token operator">&amp;</span> other <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">unordered_multimap</span><span class="token punctuation">(</span> <span class="token keyword">const</span> unordered_multimap<span class="token operator">&amp;</span> other<span class="token punctuation">,</span> <span class="token keyword">const</span> Allocator<span class="token operator">&amp;</span> alloc <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>还可以使用移动语义</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token function">unordered_multimap</span><span class="token punctuation">(</span> unordered_multimap<span class="token operator">&amp;&amp;</span> other <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">unordered_multimap</span><span class="token punctuation">(</span> unordered_multimap<span class="token operator">&amp;&amp;</span> other<span class="token punctuation">,</span> <span class="token keyword">const</span> Allocator<span class="token operator">&amp;</span> alloc <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><h3 id="operator"><a href="#operator" class="headerlink" title="operator="></a>operator=</h3>   <pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">unordered_multimap<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span> <span class="token keyword">const</span> unordered_multimap<span class="token operator">&amp;</span> other <span class="token punctuation">)</span><span class="token punctuation">;</span>unordered_multimap<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span> unordered_multimap<span class="token operator">&amp;&amp;</span> other <span class="token punctuation">)</span>    <span class="token keyword">noexcept</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>allocator_traits<span class="token operator">&lt;</span>Allocator<span class="token operator">></span><span class="token double-colon punctuation">::</span>is_always_equal<span class="token double-colon punctuation">::</span>value<span class="token operator">&amp;&amp;</span> std<span class="token double-colon punctuation">::</span>is_nothrow_move_assignable<span class="token operator">&lt;</span>Hash<span class="token operator">></span><span class="token double-colon punctuation">::</span>value <span class="token operator">&amp;&amp;</span> std<span class="token double-colon punctuation">::</span>is_nothrow_move_assignable<span class="token operator">&lt;</span>Pred<span class="token operator">></span><span class="token double-colon punctuation">::</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>unordered_multimap<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span> std<span class="token double-colon punctuation">::</span>initializer_list<span class="token operator">&lt;</span>value_type<span class="token operator">></span> ilist <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="get-allocator"><a href="#get-allocator" class="headerlink" title="get_allocator"></a>get_allocator</h3><p>返回与容器关联的分配器。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">allocator_type <span class="token function">get_allocator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">noexcept</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h2><h3 id="begin-end"><a href="#begin-end" class="headerlink" title="begin - end"></a>begin - end</h3><p>返回指向容器开头和结尾的迭代器。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">iterator <span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">noexcept</span><span class="token punctuation">;</span>const_iterator <span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">noexcept</span><span class="token punctuation">;</span>iterator <span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">noexcept</span><span class="token punctuation">;</span>const_iterator <span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">noexcept</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="cbegin-cend"><a href="#cbegin-cend" class="headerlink" title="cbegin - cend"></a>cbegin - cend</h3><p>返回指向容器开头和结尾的常量迭代器。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">const_iterator <span class="token function">cbegin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">noexcept</span><span class="token punctuation">;</span>const_iterator <span class="token function">cend</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">noexcept</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="容量"><a href="#容量" class="headerlink" title="容量"></a>容量</h2><h3 id="empty"><a href="#empty" class="headerlink" title="empty"></a>empty</h3><p>判断容器是否为空，空则为true</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token punctuation">[</span><span class="token punctuation">[</span>nodiscard<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token keyword">bool</span> <span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">noexcept</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="size"><a href="#size" class="headerlink" title="size"></a>size</h3><p>返回容器中的元素数, 即 std::distance(begin(), end()) 。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">size_type <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">noexcept</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="max-size"><a href="#max-size" class="headerlink" title="max_size"></a>max_size</h3><p>返回根据系统或库实现限制的容器可保有的元素最大数量</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">size_type <span class="token function">max_size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">noexcept</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="修改器"><a href="#修改器" class="headerlink" title="修改器"></a>修改器</h2><h3 id="clear"><a href="#clear" class="headerlink" title="clear"></a>clear</h3><p>擦除所有元素。此调用后 <code>size()</code> 返回零。非法化任何指代所含元素的引用、指针或迭代器。任何尾后迭代器亦被非法化</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">noexcept</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="insert"><a href="#insert" class="headerlink" title="insert"></a>insert</h3><p>插入元素到容器中的指定位置。</p><ol><li>插入 <code>value</code>返回由指向被插入元素的迭代器。 支持移动语义。</li></ol><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">iterator <span class="token function">insert</span><span class="token punctuation">(</span> <span class="token keyword">const</span> value_type<span class="token operator">&amp;</span> value <span class="token punctuation">)</span><span class="token punctuation">;</span>iterator <span class="token function">insert</span><span class="token punctuation">(</span> value_type<span class="token operator">&amp;&amp;</span> value <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">P</span> <span class="token operator">></span> iterator <span class="token function">insert</span><span class="token punctuation">(</span> P<span class="token operator">&amp;&amp;</span> value <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>插入 <code>value</code> 到尽可能接近，正好前于 <code>hint</code> 的位置。返回指向被插入元素。</li></ol><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">iterator <span class="token function">insert</span><span class="token punctuation">(</span> const_iterator hint<span class="token punctuation">,</span> <span class="token keyword">const</span> value_type<span class="token operator">&amp;</span> value <span class="token punctuation">)</span><span class="token punctuation">;</span>iterator <span class="token function">insert</span><span class="token punctuation">(</span> const_iterator hint<span class="token punctuation">,</span> value_type<span class="token operator">&amp;&amp;</span> value <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">P</span> <span class="token operator">></span> iterator <span class="token function">insert</span><span class="token punctuation">(</span> const_iterator hint<span class="token punctuation">,</span> P<span class="token operator">&amp;&amp;</span> value <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>插入来自范围 <code>[first, last)</code> 的元素。 </li></ol><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">InputIt</span> <span class="token operator">></span> <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span> InputIt first<span class="token punctuation">,</span> InputIt last <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="4"><li>插入来自 initializer_list <code>ilist</code> 的元素。</li></ol><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span> std<span class="token double-colon punctuation">::</span>initializer_list<span class="token operator">&lt;</span>value_type<span class="token operator">></span> ilist <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="5"><li> 若 nh 是空的结点把柄，则不做任何事。否则插入 <code>nh</code> 所占有的元素到容器并返回指向被插入元素的迭代器。</li></ol><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">iterator <span class="token function">insert</span><span class="token punctuation">(</span>node_type<span class="token operator">&amp;&amp;</span> nh<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="6"><li>若 <code>nh</code> 是空的<a href="https://zh.cppreference.com/w/cpp/container/node_handle">结点把柄</a>，则不做任何事并返回尾迭代器。否则，插入 <code>nh</code> 所占有的元素到容器，并返回指向拥有等于 nh.key() 的关键的元素的迭代器元素被插入到尽可能接近 <code>hint</code> 的位置。</li></ol><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">iterator <span class="token function">insert</span><span class="token punctuation">(</span>const_iterator hint<span class="token punctuation">,</span> node_type<span class="token operator">&amp;&amp;</span> nh<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="emplace"><a href="#emplace" class="headerlink" title="emplace"></a>emplace</h3><p>插入给定的 <code>args</code> 原位构造的新元素到容器。返回由指向被插入元素。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> Args <span class="token operator">></span> iterator <span class="token function">emplace</span><span class="token punctuation">(</span> Args<span class="token operator">&amp;&amp;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="emplace-hint"><a href="#emplace-hint" class="headerlink" title="emplace_hint"></a>emplace_hint</h3><p>插入新元素到容器，以 <code>hint</code> 为应当放置元素位置的建议。原位构造元素，即不进行复制或移动操作。返回指向新插入元素的迭代器。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> Args<span class="token operator">></span>iterator <span class="token function">emplace_hint</span><span class="token punctuation">(</span> const_iterator hint<span class="token punctuation">,</span> Args<span class="token operator">&amp;&amp;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="erase"><a href="#erase" class="headerlink" title="erase"></a>erase</h3><p>从容器擦除指定的元素。</p><p>1.移除位于pos的元素。返回指向下一个元素的迭代器。如一处的是最后一个，返回的是指向尾部的迭代器。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">iterator <span class="token function">erase</span><span class="token punctuation">(</span> iterator pos <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2.移除一定范围内的元素。返回指向下一个元素的迭代器。如一处的是最后一个，返回的是指向尾部的迭代器.</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">iterator <span class="token function">erase</span><span class="token punctuation">(</span> const_iterator first<span class="token punctuation">,</span> const_iterator last <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3.移除关键等于 <code>key</code> 的元素（若存在）。返回被移除的元素数。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">size_type <span class="token function">erase</span><span class="token punctuation">(</span> <span class="token keyword">const</span> key_type<span class="token operator">&amp;</span> key <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="swap"><a href="#swap" class="headerlink" title="swap"></a>swap</h3><p>将内容与其他容器交换。不在单独的元素上调用任何移动、复制或交换操作。所有迭代器和引用保持合法。尾后迭代器被非法化。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span> unordered_multimap<span class="token operator">&amp;</span> other <span class="token punctuation">)</span>    <span class="token keyword">noexcept</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>allocator_traits<span class="token operator">&lt;</span>Allocator<span class="token operator">></span><span class="token double-colon punctuation">::</span>is_always_equal<span class="token double-colon punctuation">::</span>value    <span class="token operator">&amp;&amp;</span> std<span class="token double-colon punctuation">::</span>is_nothrow_swappable<span class="token operator">&lt;</span>Hash<span class="token operator">></span><span class="token double-colon punctuation">::</span>value    <span class="token operator">&amp;&amp;</span> std<span class="token double-colon punctuation">::</span>is_nothrow_swappable<span class="token operator">&lt;</span>key_equal<span class="token operator">></span><span class="token double-colon punctuation">::</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="extract"><a href="#extract" class="headerlink" title="extract"></a>extract</h3><ol><li><p>解链含 position 所指向元素的结点并返回占有它的结点柄。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">node_type <span class="token function">extract</span><span class="token punctuation">(</span> const_iterator position <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>若容器拥有元素而其键等于 <code>x</code> ，则从容器解链该元素并返回占有它的结点句柄。否则，返回空结点句柄。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">node_type <span class="token function">extract</span><span class="token punctuation">(</span> <span class="token keyword">const</span> key_type<span class="token operator">&amp;</span> x <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h3 id="merge"><a href="#merge" class="headerlink" title="merge"></a>merge</h3><p>试图提取其他source中的每个元素，并插入到当前容器 。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">H2</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">P2</span><span class="token operator">></span><span class="token keyword">void</span> <span class="token function">merge</span><span class="token punctuation">(</span> std<span class="token double-colon punctuation">::</span>unordered_map<span class="token operator">&lt;</span>Key<span class="token punctuation">,</span> T<span class="token punctuation">,</span> H2<span class="token punctuation">,</span> P2<span class="token punctuation">,</span> Allocator<span class="token operator">></span><span class="token operator">&amp;</span> source <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">H2</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">P2</span><span class="token operator">></span><span class="token keyword">void</span> <span class="token function">merge</span><span class="token punctuation">(</span> std<span class="token double-colon punctuation">::</span>unordered_map<span class="token operator">&lt;</span>Key<span class="token punctuation">,</span> T<span class="token punctuation">,</span> H2<span class="token punctuation">,</span> P2<span class="token punctuation">,</span> Allocator<span class="token operator">></span><span class="token operator">&amp;&amp;</span> source <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">H2</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">P2</span><span class="token operator">></span><span class="token keyword">void</span> <span class="token function">merge</span><span class="token punctuation">(</span> std<span class="token double-colon punctuation">::</span>unordered_multimap<span class="token operator">&lt;</span>Key<span class="token punctuation">,</span> T<span class="token punctuation">,</span> H2<span class="token punctuation">,</span> P2<span class="token punctuation">,</span> Allocator<span class="token operator">></span><span class="token operator">&amp;</span> source <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">H2</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">P2</span><span class="token operator">></span><span class="token keyword">void</span> <span class="token function">merge</span><span class="token punctuation">(</span> std<span class="token double-colon punctuation">::</span>unordered_multimap<span class="token operator">&lt;</span>Key<span class="token punctuation">,</span> T<span class="token punctuation">,</span> H2<span class="token punctuation">,</span> P2<span class="token punctuation">,</span> Allocator<span class="token operator">></span><span class="token operator">&amp;&amp;</span> source <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h2><h3 id="count"><a href="#count" class="headerlink" title="count"></a>count</h3><p>返回拥有键比较等价于指定参数的元素数。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">size_type <span class="token function">count</span><span class="token punctuation">(</span> <span class="token keyword">const</span> Key<span class="token operator">&amp;</span> key <span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">K</span> <span class="token operator">></span> size_type <span class="token function">count</span><span class="token punctuation">(</span> <span class="token keyword">const</span> K<span class="token operator">&amp;</span> x <span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="find"><a href="#find" class="headerlink" title="find"></a>find</h3><p>寻找带有特定键的元素。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">iterator <span class="token function">find</span><span class="token punctuation">(</span> <span class="token keyword">const</span> Key<span class="token operator">&amp;</span> key <span class="token punctuation">)</span><span class="token punctuation">;</span>const_iterator <span class="token function">find</span><span class="token punctuation">(</span> <span class="token keyword">const</span> Key<span class="token operator">&amp;</span> key <span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">K</span> <span class="token operator">></span> iterator <span class="token function">find</span><span class="token punctuation">(</span> <span class="token keyword">const</span> K<span class="token operator">&amp;</span> x <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">K</span> <span class="token operator">></span> const_iterator <span class="token function">find</span><span class="token punctuation">(</span> <span class="token keyword">const</span> K<span class="token operator">&amp;</span> x <span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="contains"><a href="#contains" class="headerlink" title="contains"></a>contains</h3><p>检查容器是否含有带特定键的元素。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">bool</span> <span class="token function">contains</span><span class="token punctuation">(</span> <span class="token keyword">const</span> Key<span class="token operator">&amp;</span> key <span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">K</span> <span class="token operator">></span> <span class="token keyword">bool</span> <span class="token function">contains</span><span class="token punctuation">(</span> <span class="token keyword">const</span> K<span class="token operator">&amp;</span> x <span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="equal-range"><a href="#equal-range" class="headerlink" title="equal_range"></a>equal_range</h3><p>返回匹配特定键的元素范围.返回值第一个指向首个不小于 <code>key</code> 的元素，第二个指向首个大于<code>key</code> 的元素。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>pair<span class="token operator">&lt;</span>iterator<span class="token punctuation">,</span>iterator<span class="token operator">></span> <span class="token function">equal_range</span><span class="token punctuation">(</span> <span class="token keyword">const</span> Key<span class="token operator">&amp;</span> key <span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>pair<span class="token operator">&lt;</span>const_iterator<span class="token punctuation">,</span>const_iterator<span class="token operator">></span> <span class="token function">equal_range</span><span class="token punctuation">(</span> <span class="token keyword">const</span> Key<span class="token operator">&amp;</span> key <span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">K</span> <span class="token operator">></span>std<span class="token double-colon punctuation">::</span>pair<span class="token operator">&lt;</span>iterator<span class="token punctuation">,</span>iterator<span class="token operator">></span> <span class="token function">equal_range</span><span class="token punctuation">(</span> <span class="token keyword">const</span> K<span class="token operator">&amp;</span> x <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">K</span> <span class="token operator">></span>std<span class="token double-colon punctuation">::</span>pair<span class="token operator">&lt;</span>const_iterator<span class="token punctuation">,</span>const_iterator<span class="token operator">></span> <span class="token function">equal_range</span><span class="token punctuation">(</span> <span class="token keyword">const</span> K<span class="token operator">&amp;</span> x <span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="桶接口"><a href="#桶接口" class="headerlink" title="桶接口"></a>桶接口</h2><h3 id="begin-end-1"><a href="#begin-end-1" class="headerlink" title="begin - end"></a>begin - end</h3><p>返回指向下标为 <code>n</code> 的桶首元素的迭代器，指向指定的桶的开始和结尾</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">local_iterator <span class="token function">begin</span><span class="token punctuation">(</span> size_type n <span class="token punctuation">)</span><span class="token punctuation">;</span>const_local_iterator <span class="token function">begin</span><span class="token punctuation">(</span> size_type n <span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>local_iterator <span class="token function">end</span><span class="token punctuation">(</span> size_type n <span class="token punctuation">)</span><span class="token punctuation">;</span>const_local_iterator <span class="token function">end</span><span class="token punctuation">(</span> size_type n <span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="cbegin-cend-1"><a href="#cbegin-cend-1" class="headerlink" title="cbegin - cend"></a>cbegin - cend</h3><p>返回指向下标为 <code>n</code> 的桶首元素的迭代器，指向指定的桶的开始和结尾</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">const_local_iterator <span class="token function">cbegin</span><span class="token punctuation">(</span> size_type n <span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>const_local_iterator <span class="token function">cend</span><span class="token punctuation">(</span> size_type n <span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="bucket-count"><a href="#bucket-count" class="headerlink" title="bucket_count"></a>bucket_count</h3><p>返回容器中的桶数</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">size_type <span class="token function">bucket_count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="max-bucket-count"><a href="#max-bucket-count" class="headerlink" title="max_bucket_count"></a>max_bucket_count</h3><p>返回容器由于系统或库实现限制的能保有的最大桶数。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">size_type <span class="token function">max_bucket_count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="bucket-size"><a href="#bucket-size" class="headerlink" title="bucket_size"></a>bucket_size</h3><p>返回下标为 <code>n</code> 的桶中的元素数。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">size_type <span class="token function">bucket_size</span><span class="token punctuation">(</span> size_type n <span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="bucket"><a href="#bucket" class="headerlink" title="bucket"></a>bucket</h3><p>返回带有特定键的桶的下标.若 <code>bucket_count()</code> 为零则行为未定义。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">size_type <span class="token function">bucket</span><span class="token punctuation">(</span> <span class="token keyword">const</span> Key<span class="token operator">&amp;</span> key <span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="哈希策略"><a href="#哈希策略" class="headerlink" title="哈希策略"></a>哈希策略</h2><h3 id="load-factor"><a href="#load-factor" class="headerlink" title="load_factor"></a>load_factor</h3><p>返回每个桶的平均元素数量.即 <code>size()</code> 除以 <code>bucket_count()</code> 。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">float</span> <span class="token function">load_factor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="max-load-factor"><a href="#max-load-factor" class="headerlink" title="max_load_factor"></a>max_load_factor</h3><p>管理最大加载因子（每个桶的平均元素数）。若加载因子超出此阈值，则容器自动增加桶数。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">float</span> <span class="token function">max_load_factor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span> <span class="token comment">// 返回最大加载因子。</span><span class="token keyword">void</span> <span class="token function">max_load_factor</span><span class="token punctuation">(</span> <span class="token keyword">float</span> ml <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 设置最大加载因子为 ml 。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="rehash"><a href="#rehash" class="headerlink" title="rehash"></a>rehash</h3><p>为至少为指定数量的桶预留存储空间。这会重新生成哈希表。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">rehash</span><span class="token punctuation">(</span> size_type count <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="reserve"><a href="#reserve" class="headerlink" title="reserve"></a>reserve</h3><p>为至少为指定数量的元素预留存储空间。设置桶数为适应至少 count 个元素，而不超出最大加载因子所需的数，并重哈希容器，即考虑桶数已更改后将元素放进适合的桶。等效地调用 <code>rehash(std::ceil(count / max_load_factor()))</code> 。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">reserve</span><span class="token punctuation">(</span> size_type count <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="观察器"><a href="#观察器" class="headerlink" title="观察器"></a>观察器</h2><h3 id="hash-function"><a href="#hash-function" class="headerlink" title="hash_function"></a>hash_function</h3><p>返回用于对键哈希的函数</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">hasher <span class="token function">hash_function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="key-eq"><a href="#key-eq" class="headerlink" title="key_eq"></a>key_eq</h3><p>返回用于比较键的相等性的函数</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">key_equal <span class="token function">key_eq</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="非成员函数"><a href="#非成员函数" class="headerlink" title="非成员函数"></a>非成员函数</h2><h3 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h3><ol><li><code>operator==</code> </li></ol><h3 id="swap-1"><a href="#swap-1" class="headerlink" title="swap"></a>swap</h3><p><code>std::swap(std::unordered_multimap)</code>  特化 <code>std::swap</code> 算法</p><h3 id="擦除"><a href="#擦除" class="headerlink" title="擦除"></a>擦除</h3><p><code> erase_if(std::unordered_multimap)</code>  擦除所有满足特定判别标准的元素</p>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STL </tag>
            
            <tag> 无序关联容器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++ unordered_map API</title>
      <link href="/C-unordered-map-API.html"/>
      <url>/C-unordered-map-API.html</url>
      
        <content type="html"><![CDATA[<h2 id="C-unordered-map"><a href="#C-unordered-map" class="headerlink" title="C++ unordered_map"></a>C++ unordered_map</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">Key</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">Hash</span> <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>hash<span class="token operator">&lt;</span>Key<span class="token operator">></span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">KeyEqual</span> <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>equal_to<span class="token operator">&lt;</span>Key<span class="token operator">></span><span class="token punctuation">,</span>    <span class="token keyword">class</span> <span class="token class-name">Allocator</span> <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>allocator<span class="token operator">&lt;</span> std<span class="token double-colon punctuation">::</span>pair<span class="token operator">&lt;</span><span class="token keyword">const</span> Key<span class="token punctuation">,</span> T<span class="token operator">></span> <span class="token operator">></span><span class="token operator">></span> <span class="token keyword">class</span> <span class="token class-name">unordered_map</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> pmr <span class="token punctuation">&#123;</span>    <span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">Key</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">Hash</span> <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>hash<span class="token operator">&lt;</span>Key<span class="token operator">></span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">KeyEqual</span> <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>equal_to<span class="token operator">&lt;</span>Key<span class="token operator">>></span><span class="token keyword">using</span> unordered_map <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>unordered_map<span class="token operator">&lt;</span>Key<span class="token punctuation">,</span> T<span class="token punctuation">,</span> Hash<span class="token punctuation">,</span> Pred<span class="token punctuation">,</span>              std<span class="token double-colon punctuation">::</span>pmr<span class="token double-colon punctuation">::</span>polymorphic_allocator<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>pair<span class="token operator">&lt;</span><span class="token keyword">const</span> Key<span class="token punctuation">,</span>T<span class="token operator">>></span><span class="token operator">></span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>unordered_map</code> 是关联容器，含有带唯一键的键-值 pair 。搜索、插入和元素移除拥有平均常数时间复杂度。</p><p>元素在内部不以任何特定顺序排序，而是组织进桶中。元素放进哪个桶完全依赖于其键的哈希。这允许对单独元素的快速访问，因为一旦计算哈希，则它准确指代元素所放进的桶。</p><h2 id="成员类型"><a href="#成员类型" class="headerlink" title="成员类型"></a>成员类型</h2><table><thead><tr><th>成员类型</th><th>定义</th></tr></thead><tbody><tr><td><code>key_type</code></td><td><code>Key</code></td></tr><tr><td><code>mapped_type</code></td><td><code>T</code></td></tr><tr><td><code>value_type</code></td><td><code>std::pair&lt;const Key, T&gt;</code></td></tr><tr><td><code>size_type</code></td><td>无符号整数类型（通常是 <code>std::size_t</code> ）</td></tr><tr><td><code>difference_type</code></td><td>有符号整数类型（通常是 <code>std::ptrdiff_t</code> ）</td></tr><tr><td><code>hasher</code></td><td><code>Hash</code></td></tr><tr><td><code>key_equal</code></td><td><code>KeyEqual</code></td></tr><tr><td><code>allocator_type</code></td><td><code>Allocator</code></td></tr><tr><td><code>reference</code></td><td><code>value_type&amp;</code></td></tr><tr><td><code>const_reference</code></td><td><code>const value_type&amp;</code></td></tr><tr><td><code>pointer</code></td><td><code>std::allocator_traits&lt;Allocator&gt;::pointer</code></td></tr><tr><td><code>const_pointer</code></td><td><code>std::allocator_traits&lt;Allocator&gt;::const_pointer</code></td></tr><tr><td><code>iterator</code></td><td>遗留向前迭代器 (LegacyRandomAccessIterator)</td></tr><tr><td><code>const_iterator</code></td><td>常向前迭代器</td></tr><tr><td><code>local_iterator</code></td><td>类别、值、差、指针和引用类型都与 <code>iterator</code> 相同的迭代器类型。能用此迭代器在单个桶迭代，但不能跨桶。</td></tr><tr><td><code>const_local_iterator</code></td><td>类别、值、差、指针和引用类型都与 <code>const_iterator</code> 相同的迭代器类型。能用此迭代器在单个桶迭代，但不能跨桶。</td></tr><tr><td><code>node_type</code></td><td>表示容器结点的结点句柄特化</td></tr></tbody></table><p><code>insert_return_type</code>:描述插入 <code>node_type</code> 结果的类型，下列类型的特化，以模板实参 <code>iterator</code> 和 <code>node_type</code> 实例化。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">Iter</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">NodeType</span><span class="token operator">></span> <span class="token keyword">struct</span> <span class="token comment">/*unspecified*/</span> <span class="token punctuation">&#123;</span>    Iter     position<span class="token punctuation">;</span>    <span class="token keyword">bool</span>     inserted<span class="token punctuation">;</span>    NodeType node<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="构造"><a href="#构造" class="headerlink" title="构造"></a>构造</h2><h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><ol><li><p>创建一个空容器. </p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token function">unordered_map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">explicit</span> <span class="token function">unordered_map</span><span class="token punctuation">(</span> <span class="token keyword">const</span> Allocator<span class="token operator">&amp;</span> alloc <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">explicit</span> <span class="token function">unordered_map</span><span class="token punctuation">(</span> size_type bucket_count<span class="token punctuation">,</span> <span class="token keyword">const</span> Hash<span class="token operator">&amp;</span> hash <span class="token operator">=</span> <span class="token function">Hash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                       <span class="token keyword">const</span> key_equal<span class="token operator">&amp;</span> equal <span class="token operator">=</span> <span class="token function">key_equal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">const</span> Allocator<span class="token operator">&amp;</span> alloc <span class="token operator">=</span> <span class="token function">Allocator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>初始化列表</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token function">unordered_map</span><span class="token punctuation">(</span> std<span class="token double-colon punctuation">::</span>initializer_list<span class="token operator">&lt;</span>value_type<span class="token operator">></span> init<span class="token punctuation">,</span>              size_type bucket_count <span class="token operator">=</span> <span class="token comment">/*implementation-defined*/</span><span class="token punctuation">,</span>              <span class="token keyword">const</span> Hash<span class="token operator">&amp;</span> hash <span class="token operator">=</span> <span class="token function">Hash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">const</span> key_equal<span class="token operator">&amp;</span> equal <span class="token operator">=</span> <span class="token function">key_equal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>              <span class="token keyword">const</span> Allocator<span class="token operator">&amp;</span> alloc <span class="token operator">=</span> <span class="token function">Allocator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>以一对迭代器创建</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">InputIt</span> <span class="token operator">></span><span class="token function">unordered_map</span><span class="token punctuation">(</span> InputIt first<span class="token punctuation">,</span> InputIt last<span class="token punctuation">,</span> size_type bucket_count <span class="token operator">=</span> <span class="token comment">/*implementation-defined*/</span><span class="token punctuation">,</span>               <span class="token keyword">const</span> Hash<span class="token operator">&amp;</span> hash <span class="token operator">=</span> <span class="token function">Hash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">const</span> key_equal<span class="token operator">&amp;</span> equal <span class="token operator">=</span> <span class="token function">key_equal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>               <span class="token keyword">const</span> Allocator<span class="token operator">&amp;</span> alloc <span class="token operator">=</span> <span class="token function">Allocator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>以其他的容器创建</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token function">unordered_map</span><span class="token punctuation">(</span> <span class="token keyword">const</span> unordered_map<span class="token operator">&amp;</span> other <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">unordered_map</span><span class="token punctuation">(</span> <span class="token keyword">const</span> unordered_map<span class="token operator">&amp;</span> other<span class="token punctuation">,</span> <span class="token keyword">const</span> Allocator<span class="token operator">&amp;</span> alloc <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>还可以使用移动语义</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token function">unordered_map</span><span class="token punctuation">(</span> unordered_map<span class="token operator">&amp;&amp;</span> other <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">unordered_map</span><span class="token punctuation">(</span> unordered_map<span class="token operator">&amp;&amp;</span> other<span class="token punctuation">,</span> <span class="token keyword">const</span> Allocator<span class="token operator">&amp;</span> alloc <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><h3 id="operator"><a href="#operator" class="headerlink" title="operator="></a>operator=</h3>   <pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">unordered_map<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span> <span class="token keyword">const</span> unordered_map<span class="token operator">&amp;</span> other <span class="token punctuation">)</span><span class="token punctuation">;</span>unordered_map<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span> unordered_map<span class="token operator">&amp;&amp;</span> other <span class="token punctuation">)</span> <span class="token keyword">noexcept</span><span class="token punctuation">(</span><span class="token comment">/*  */</span><span class="token punctuation">)</span><span class="token punctuation">;</span>unordered_map<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span> std<span class="token double-colon punctuation">::</span>initializer_list<span class="token operator">&lt;</span>value_type<span class="token operator">></span> ilist <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="get-allocator"><a href="#get-allocator" class="headerlink" title="get_allocator"></a>get_allocator</h3><p>返回与容器关联的分配器。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">allocator_type <span class="token function">get_allocator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">noexcept</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h2><h3 id="begin-end"><a href="#begin-end" class="headerlink" title="begin - end"></a>begin - end</h3><p>返回指向容器开头和结尾的迭代器。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">iterator <span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">noexcept</span><span class="token punctuation">;</span>const_iterator <span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">noexcept</span><span class="token punctuation">;</span>iterator <span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">noexcept</span><span class="token punctuation">;</span>const_iterator <span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">noexcept</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="cbegin-cend"><a href="#cbegin-cend" class="headerlink" title="cbegin - cend"></a>cbegin - cend</h3><p>返回指向容器开头和结尾的常量迭代器。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">const_iterator <span class="token function">cbegin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">noexcept</span><span class="token punctuation">;</span>const_iterator <span class="token function">cend</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">noexcept</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="容量"><a href="#容量" class="headerlink" title="容量"></a>容量</h2><h3 id="empty"><a href="#empty" class="headerlink" title="empty"></a>empty</h3><p>判断容器是否为空，空则为true</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token punctuation">[</span><span class="token punctuation">[</span>nodiscard<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token keyword">bool</span> <span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">noexcept</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="size"><a href="#size" class="headerlink" title="size"></a>size</h3><p>返回容器中的元素数, 即 std::distance(begin(), end()) 。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">size_type <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">noexcept</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="max-size"><a href="#max-size" class="headerlink" title="max_size"></a>max_size</h3><p>返回根据系统或库实现限制的容器可保有的元素最大数量</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">size_type <span class="token function">max_size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">noexcept</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="修改器"><a href="#修改器" class="headerlink" title="修改器"></a>修改器</h2><h3 id="clear"><a href="#clear" class="headerlink" title="clear"></a>clear</h3><p>擦除所有元素。此调用后 <code>size()</code> 返回零。非法化任何指代所含元素的引用、指针或迭代器。任何尾后迭代器亦被非法化</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">noexcept</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="insert"><a href="#insert" class="headerlink" title="insert"></a>insert</h3><p>插入元素到容器中的指定位置。</p><ol><li>插入 <code>value</code>返回由指向被插入元素（或阻止插入的元素）的迭代器和若插入发生则设为 true 的 bool 值。 支持移动语义。</li></ol><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>pair<span class="token operator">&lt;</span>iterator<span class="token punctuation">,</span><span class="token keyword">bool</span><span class="token operator">></span> <span class="token function">insert</span><span class="token punctuation">(</span> value_type<span class="token operator">&amp;&amp;</span> value <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">P</span> <span class="token operator">></span>std<span class="token double-colon punctuation">::</span>pair<span class="token operator">&lt;</span>iterator<span class="token punctuation">,</span><span class="token keyword">bool</span><span class="token operator">></span> <span class="token function">insert</span><span class="token punctuation">(</span> P<span class="token operator">&amp;&amp;</span> value <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>插入 <code>value</code> 到尽可能接近，正好前于 <code>hint</code> 的位置。返回指向被插入元素，或阻止插入的元素的迭代器。</li></ol><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">iterator <span class="token function">insert</span><span class="token punctuation">(</span> const_iterator hint<span class="token punctuation">,</span> value_type<span class="token operator">&amp;&amp;</span> value <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">P</span> <span class="token operator">></span>iterator <span class="token function">insert</span><span class="token punctuation">(</span> const_iterator hint<span class="token punctuation">,</span> P<span class="token operator">&amp;&amp;</span> value <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>插入来自范围 <code>[first, last)</code> 的元素。 若范围中的多个元素拥有比较等价的关键，则插入哪个元素是未指定的</li></ol><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">InputIt</span> <span class="token operator">></span><span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span> InputIt first<span class="token punctuation">,</span> InputIt last <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="4"><li>插入来自 initializer_list <code>ilist</code> 的元素。 若范围中的多个元素拥有比较等价的关键，则插入哪个元素是未指定的</li></ol><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span> std<span class="token double-colon punctuation">::</span>initializer_list<span class="token operator">&lt;</span>value_type<span class="token operator">></span> ilist <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="5"><li> 若 nh 是空的结点把柄，则不做任何事。否则插入 nh 所占有的元素到容器，若容器尚未含有拥有等价于 nh.key() 的关键的元素。</li></ol><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">insert_return_type <span class="token function">insert</span><span class="token punctuation">(</span>node_type<span class="token operator">&amp;&amp;</span> nh<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="6"><li>若 nh 是空的结点把柄，则不做任何事并返回尾迭代器。否则，插入 nh 所占有的元素到容器，若容器尚未含有拥有等价于 nh.key() 的关键的元素，并返回指向拥有等于 nh.key() 的关键的元素的迭代器（无关乎插入成功还是失败）。若插入成功，则从 nh 移动，否则它保持该元素的所有权。元素被插入到尽可能接近正好先于 hint 的位置。</li></ol><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">iterator <span class="token function">insert</span><span class="token punctuation">(</span>const_iterator hint<span class="token punctuation">,</span> node_type<span class="token operator">&amp;&amp;</span> nh<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="emplace"><a href="#emplace" class="headerlink" title="emplace"></a>emplace</h3><p>若容器中无拥有该关键的元素，则插入以给定的 <code>args</code> 原位构造的新元素到容器。返回由指向被插入元素，或若不发生插入则为既存元素的迭代器，和指代插入是否发生的 bool （若发生插入则为 true ，否则为 false ）。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> Args <span class="token operator">></span>std<span class="token double-colon punctuation">::</span>pair<span class="token operator">&lt;</span>iterator<span class="token punctuation">,</span><span class="token keyword">bool</span><span class="token operator">></span> <span class="token function">emplace</span><span class="token punctuation">(</span> Args<span class="token operator">&amp;&amp;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="insert-or-assign"><a href="#insert-or-assign" class="headerlink" title="insert_or_assign"></a>insert_or_assign</h3><p>插入元素，或若键已存在则赋值给当前元素.</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">M</span><span class="token operator">></span>std<span class="token double-colon punctuation">::</span>pair<span class="token operator">&lt;</span>iterator<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token operator">></span> <span class="token function">insert_or_assign</span><span class="token punctuation">(</span><span class="token keyword">const</span> key_type<span class="token operator">&amp;</span> k<span class="token punctuation">,</span> M<span class="token operator">&amp;&amp;</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">M</span><span class="token operator">></span>std<span class="token double-colon punctuation">::</span>pair<span class="token operator">&lt;</span>iterator<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token operator">></span> <span class="token function">insert_or_assign</span><span class="token punctuation">(</span>key_type<span class="token operator">&amp;&amp;</span> k<span class="token punctuation">,</span> M<span class="token operator">&amp;&amp;</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">M</span><span class="token operator">></span>iterator <span class="token function">insert_or_assign</span><span class="token punctuation">(</span>const_iterator hint<span class="token punctuation">,</span> <span class="token keyword">const</span> key_type<span class="token operator">&amp;</span> k<span class="token punctuation">,</span> M<span class="token operator">&amp;&amp;</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">M</span><span class="token operator">></span>iterator <span class="token function">insert_or_assign</span><span class="token punctuation">(</span>const_iterator hint<span class="token punctuation">,</span> key_type<span class="token operator">&amp;&amp;</span> k<span class="token punctuation">,</span> M<span class="token operator">&amp;&amp;</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="emplace-hint"><a href="#emplace-hint" class="headerlink" title="emplace_hint"></a>emplace_hint</h3><p>插入新元素到容器中尽可能接近于恰在 <code>hint</code> 前的位置。原位构造元素，即不进行复制或移动操作。返回指向新插入元素的迭代器。若因元素已存在而插入失败，则返回指向拥有等价关键的既存元素的迭代器。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> Args<span class="token operator">></span>iterator <span class="token function">emplace_hint</span><span class="token punctuation">(</span> const_iterator hint<span class="token punctuation">,</span> Args<span class="token operator">&amp;&amp;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="try-emplace"><a href="#try-emplace" class="headerlink" title="try_emplace"></a>try_emplace</h3><p>若键不存在则原位插入，若键存在则不做任何事.</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> Args<span class="token operator">></span>pair<span class="token operator">&lt;</span>iterator<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token operator">></span> <span class="token function">try_emplace</span><span class="token punctuation">(</span><span class="token keyword">const</span> key_type<span class="token operator">&amp;</span> k<span class="token punctuation">,</span> Args<span class="token operator">&amp;&amp;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> Args<span class="token operator">></span>pair<span class="token operator">&lt;</span>iterator<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token operator">></span> <span class="token function">try_emplace</span><span class="token punctuation">(</span>key_type<span class="token operator">&amp;&amp;</span> k<span class="token punctuation">,</span> Args<span class="token operator">&amp;&amp;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> Args<span class="token operator">></span>iterator <span class="token function">try_emplace</span><span class="token punctuation">(</span>const_iterator hint<span class="token punctuation">,</span> <span class="token keyword">const</span> key_type<span class="token operator">&amp;</span> k<span class="token punctuation">,</span> Args<span class="token operator">&amp;&amp;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> Args<span class="token operator">></span>iterator <span class="token function">try_emplace</span><span class="token punctuation">(</span>const_iterator hint<span class="token punctuation">,</span> key_type<span class="token operator">&amp;&amp;</span> k<span class="token punctuation">,</span> Args<span class="token operator">&amp;&amp;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="erase"><a href="#erase" class="headerlink" title="erase"></a>erase</h3><p>从容器擦除指定的元素。</p><p>1.移除位于pos的元素。返回指向下一个元素的迭代器。如一处的是最后一个，返回的是指向尾部的迭代器。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">iterator <span class="token function">erase</span><span class="token punctuation">(</span> iterator pos <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2.移除一定范围内的元素。返回指向下一个元素的迭代器。如一处的是最后一个，返回的是指向尾部的迭代器.</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">iterator <span class="token function">erase</span><span class="token punctuation">(</span> const_iterator first<span class="token punctuation">,</span> const_iterator last <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3.移除关键等于 <code>key</code> 的元素（若存在）。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">size_type <span class="token function">erase</span><span class="token punctuation">(</span> <span class="token keyword">const</span> key_type<span class="token operator">&amp;</span> key <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="swap"><a href="#swap" class="headerlink" title="swap"></a>swap</h3><p>将内容与其他容器交换。不在单独的元素上调用任何移动、复制或交换操作。所有迭代器和引用保持合法。尾后迭代器被非法化。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span> unordered_map<span class="token operator">&amp;</span> other <span class="token punctuation">)</span> <span class="token keyword">noexcept</span><span class="token punctuation">(</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>allocator_traits<span class="token operator">&lt;</span>Allocator<span class="token operator">></span><span class="token double-colon punctuation">::</span>is_always_equal<span class="token double-colon punctuation">::</span>value <span class="token operator">&amp;&amp;</span> std<span class="token double-colon punctuation">::</span>is_nothrow_swappable<span class="token operator">&lt;</span>Hash<span class="token operator">></span><span class="token double-colon punctuation">::</span>value            <span class="token operator">&amp;&amp;</span> std<span class="token double-colon punctuation">::</span>is_nothrow_swappable<span class="token operator">&lt;</span>key_equal<span class="token operator">></span><span class="token double-colon punctuation">::</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="extract"><a href="#extract" class="headerlink" title="extract"></a>extract</h3><ol><li><p>解链含 position 所指向元素的结点并返回占有它的结点柄。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">node_type <span class="token function">extract</span><span class="token punctuation">(</span> const_iterator position <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>若容器拥有元素而其键等于 <code>x</code> ，则从容器解链该元素并返回占有它的结点句柄。否则，返回空结点句柄。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">node_type <span class="token function">extract</span><span class="token punctuation">(</span> <span class="token keyword">const</span> key_type<span class="token operator">&amp;</span> x <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h3 id="merge"><a href="#merge" class="headerlink" title="merge"></a>merge</h3><p>试图提取其他set中的每个元素，并插入到当前容器 。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">H2</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">P2</span><span class="token operator">></span><span class="token keyword">void</span> <span class="token function">merge</span><span class="token punctuation">(</span> std<span class="token double-colon punctuation">::</span>unordered_map<span class="token operator">&lt;</span>Key<span class="token punctuation">,</span> T<span class="token punctuation">,</span> H2<span class="token punctuation">,</span> P2<span class="token punctuation">,</span> Allocator<span class="token operator">></span><span class="token operator">&amp;</span> source <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">H2</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">P2</span><span class="token operator">></span><span class="token keyword">void</span> <span class="token function">merge</span><span class="token punctuation">(</span> std<span class="token double-colon punctuation">::</span>unordered_map<span class="token operator">&lt;</span>Key<span class="token punctuation">,</span> T<span class="token punctuation">,</span> H2<span class="token punctuation">,</span> P2<span class="token punctuation">,</span> Allocator<span class="token operator">></span><span class="token operator">&amp;&amp;</span> source <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">H2</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">P2</span><span class="token operator">></span><span class="token keyword">void</span> <span class="token function">merge</span><span class="token punctuation">(</span> std<span class="token double-colon punctuation">::</span>unordered_multimap<span class="token operator">&lt;</span>Key<span class="token punctuation">,</span> T<span class="token punctuation">,</span> H2<span class="token punctuation">,</span> P2<span class="token punctuation">,</span> Allocator<span class="token operator">></span><span class="token operator">&amp;</span> source <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">H2</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">P2</span><span class="token operator">></span><span class="token keyword">void</span> <span class="token function">merge</span><span class="token punctuation">(</span> std<span class="token double-colon punctuation">::</span>unordered_multimap<span class="token operator">&lt;</span>Key<span class="token punctuation">,</span> T<span class="token punctuation">,</span> H2<span class="token punctuation">,</span> P2<span class="token punctuation">,</span> Allocator<span class="token operator">></span><span class="token operator">&amp;&amp;</span> source <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h2><h3 id="at"><a href="#at" class="headerlink" title="at"></a>at</h3><p>访问或插入指定的元素，同时进行越界检查</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">const</span> T<span class="token operator">&amp;</span> <span class="token function">at</span><span class="token punctuation">(</span> <span class="token keyword">const</span> Key<span class="token operator">&amp;</span> key <span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="operator-1"><a href="#operator-1" class="headerlink" title="operator[]"></a>operator[]</h3><p>访问或插入指定的元素</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">T<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span> <span class="token keyword">const</span> Key<span class="token operator">&amp;</span> key <span class="token punctuation">)</span><span class="token punctuation">;</span>T<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span> Key<span class="token operator">&amp;&amp;</span> key <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="count"><a href="#count" class="headerlink" title="count"></a>count</h3><p>返回拥有键比较等价于指定参数的元素数，因为此容器不允许重复故为 1 或 0。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">size_type <span class="token function">count</span><span class="token punctuation">(</span> <span class="token keyword">const</span> Key<span class="token operator">&amp;</span> key <span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">K</span> <span class="token operator">></span>size_type <span class="token function">count</span><span class="token punctuation">(</span> <span class="token keyword">const</span> K<span class="token operator">&amp;</span> x <span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="find"><a href="#find" class="headerlink" title="find"></a>find</h3><p>寻找带有特定键的元素。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">iterator <span class="token function">find</span><span class="token punctuation">(</span> <span class="token keyword">const</span> Key<span class="token operator">&amp;</span> key <span class="token punctuation">)</span><span class="token punctuation">;</span>const_iterator <span class="token function">find</span><span class="token punctuation">(</span> <span class="token keyword">const</span> Key<span class="token operator">&amp;</span> key <span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">K</span> <span class="token operator">></span> iterator <span class="token function">find</span><span class="token punctuation">(</span> <span class="token keyword">const</span> K<span class="token operator">&amp;</span> x <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">K</span> <span class="token operator">></span> const_iterator <span class="token function">find</span><span class="token punctuation">(</span> <span class="token keyword">const</span> K<span class="token operator">&amp;</span> x <span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="contains"><a href="#contains" class="headerlink" title="contains"></a>contains</h3><p>检查容器是否含有带特定键的元素。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">bool</span> <span class="token function">contains</span><span class="token punctuation">(</span> <span class="token keyword">const</span> Key<span class="token operator">&amp;</span> key <span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">K</span> <span class="token operator">></span> <span class="token keyword">bool</span> <span class="token function">contains</span><span class="token punctuation">(</span> <span class="token keyword">const</span> K<span class="token operator">&amp;</span> x <span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="equal-range"><a href="#equal-range" class="headerlink" title="equal_range"></a>equal_range</h3><p>返回匹配特定键的元素范围.返回值第一个指向首个不小于 <code>key</code> 的元素，第二个指向首个大于<code>key</code> 的元素。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>pair<span class="token operator">&lt;</span>iterator<span class="token punctuation">,</span>iterator<span class="token operator">></span> <span class="token function">equal_range</span><span class="token punctuation">(</span> <span class="token keyword">const</span> Key<span class="token operator">&amp;</span> key <span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>pair<span class="token operator">&lt;</span>const_iterator<span class="token punctuation">,</span>const_iterator<span class="token operator">></span> <span class="token function">equal_range</span><span class="token punctuation">(</span> <span class="token keyword">const</span> Key<span class="token operator">&amp;</span> key <span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">K</span> <span class="token operator">></span>std<span class="token double-colon punctuation">::</span>pair<span class="token operator">&lt;</span>iterator<span class="token punctuation">,</span>iterator<span class="token operator">></span> <span class="token function">equal_range</span><span class="token punctuation">(</span> <span class="token keyword">const</span> K<span class="token operator">&amp;</span> x <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">K</span> <span class="token operator">></span>std<span class="token double-colon punctuation">::</span>pair<span class="token operator">&lt;</span>const_iterator<span class="token punctuation">,</span>const_iterator<span class="token operator">></span> <span class="token function">equal_range</span><span class="token punctuation">(</span> <span class="token keyword">const</span> K<span class="token operator">&amp;</span> x <span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="桶接口"><a href="#桶接口" class="headerlink" title="桶接口"></a>桶接口</h2><h3 id="begin-end-1"><a href="#begin-end-1" class="headerlink" title="begin - end"></a>begin - end</h3><p>返回指向下标为 <code>n</code> 的桶首元素的迭代器，指向指定的桶的开始和结尾</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">local_iterator <span class="token function">begin</span><span class="token punctuation">(</span> size_type n <span class="token punctuation">)</span><span class="token punctuation">;</span>const_local_iterator <span class="token function">begin</span><span class="token punctuation">(</span> size_type n <span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>local_iterator <span class="token function">end</span><span class="token punctuation">(</span> size_type n <span class="token punctuation">)</span><span class="token punctuation">;</span>const_local_iterator <span class="token function">end</span><span class="token punctuation">(</span> size_type n <span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="cbegin-cend-1"><a href="#cbegin-cend-1" class="headerlink" title="cbegin - cend"></a>cbegin - cend</h3><p>返回指向下标为 <code>n</code> 的桶首元素的迭代器，指向指定的桶的开始和结尾</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">const_local_iterator <span class="token function">cbegin</span><span class="token punctuation">(</span> size_type n <span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>const_local_iterator <span class="token function">cend</span><span class="token punctuation">(</span> size_type n <span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="bucket-count"><a href="#bucket-count" class="headerlink" title="bucket_count"></a>bucket_count</h3><p>返回桶数</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">size_type <span class="token function">bucket_count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="max-bucket-count"><a href="#max-bucket-count" class="headerlink" title="max_bucket_count"></a>max_bucket_count</h3><p>返回容器由于系统或库实现限制的能保有的最大桶数。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">size_type <span class="token function">max_bucket_count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="bucket-size"><a href="#bucket-size" class="headerlink" title="bucket_size"></a>bucket_size</h3><p>返回下标为 <code>n</code> 的桶中的元素数。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">size_type <span class="token function">bucket_size</span><span class="token punctuation">(</span> size_type n <span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="bucket"><a href="#bucket" class="headerlink" title="bucket"></a>bucket</h3><p>返回带有特定键的桶</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">size_type <span class="token function">bucket</span><span class="token punctuation">(</span> <span class="token keyword">const</span> Key<span class="token operator">&amp;</span> key <span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="哈希策略"><a href="#哈希策略" class="headerlink" title="哈希策略"></a>哈希策略</h2><h3 id="load-factor"><a href="#load-factor" class="headerlink" title="load_factor"></a>load_factor</h3><p>返回每个桶的平均元素数量</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">float</span> <span class="token function">load_factor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="max-load-factor"><a href="#max-load-factor" class="headerlink" title="max_load_factor"></a>max_load_factor</h3><p>管理每个桶的平均元素数量的最大值</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">float</span> <span class="token function">max_load_factor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span> <span class="token comment">// 返回最大加载因子。void max_load_factor( float ml ); // 设置最大加载因子为 ml 。</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="rehash"><a href="#rehash" class="headerlink" title="rehash"></a>rehash</h3><p>为至少为指定数量的桶预留存储空间。这会重新生成哈希表。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">rehash</span><span class="token punctuation">(</span> size_type count <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="reserve"><a href="#reserve" class="headerlink" title="reserve"></a>reserve</h3><p>为至少为指定数量的元素预留存储空间。这会重新生成哈希表。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">reserve</span><span class="token punctuation">(</span> size_type count <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="观察器"><a href="#观察器" class="headerlink" title="观察器"></a>观察器</h2><h3 id="hash-function"><a href="#hash-function" class="headerlink" title="hash_function"></a>hash_function</h3><p>返回用于对键哈希的函数</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">hasher <span class="token function">hash_function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="key-eq"><a href="#key-eq" class="headerlink" title="key_eq"></a>key_eq</h3><p>返回用于比较键的相等性的函数</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">key_equal <span class="token function">key_eq</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="非成员函数"><a href="#非成员函数" class="headerlink" title="非成员函数"></a>非成员函数</h2><h3 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h3><ol><li><code>operator==</code> </li></ol><h3 id="swap-1"><a href="#swap-1" class="headerlink" title="swap"></a>swap</h3><p><code>std::swap(std::unordered_map)</code>  特化 <code>std::swap</code> 算法</p><h3 id="擦除"><a href="#擦除" class="headerlink" title="擦除"></a>擦除</h3><p><code> erase_if(std::unordered_map)</code>  擦除所有满足特定判别标准的元素</p>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STL </tag>
            
            <tag> 无序关联容器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++ unordered_set API</title>
      <link href="/C-unordered-set-API.html"/>
      <url>/C-unordered-set-API.html</url>
      
        <content type="html"><![CDATA[<h2 id="C-unordered-set"><a href="#C-unordered-set" class="headerlink" title="C++ unordered_set"></a>C++ unordered_set</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">Key</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">Hash</span> <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>hash<span class="token operator">&lt;</span>Key<span class="token operator">></span><span class="token punctuation">,</span><span class="token keyword">class</span> <span class="token class-name">KeyEqual</span> <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>equal_to<span class="token operator">&lt;</span>Key<span class="token operator">></span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">Allocator</span> <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>allocator<span class="token operator">&lt;</span>Key<span class="token operator">></span><span class="token operator">></span> <span class="token keyword">class</span> <span class="token class-name">unordered_set</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> pmr <span class="token punctuation">&#123;</span>    <span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">Key</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">Hash</span> <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>hash<span class="token operator">&lt;</span>Key<span class="token operator">></span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">Pred</span> <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>equal_to<span class="token operator">&lt;</span>Key<span class="token operator">>></span>    <span class="token keyword">using</span> unordered_set <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>unordered_set<span class="token operator">&lt;</span>Key<span class="token punctuation">,</span> Hash<span class="token punctuation">,</span> Pred<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>pmr<span class="token double-colon punctuation">::</span>polymorphic_allocator<span class="token operator">&lt;</span>Key<span class="token operator">>></span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>unordered_set</code> 是含有 Key 类型唯一对象集合的关联容器。搜索、插入和移除拥有平均常数时间复杂度。</p><p>在内部，元素并不以任何特别顺序排序，而是组织进桶中。元素被放进哪个桶完全依赖其值的哈希。这允许对单独元素的快速访问，因为哈希一旦确定，就准确指代元素被放入的桶。</p><p>不可修改容器元素（即使通过非 const 迭代器），因为修改可能更改元素的哈希，并破坏容器</p><h2 id="成员类型"><a href="#成员类型" class="headerlink" title="成员类型"></a>成员类型</h2><table><thead><tr><th>成员类型</th><th>定义</th></tr></thead><tbody><tr><td><code>key_type</code></td><td><code>Key</code></td></tr><tr><td><code>value_type</code></td><td><code>Key</code></td></tr><tr><td><code>size_type</code></td><td>无符号整数类型（通常是 <code>std::size_t</code> ）</td></tr><tr><td><code>difference_type</code></td><td>有符号整数类型（通常是 <code>std::ptrdiff_t</code> ）</td></tr><tr><td><code>hasher</code></td><td><code>Hash</code></td></tr><tr><td><code>key_equal</code></td><td><code>KeyEqual</code></td></tr><tr><td><code>allocator_type</code></td><td><code>Allocator</code></td></tr><tr><td><code>reference</code></td><td><code>value_type&amp;</code></td></tr><tr><td><code>const_reference</code></td><td><code>const value_type&amp;</code></td></tr><tr><td><code>pointer</code></td><td><code>std::allocator_traits&lt;Allocator&gt;::pointer</code></td></tr><tr><td><code>const_pointer</code></td><td><code>std::allocator_traits&lt;Allocator&gt;::const_pointer</code></td></tr><tr><td><code>iterator</code></td><td>常遗留向前迭代器 (LegacyForwardIterator)</td></tr><tr><td><code>const_iterator</code></td><td>常向前迭代器</td></tr><tr><td><code>local_iterator</code></td><td>类别、值、差、指针和引用类型都与 <code>iterator</code> 相同的迭代器类型。<br/>能用此迭代器在单个桶迭代，但不能跨桶。</td></tr><tr><td><code>const_local_iterator</code></td><td>类别、值、差、指针和引用类型都与 <code>const_iterator</code> 相同的迭代器类型。<br/>能用此迭代器在单个桶迭代，但不能跨桶。</td></tr><tr><td><code>node_type</code></td><td>表示容器结点的结点句柄特化</td></tr></tbody></table><p><code>insert_return_type</code>:描述插入 <code>node_type</code> 结果的类型，下列类型的特化，以模板实参 <code>iterator</code> 和 <code>node_type</code> 实例化。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">Iter</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">NodeType</span><span class="token operator">></span> <span class="token keyword">struct</span> <span class="token comment">/*unspecified*/</span> <span class="token punctuation">&#123;</span>    Iter     position<span class="token punctuation">;</span>    <span class="token keyword">bool</span>     inserted<span class="token punctuation">;</span>    NodeType node<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="构造"><a href="#构造" class="headerlink" title="构造"></a>构造</h2><h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><ol><li><p>创建一个空<code>unordered_set</code>. </p><p>`explicit unordered_set( size_type bucket_count, const Hash&amp; hash = Hash(),</p><pre><code>                    const key_equal&amp; equal = key_equal(), const Allocator&amp; alloc = Allocator() );`</code></pre><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>unordered_set<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> <span class="token function">v</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>初始化列表</p><p>`unordered_set( std::initializer_list<value_type> init,</p><pre><code>           size_type bucket_count = /*implementation-defined*/,           const Hash&amp; hash = Hash(), const key_equal&amp; equal = key_equal(),           const Allocator&amp; alloc = Allocator() );`</code></pre><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>unordered_set<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token string">"aaa"</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>string a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// aaa bbb ccc</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>以一对迭代器创建</p><p>`template&lt; class InputIt &gt;<br>  unordered_set( InputIt first, InputIt last, size_type bucket_count = /<em>implementation-defined</em>/,</p><pre><code>           const Hash&amp; hash = Hash(), const key_equal&amp; equal = key_equal(),           const Allocator&amp; alloc = Allocator() );`</code></pre><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v1<span class="token punctuation">&#123;</span><span class="token string">"aaa"</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>unordered_set<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> <span class="token function">v</span><span class="token punctuation">(</span>v1<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v1<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>string a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// aaa bbb ccc</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>以其他的vector容器创建</p><p><code>unordered_set( const unordered_set&amp; other, const Allocator&amp; alloc );</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>unordered_set<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v1<span class="token punctuation">&#123;</span><span class="token string">"aaa"</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>unordered_set<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> <span class="token function">v</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>string a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// aaa bbb ccc</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>还可以使用移动语义</p><p><code>unordered_set( unordered_set&amp;&amp; other, const Allocator&amp; alloc );</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>unordered_set<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v1<span class="token punctuation">&#123;</span><span class="token string">"aaa"</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>unordered_set<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> <span class="token function">v</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>string a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// aaa bbb ccc</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="operator"><a href="#operator" class="headerlink" title="operator="></a>operator=</h3><p><code>unordered_set&amp; operator=( const unordered_set&amp; other );</code><br><code>unordered_set&amp; operator=( unordered_set&amp;&amp; other ) noexcept</code><br><code>unordered_set&amp; operator=( std::initializer_list&lt;value_type&gt; ilist );</code></p>   <pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>unordered_set<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token string">"aaa"</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>unordered_set<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v1 <span class="token operator">=</span> v<span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>unordered_set<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v2 <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>unordered_set<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v3 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"aaa"</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>string a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// aaa bbb ccc</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="get-allocator"><a href="#get-allocator" class="headerlink" title="get_allocator"></a>get_allocator</h3><p><code>allocator_type get_allocator() const noexcept;</code></p><p>返回与容器关联的分配器。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>unordered_set<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v<span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>unordered_set<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span><span class="token double-colon punctuation">::</span>allocator_type alloc_type <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">get_allocator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h2><h3 id="begin-end"><a href="#begin-end" class="headerlink" title="begin - end"></a>begin - end</h3><p><code>iterator begin() noexcept;</code>  <code>const_iterator begin() const noexcept;</code><br><code>iterator end() noexcept;</code>  <code>const_iterator end() const noexcept;</code></p><p>返回指向容器开头和结尾的迭代器。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>unordered_set<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token string">"aaa"</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>unordered_set<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator i <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">!=</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>i <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span><span class="token comment">// aaa bbb ccc</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="cbegin-cend"><a href="#cbegin-cend" class="headerlink" title="cbegin - cend"></a>cbegin - cend</h3><p><code>const_iterator cbegin() const noexcept;</code>  <code>const_iterator cend() const noexcept;</code></p><p>返回指向容器开头和结尾的常量迭代器。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>unordered_set<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token string">"aaa"</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>unordered_set<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span><span class="token double-colon punctuation">::</span>const_iterator i <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">!=</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>i <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span><span class="token comment">// aaa bbb ccc</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="容量"><a href="#容量" class="headerlink" title="容量"></a>容量</h2><h3 id="empty"><a href="#empty" class="headerlink" title="empty"></a>empty</h3><p><code>[[nodiscard]] bool empty() const noexcept;</code></p><p>判断容器是否为空，空则为true</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>unordered_set<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token string">"aaa"</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>boolalpha <span class="token operator">&lt;&lt;</span> v<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="size"><a href="#size" class="headerlink" title="size"></a>size</h3><p><code>size_type size() const noexcept;</code></p><p>返回容器中的元素数, 即 std::distance(begin(), end()) 。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>unordered_set<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token string">"aaa"</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> v<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// 3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="max-size"><a href="#max-size" class="headerlink" title="max_size"></a>max_size</h3><p><code>size_type max_size() const noexcept;</code></p><p>返回根据系统或库实现限制的容器可保有的元素最大数量</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>unordered_set<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token string">"aaa"</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> v<span class="token punctuation">.</span><span class="token function">max_size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// 144115188075855871</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="修改器"><a href="#修改器" class="headerlink" title="修改器"></a>修改器</h2><h3 id="clear"><a href="#clear" class="headerlink" title="clear"></a>clear</h3><p><code>void clear() noexcept;</code></p><p>擦除所有元素。此调用后 <code>size()</code> 返回零。非法化任何指代所含元素的引用、指针或迭代器。任何尾后迭代器亦被非法化</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>unordered_set<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token string">"aaa"</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> v<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// 0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="insert"><a href="#insert" class="headerlink" title="insert"></a>insert</h3><p>插入元素到容器中的指定位置。</p><ol><li>插入 <code>value</code>返回由指向被插入元素（或阻止插入的元素）的迭代器和若插入发生则设为 true 的 bool 值。 支持移动语义。</li></ol><p><code>std::pair&lt;iterator,bool&gt; insert( const value_type&amp; value );</code><br><code>std::pair&lt;iterator,bool&gt; insert( value_type&amp;&amp; value );</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>unordered_set<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token string">"aaa"</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>pair<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>set<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token operator">></span> p <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">"ddd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>p<span class="token punctuation">.</span>first <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>boolalpha <span class="token operator">&lt;&lt;</span> p<span class="token punctuation">.</span>second <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// ddd true</span>p <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">"aaa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// p = v.insert(std::move(std::string("aaa")));</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>p<span class="token punctuation">.</span>first <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>boolalpha <span class="token operator">&lt;&lt;</span> p<span class="token punctuation">.</span>second <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// aaa false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>插入 <code>value</code> 到尽可能接近，正好前于 <code>hint</code> 的位置。返回指向被插入元素，或阻止插入的元素的迭代器。</li></ol><p><code>iterator insert( const_iterator hint, const value_type&amp; value );</code><br><code>iterator insert( const_iterator hint, value_type&amp;&amp; value );</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>unordered_set<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token string">"aaa"</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>unordered_set<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator it <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token string">"aab"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// std::unordered_set&lt;std::string>::iterator it = v.insert(v.begin(), std::move(std::string("aba")));</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>it <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// aab</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>string a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// aaa aab bbb ccc</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>插入来自范围 <code>[first, last)</code> 的元素。 若范围中的多个元素拥有比较等价的关键，则插入哪个元素是未指定的</li></ol><p><code>template&lt; class InputIt &gt; void insert( InputIt first, InputIt last );</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v1<span class="token punctuation">&#123;</span><span class="token string">"aaa"</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>unordered_set<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v<span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>v1<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v1<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>string a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// aaa bbb ccc</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>插入来自 initializer_list <code>ilist</code> 的元素。 若范围中的多个元素拥有比较等价的关键，则插入哪个元素是未指定的</li></ol><p><code>void insert( std::initializer_list&lt;value_type&gt; ilist );</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>unordered_set<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v<span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"aaa"</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>string a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// aaa bbb ccc</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="5"><li> 若 nh 是空的结点把柄，则不做任何事。否则插入 nh 所占有的元素到容器，若容器尚未含有拥有等价于 nh.key() 的关键的元素。</li></ol><p><code>insert_return_type insert(node_type&amp;&amp; nh);</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>unordered_set<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token string">"aaa"</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>unordered_set<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span><span class="token double-colon punctuation">::</span>node_type nt<span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>unordered_set<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span><span class="token double-colon punctuation">::</span>insert_return_type it <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span>nt<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="6"><li>若 nh 是空的结点把柄，则不做任何事并返回尾迭代器。否则，插入 nh 所占有的元素到容器，若容器尚未含有拥有等价于 nh.key() 的关键的元素，并返回指向拥有等于 nh.key() 的关键的元素的迭代器（无关乎插入成功还是失败）。若插入成功，则从 nh 移动，否则它保持该元素的所有权。元素被插入到尽可能接近正好先于 hint 的位置。</li></ol><p><code>iterator insert(const_iterator hint, node_type&amp;&amp; nh);</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>unordered_set<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token string">"aaa"</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>unordered_set<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span><span class="token double-colon punctuation">::</span>node_type nt<span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>unordered_set<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator it <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span>nt<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>it <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="emplace"><a href="#emplace" class="headerlink" title="emplace"></a>emplace</h3><p><code>template&lt; class... Args &gt; std::pair&lt;iterator,bool&gt; emplace( Args&amp;&amp;... args );</code></p><p>若容器中无拥有该关键的元素，则插入以给定的 <code>args</code> 原位构造的新元素到容器。返回由指向被插入元素.若因插入发生重哈希，则所有迭代器都被非法化。否则迭代器不受影响。引用不被非法化。重哈希仅若新元素数量大于 <code>max_load_factor()*bucket_count() </code>才发生。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>unordered_set<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token string">"aaa"</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>pair<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>set<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token operator">></span> p<span class="token punctuation">;</span><span class="token keyword">auto</span> <span class="token punctuation">[</span>it<span class="token punctuation">,</span> is<span class="token punctuation">]</span> <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">"ddd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>it <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>boolalpha <span class="token operator">&lt;&lt;</span> is <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// ddd true</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>string a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// // aaa bbb ccc ddd</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="emplace-hint"><a href="#emplace-hint" class="headerlink" title="emplace_hint"></a>emplace_hint</h3><p><code>template&lt; class... Args &gt; iterator emplace_hint( const_iterator hint, Args&amp;&amp;... args )</code></p><p>插入新元素到容器中尽可能接近于恰在 <code>hint</code> 前的位置。原位构造元素，即不进行复制或移动操作。返回指向新插入元素的迭代器。若因插入发生重哈希，则所有迭代器都被非法化。否则迭代器不受影响。引用不被非法化。重哈希仅若新元素数量大于<code>max_load_factor()*bucket_count()</code>才发生。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>unordered_set<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token string">"aaa"</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>pair<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>set<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token operator">></span> p<span class="token punctuation">;</span><span class="token keyword">auto</span> it <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"ddd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>it <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// ddd</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>string a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// // aaa bbb ccc ddd</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="erase"><a href="#erase" class="headerlink" title="erase"></a>erase</h3><p>从容器擦除指定的元素。</p><p>1.移除位于pos的元素。返回指向下一个元素的迭代器。如一处的是最后一个，返回的是指向尾部的迭代器。</p><p><code>iterator erase( iterator pos );</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>unordered_set<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token string">"aaa"</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">auto</span> it <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>it <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// bbb</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>string a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// bbb ccc</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>2.移除一定范围内的元素。返回指向下一个元素的迭代器。如一处的是最后一个，返回的是指向尾部的迭代器.</p><p><code>iterator erase( const_iterator first, const_iterator last );</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>unordered_set<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token string">"aaa"</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">auto</span> it <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>string a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>3.移除关键等于 <code>key</code> 的元素（若存在）。</p><p><code>size_type erase( const key_type&amp; key );</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>unordered_set<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token string">"aaa"</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>unordered_set<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span><span class="token double-colon punctuation">::</span>key_type k<span class="token punctuation">&#123;</span><span class="token string">"aaa"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">auto</span> s <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> s <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// 1</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>string a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// bbb ccc</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="swap"><a href="#swap" class="headerlink" title="swap"></a>swap</h3><p><code>void swap( unordered_set&amp; other ) noexcept(std::allocator_traits&lt;Allocator&gt;::is_always_equal::value &amp;&amp; std::is_nothrow_swappable&lt;Hash&gt;::value &amp;&amp; std::is_nothrow_swappable&lt;key_equal&gt;::value)</code></p><p>将内容与其他容器交换。不在单独的元素上调用任何移动、复制或交换操作。所有迭代器和引用保持合法。尾后迭代器被非法化。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>unordered_set<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v1<span class="token punctuation">&#123;</span><span class="token string">"ddd"</span><span class="token punctuation">,</span> <span class="token string">"eee"</span><span class="token punctuation">,</span> <span class="token string">"fff"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>unordered_set<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token string">"aaa"</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">swap</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>string a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ddd eee fff</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="extract"><a href="#extract" class="headerlink" title="extract"></a>extract</h3><ol><li><p>解链含 position 所指向元素的结点并返回占有它的结点柄。</p><p><code>node_type extract( const key_type&amp; x );</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>unordered_set<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token string">"aaa"</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>unordered_set<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span><span class="token double-colon punctuation">::</span>key_type k<span class="token punctuation">&#123;</span><span class="token string">"aaa"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>unordered_set<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span><span class="token double-colon punctuation">::</span>node_type nt <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">extract</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>string a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// bbb ccc</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>若容器拥有元素而其键等于 <code>x</code> ，则从容器解链该元素并返回占有它的结点句柄。否则，返回空结点句柄。</p><p><code>node_type extract( const_iterator position );</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>unordered_set<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token string">"aaa"</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>unordered_set<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span><span class="token double-colon punctuation">::</span>node_type nt <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">extract</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>string a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="merge"><a href="#merge" class="headerlink" title="merge"></a>merge</h3><p><code>template&lt;class H2, class P2&gt; void merge( std::unordered_set&lt;Key, H2, P2, Allocator&gt;&amp; source );</code><br><code>template&lt;class H2, class P2&gt; void merge( std::unordered_set&lt;Key, H2, P2, Allocator&gt;&amp;&amp; source );</code><br><code>template&lt;class H2, class P2&gt; void merge( std::unordered_multiset&lt;Key, H2, P2, Allocator&gt;&amp; source );</code><br><code>template&lt;class H2, class P2&gt; void merge( std::unordered_multiset&lt;Key, H2, P2, Allocator&gt;&amp;&amp; source );</code></p><p>试图提取其他set中的每个元素，并插入到当前容器 。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>unordered_set<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v1<span class="token punctuation">&#123;</span><span class="token string">"ddd"</span><span class="token punctuation">,</span> <span class="token string">"eee"</span><span class="token punctuation">,</span> <span class="token string">"fff"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>unordered_set<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token string">"aaa"</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">merge</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>string a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// aaa bbb ccc ddd eee fff</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h2><h3 id="count"><a href="#count" class="headerlink" title="count"></a>count</h3><p><code>size_type count( const Key&amp; key ) const;</code><br><code>template&lt; class K &gt; size_type count( const K&amp; x ) const</code>，此重载仅若有限定标识 <code>Hash::is_transparent</code> 与 <code>KeyEqual::is_transparent</code> 均合法并指代类型才参与重载决议。</p><p>返回拥有键比较等价于指定参数的元素数，因为此容器不允许重复故为 1 或 0。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>unordered_set<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token string">"aaa"</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> v<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token string">"aaa"</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// 1</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>string a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// aaa bbb ccc</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="find"><a href="#find" class="headerlink" title="find"></a>find</h3><p><code>iterator find( const Key&amp; key );</code>, <code>const_iterator find( const Key&amp; key ) const;</code><br><code>template&lt; class K &gt; iterator find( const K&amp; x );</code><br><code>template&lt; class K &gt; const_iterator find( const K&amp; x ) const;</code></p><p>寻找带有特定键的元素。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>unordered_set<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token string">"aaa"</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">auto</span> it <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">"aaa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>it <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// aaa</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="contains"><a href="#contains" class="headerlink" title="contains"></a>contains</h3><p><code>bool contains( const Key&amp; key ) const;</code><br><code>template&lt; class K &gt; bool contains( const K&amp; x ) const;</code></p><p>检查容器是否含有带特定键的元素。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>unordered_set<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token string">"aaa"</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">bool</span> it <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"aaa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>boolalpha <span class="token operator">&lt;&lt;</span> it <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="equal-range"><a href="#equal-range" class="headerlink" title="equal_range"></a>equal_range</h3><p><code>std::pair&lt;iterator,iterator&gt; equal_range( const Key&amp; key );</code><br><code>std::pair&lt;const_iterator,const_iterator&gt; equal_range( const Key&amp; key ) const;</code><br><code>template&lt; class K &gt; std::pair&lt;iterator,iterator&gt; equal_range( const K&amp; x );</code><br><code>template&lt; class K &gt; std::pair&lt;const_iterator,const_iterator&gt; equal_range( const K&amp; x ) const;</code></p><p>返回容器中所有键等于 <code>key</code> 的元素范围。范围以二个迭代器定义，第一个指向所需范围的首元素，而第二个指向范围的尾后一位元素。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>unordered_set<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token string">"aaa"</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">auto</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">]</span> <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">equal_range</span><span class="token punctuation">(</span><span class="token string">"bbb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>b <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// bbb ccc</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="桶接口"><a href="#桶接口" class="headerlink" title="桶接口"></a>桶接口</h2><h3 id="begin-end-1"><a href="#begin-end-1" class="headerlink" title="begin - end"></a>begin - end</h3><p><code>local_iterator begin( size_type n );</code>  <code>const_local_iterator begin( size_type n ) const</code><br><code>local_iterator end( size_type n );</code>  <code>const_local_iterator end( size_type n ) const;</code></p><p>返回指向下标为 <code>n</code> 的桶首元素/最后元素的迭代器</p><h3 id="cbegin-cend-1"><a href="#cbegin-cend-1" class="headerlink" title="cbegin - cend"></a>cbegin - cend</h3><p><code>const_local_iterator cbegin( size_type n ) const;</code>  <code>const_local_iterator cend( size_type n ) const;</code></p><p>返回指向下标为 <code>n</code> 的桶首元素/最后元素的迭代器</p><h3 id="bucket-count"><a href="#bucket-count" class="headerlink" title="bucket_count"></a>bucket_count</h3><p><code>size_type bucket_count() const;</code></p><p>返回桶数</p><h3 id="max-bucket-count"><a href="#max-bucket-count" class="headerlink" title="max_bucket_count"></a>max_bucket_count</h3><p><code>size_type max_bucket_count() const;</code></p><p>返回桶的最大数量</p><h3 id="bucket-size"><a href="#bucket-size" class="headerlink" title="bucket_size"></a>bucket_size</h3><p><code>size_type bucket_size( size_type n ) const;</code></p><p>返回在特定的桶中的元素数量</p><h3 id="bucket"><a href="#bucket" class="headerlink" title="bucket"></a>bucket</h3><p><code>size_type bucket( const Key&amp; key ) const;</code></p><p>返回带有特定键的桶.返回值仅对 bucket_count() 返回相同值的容器实例合法。若 bucket_count() 为零则行为未定义。</p><h2 id="哈希策略"><a href="#哈希策略" class="headerlink" title="哈希策略"></a>哈希策略</h2><h3 id="load-factor"><a href="#load-factor" class="headerlink" title="load_factor"></a>load_factor</h3><p><code>float load_factor() const;</code></p><p>返回每个桶的平均元素数量</p><h3 id="max-load-factor"><a href="#max-load-factor" class="headerlink" title="max_load_factor"></a>max_load_factor</h3><p><code>float max_load_factor() const;</code>, 返回最大加载因子</p><p><code>void max_load_factor( float ml );</code> 设置最大加载因子为 <code>ml</code> </p><p>管理每个桶的平均元素数量的最大值.若加载因子超出此阈值，则容器自动增加桶数。</p><h3 id="rehash"><a href="#rehash" class="headerlink" title="rehash"></a>rehash</h3><p><code>void rehash( size_type count );</code></p><p>设置桶数为 <code>count</code> 并重哈希容器，即考虑桶总数已改变，再把元素放到适当的桶中。</p><h3 id="reserve"><a href="#reserve" class="headerlink" title="reserve"></a>reserve</h3><p><code>void reserve( size_type count );</code></p><p>设置桶数为适应至少 <code>count</code> 个元素，而不超出最大加载因子所需的数，并重哈希容器，即考虑桶数已更改后将元素放进适合的桶。等效地调用 <code>rehash(std::ceil(count / max_load_factor()))</code> 。</p><h2 id="观察器"><a href="#观察器" class="headerlink" title="观察器"></a>观察器</h2><h3 id="hash-function"><a href="#hash-function" class="headerlink" title="hash_function"></a>hash_function</h3><p><code>hasher hash_function() const;</code></p><p>返回用于对键哈希的函数</p><h3 id="key-eq"><a href="#key-eq" class="headerlink" title="key_eq"></a>key_eq</h3><p><code>key_equal key_eq() const;</code></p><p>返回用于比较键的相等性的函数</p><h2 id="非成员函数"><a href="#非成员函数" class="headerlink" title="非成员函数"></a>非成员函数</h2><h3 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h3><ol><li><code>operator==</code>  </li></ol><h3 id="swap-1"><a href="#swap-1" class="headerlink" title="swap"></a>swap</h3><p><code>std::swap(std::unordered_set )</code>  特化 <code>std::swap</code> 算法</p><h3 id="擦除"><a href="#擦除" class="headerlink" title="擦除"></a>擦除</h3><p><code>erase_if(std::unordered_set )</code>  擦除所有满足特定判别标准的元素</p>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STL </tag>
            
            <tag> 无序关联容器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++ multimap API</title>
      <link href="/C-multimap-API.html"/>
      <url>/C-multimap-API.html</url>
      
        <content type="html"><![CDATA[<h2 id="C-multimap"><a href="#C-multimap" class="headerlink" title="C++ multimap"></a>C++ multimap</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">Key</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">Compare</span> <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>less<span class="token operator">&lt;</span>Key<span class="token operator">></span><span class="token punctuation">,</span>    <span class="token keyword">class</span> <span class="token class-name">Allocator</span> <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>allocator<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>pair<span class="token operator">&lt;</span><span class="token keyword">const</span> Key<span class="token punctuation">,</span> T<span class="token operator">></span> <span class="token operator">></span><span class="token operator">></span> <span class="token keyword">class</span> <span class="token class-name">multimap</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> pmr <span class="token punctuation">&#123;</span>    <span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">Key</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">Compare</span> <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>less<span class="token operator">&lt;</span>Key<span class="token operator">>></span>    <span class="token keyword">using</span> multimap <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>multimap<span class="token operator">&lt;</span>Key<span class="token punctuation">,</span> T<span class="token punctuation">,</span> Compare<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>pmr<span class="token double-colon punctuation">::</span>polymorphic_allocator<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>pair<span class="token operator">&lt;</span><span class="token keyword">const</span> Key<span class="token punctuation">,</span>T<span class="token operator">>></span><span class="token operator">></span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>multimap 是关联容器，含有键值对的已排序列表，同时容许多个元素拥有同一键。按照应用到键的比较函数 <code>Compare</code> 排序。搜索、插入和移除操作拥有对数复杂度。</p><p>在每个标准库使用比较 <code>(Compare) </code>概念的场所，用等价关系确定唯一性。不精确地说，若二个对象 <code>a</code> 与 <code>b</code> 相互间既不比较大于亦不比较小于： <code>!comp(a, b) &amp;&amp; !comp(b, a)</code> ，则认为它们等价。</p><h2 id="成员类型"><a href="#成员类型" class="headerlink" title="成员类型"></a>成员类型</h2><table><thead><tr><th>成员类型</th><th>定义</th></tr></thead><tbody><tr><td><code>key_type</code></td><td><code>Key</code></td></tr><tr><td><code>mapped_type</code></td><td><code>T</code></td></tr><tr><td><code>size_type</code></td><td>无符号整数类型（通常是 <code>std::size_t</code> ）</td></tr><tr><td><code>difference_type</code></td><td>有符号整数类型（通常是 <code>std::ptrdiff_t</code> ）</td></tr><tr><td><code>key_compare</code></td><td><code>Compare</code></td></tr><tr><td><code>allocator_type</code></td><td><code>Allocator</code></td></tr><tr><td><code>reference</code></td><td><code>value_type&amp;</code></td></tr><tr><td><code>const_reference</code></td><td><code>const value_type&amp;</code></td></tr><tr><td><code>pointer</code></td><td><code>std::allocator_traits&lt;Allocator&gt;::pointer</code></td></tr><tr><td><code>const_pointer</code></td><td><code>std::allocator_traits&lt;Allocator&gt;::const_pointer</code></td></tr><tr><td><code>iterator</code></td><td>遗留双向迭代器 (LegacyRandomAccessIterator)</td></tr><tr><td><code>const_iterator</code></td><td>常双向迭代器</td></tr><tr><td><code>reverse_iterator</code></td><td><code>std::reverse_iterator&lt;iterator&gt;</code></td></tr><tr><td><code>const_reverse_iterator</code></td><td><code>std::reverse_iterator&lt;const_iterator&gt;</code></td></tr><tr><td><code>node_type</code></td><td>表示容器结点的结点句柄特化</td></tr></tbody></table><h2 id="构造"><a href="#构造" class="headerlink" title="构造"></a>构造</h2><h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><ol><li><p>创建一个空容器. </p><p><code>multimap();</code>,  <code>explicit multimap( const Allocator&amp; alloc );</code><br><code>explicit multimap( const Compare&amp; comp, const Allocator&amp; alloc = Allocator() );</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>multimap<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> <span class="token function">v</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>初始化列表</p><p><code>multimap( std::initializer_list&lt;value_type&gt; init, const Allocator&amp; );</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>multimap<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"aaa"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// for (auto&amp;  i:v) std::cout&lt;&lt; i.first &lt;&lt; ":" &lt;&lt; i.second &lt;&lt; ", "; // 1:aaa, 2:bbb, 4:ccc, </span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>     std<span class="token double-colon punctuation">::</span> cout <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">.</span>first <span class="token operator">&lt;&lt;</span> <span class="token string">":"</span> <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">.</span>second <span class="token operator">&lt;&lt;</span> <span class="token string">", "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1:aaa, 2:bbb, 4:ccc, </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>以一对迭代器创建</p><p><code>template&lt; class InputIt &gt; multimap( InputIt first, InputIt last,  const Allocator&amp; alloc );</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>multimap<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v1<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"ddd"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">"eee"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">"fff"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>multimap<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> <span class="token function">v</span><span class="token punctuation">(</span>v1<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v1<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span>  i<span class="token operator">:</span>v<span class="token punctuation">)</span> std<span class="token double-colon punctuation">::</span>cout<span class="token operator">&lt;&lt;</span> i<span class="token punctuation">.</span>first <span class="token operator">&lt;&lt;</span> <span class="token string">":"</span> <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">.</span>second <span class="token operator">&lt;&lt;</span> <span class="token string">", "</span><span class="token punctuation">;</span> <span class="token comment">// 3:ddd, 4:eee, 5:fff,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>以其他的容器创建</p><p><code>multimap( const map&amp; other );</code>, <code>multimap( const map&amp; other, const Allocator&amp; alloc );</code> ,</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>multimap<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v1<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"ddd"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">"eee"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">"fff"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>multimap<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> <span class="token function">v</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span>  i<span class="token operator">:</span>v<span class="token punctuation">)</span> std<span class="token double-colon punctuation">::</span>cout<span class="token operator">&lt;&lt;</span> i<span class="token punctuation">.</span>first <span class="token operator">&lt;&lt;</span> <span class="token string">":"</span> <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">.</span>second <span class="token operator">&lt;&lt;</span> <span class="token string">", "</span><span class="token punctuation">;</span> <span class="token comment">// 3:ddd, 4:eee, 5:fff,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>还可以使用移动语义</p><p><code>multimap( multimap&amp;&amp; other );</code>, <code>multimap( multimap&amp;&amp; other, const Allocator&amp; alloc );</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>multimap<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v1<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"ddd"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">"eee"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">"fff"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>multimap<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> <span class="token function">v</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span>  i<span class="token operator">:</span>v<span class="token punctuation">)</span> std<span class="token double-colon punctuation">::</span>cout<span class="token operator">&lt;&lt;</span> i<span class="token punctuation">.</span>first <span class="token operator">&lt;&lt;</span> <span class="token string">":"</span> <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">.</span>second <span class="token operator">&lt;&lt;</span> <span class="token string">", "</span><span class="token punctuation">;</span> <span class="token comment">// 3:ddd, 4:eee, 5:fff,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="operator"><a href="#operator" class="headerlink" title="operator="></a>operator=</h3><p><code>multimap&amp; operator=( const multimap&amp; other );</code>,<br><code>multimap&amp; operator=( std::initializer_list&lt;value_type&gt; ilist );</code><br><code>multimap&amp; operator=( multimap&amp;&amp; other ) noexcept(std::allocator_traits&lt;Allocator&gt;::is_always_equal::value &amp;&amp; std::is_nothrow_move_assignable&lt;Compare&gt;::value)</code></p>   <pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>multimap<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v1<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"ddd"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">"eee"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">"fff"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>multimap<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v <span class="token operator">=</span> v1<span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>multimap<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v2 <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>multimap<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v3 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"aaa"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span>  i<span class="token operator">:</span>v<span class="token punctuation">)</span> std<span class="token double-colon punctuation">::</span>cout<span class="token operator">&lt;&lt;</span> i<span class="token punctuation">.</span>first <span class="token operator">&lt;&lt;</span> <span class="token string">":"</span> <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">.</span>second <span class="token operator">&lt;&lt;</span> <span class="token string">", "</span><span class="token punctuation">;</span> <span class="token comment">// // 3:ddd, 4:eee, 5:fff,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="get-allocator"><a href="#get-allocator" class="headerlink" title="get_allocator"></a>get_allocator</h3><p><code>allocator_type get_allocator() const noexcept;</code></p><p>返回与容器关联的分配器。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>multimap<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"aaa"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>multimap<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span><span class="token double-colon punctuation">::</span>allocator_type alloc_type <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">get_allocator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h2><h3 id="begin-end"><a href="#begin-end" class="headerlink" title="begin - end"></a>begin - end</h3><p><code>iterator begin() noexcept;</code>  <code>const_iterator begin() const noexcept;</code><br><code>iterator end() noexcept;</code>  <code>const_iterator end() const noexcept;</code></p><p>返回指向容器开头和结尾的迭代器。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>multimap<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"aaa"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>multimap<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator i <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">!=</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>   std<span class="token double-colon punctuation">::</span>cout<span class="token operator">&lt;&lt;</span> i<span class="token operator">-></span>first <span class="token operator">&lt;&lt;</span> <span class="token string">":"</span> <span class="token operator">&lt;&lt;</span> i<span class="token operator">-></span>second <span class="token operator">&lt;&lt;</span> <span class="token string">", "</span><span class="token punctuation">;</span> <span class="token comment">// 1:aaa, 2:abc, 4:ccc,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="cbegin-cend"><a href="#cbegin-cend" class="headerlink" title="cbegin - cend"></a>cbegin - cend</h3><p><code>const_iterator cbegin() const noexcept;</code>  <code>const_iterator cend() const noexcept;</code></p><p>返回指向容器开头和结尾的常量迭代器。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>multimap<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"aaa"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>multimap<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span><span class="token double-colon punctuation">::</span>const_iterator i <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">!=</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>   std<span class="token double-colon punctuation">::</span>cout<span class="token operator">&lt;&lt;</span> i<span class="token operator">-></span>first <span class="token operator">&lt;&lt;</span> <span class="token string">":"</span> <span class="token operator">&lt;&lt;</span> i<span class="token operator">-></span>second <span class="token operator">&lt;&lt;</span> <span class="token string">", "</span><span class="token punctuation">;</span> <span class="token comment">// 1:aaa, 2:abc, 4:ccc,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="rbegin-rend"><a href="#rbegin-rend" class="headerlink" title="rbegin - rend"></a>rbegin - rend</h3><p><code>reverse_iterator rbegin() noexcept;</code>  <code>const_reverse_iterator rbegin() const noexcept;</code><br><code>const_reverse_iterator rend() const noexcept;</code></p><p>返回指向容器开头和结尾的反向迭代器。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>multimap<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"aaa"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>multimap<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span><span class="token double-colon punctuation">::</span>reverse_iterator i <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">rbegin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">!=</span> v<span class="token punctuation">.</span><span class="token function">rend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    std<span class="token double-colon punctuation">::</span>cout<span class="token operator">&lt;&lt;</span> i<span class="token operator">-></span>first <span class="token operator">&lt;&lt;</span> <span class="token string">":"</span> <span class="token operator">&lt;&lt;</span> i<span class="token operator">-></span>second <span class="token operator">&lt;&lt;</span> <span class="token string">", "</span><span class="token punctuation">;</span> <span class="token comment">// 4:ccc, 2:bbb, 1:aaa, </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="crbegin-crend"><a href="#crbegin-crend" class="headerlink" title="crbegin - crend"></a>crbegin - crend</h3><p><code>const_reverse_iterator crbegin() const noexcept;</code><br><code>const_reverse_iterator crend() const noexcept;</code></p><p>返回指向容器开头和结尾的反向常量迭代器。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>multimap<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"aaa"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>multimap<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span><span class="token double-colon punctuation">::</span>const_reverse_iterator i <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">rbegin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">!=</span> v<span class="token punctuation">.</span><span class="token function">rend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    std<span class="token double-colon punctuation">::</span>cout<span class="token operator">&lt;&lt;</span> i<span class="token operator">-></span>first <span class="token operator">&lt;&lt;</span> <span class="token string">":"</span> <span class="token operator">&lt;&lt;</span> i<span class="token operator">-></span>second <span class="token operator">&lt;&lt;</span> <span class="token string">", "</span><span class="token punctuation">;</span> <span class="token comment">// 4:ccc, 2:bbb, 1:aaa, </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="容量"><a href="#容量" class="headerlink" title="容量"></a>容量</h2><h3 id="empty"><a href="#empty" class="headerlink" title="empty"></a>empty</h3><p><code>[[nodiscard]] bool empty() const noexcept;</code></p><p>判断容器是否为空，空则为true</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>multimap<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"aaa"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>boolalpha <span class="token operator">&lt;&lt;</span> v<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="size"><a href="#size" class="headerlink" title="size"></a>size</h3><p><code>size_type size() const noexcept;</code></p><p>返回容器中的元素数, 即 std::distance(begin(), end()) 。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>multimap<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"aaa"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> v<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// 3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="max-size"><a href="#max-size" class="headerlink" title="max_size"></a>max_size</h3><p><code>size_type max_size() const noexcept;</code></p><p>返回根据系统或库实现限制的容器可保有的元素最大数量</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>multimap<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"aaa"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> v<span class="token punctuation">.</span><span class="token function">max_size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// 256204778801521550</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="修改器"><a href="#修改器" class="headerlink" title="修改器"></a>修改器</h2><h3 id="clear"><a href="#clear" class="headerlink" title="clear"></a>clear</h3><p><code>void clear() noexcept;</code></p><p>擦除所有元素。此调用后 <code>size()</code> 返回零。非法化任何指代所含元素的引用、指针或迭代器。任何尾后迭代器亦被非法化</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>multimap<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"aaa"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> v<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// 0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="insert"><a href="#insert" class="headerlink" title="insert"></a>insert</h3><p>插入元素到容器中的指定位置。</p><ol><li>插入 <code>value</code>返回由指向被插入元素（或阻止插入的元素）的迭代器和若插入发生则设为 true 的 bool 值。 支持移动语义。</li></ol><p><code>iterator insert( const value_type&amp; value );</code><br><code>iterator insert( value_type&amp;&amp; value );</code><br><code>template&lt; class P &gt; iterator insert( P&amp;&amp; value );</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>multimap<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"aaa"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">auto</span> it <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> it<span class="token operator">-></span>first <span class="token operator">&lt;&lt;</span> <span class="token string">":"</span> <span class="token operator">&lt;&lt;</span> it<span class="token operator">-></span>second <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// 2:bbb</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>i <span class="token operator">:</span> v<span class="token punctuation">)</span>   std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">.</span>first <span class="token operator">&lt;&lt;</span> <span class="token string">":"</span> <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">.</span>second <span class="token operator">&lt;&lt;</span> <span class="token string">", "</span><span class="token punctuation">;</span> <span class="token comment">// 1:aaa, 2:bbb, 2:bbb, 4:ccc,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>插入 <code>value</code> 到尽可能接近，正好前于 <code>hint</code> 的位置。返回指向被插入元素，或阻止插入的元素的迭代器。</li></ol><p><code>iterator insert( const_iterator hint, const value_type&amp; value );</code><br><code>iterator insert( const_iterator hint, value_type&amp;&amp; value );</code><br><code>template&lt; class P &gt; iterator insert( const_iterator hint, P&amp;&amp; value )</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>multimap<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"aaa"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> in<span class="token punctuation">&#123;</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"ddd"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">auto</span>  p <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> in<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// auto p = v.insert(v.end(), std::move(in));</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>i <span class="token operator">:</span> v<span class="token punctuation">)</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">.</span>first <span class="token operator">&lt;&lt;</span> <span class="token string">":"</span> <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">.</span>second <span class="token operator">&lt;&lt;</span> <span class="token string">", "</span><span class="token punctuation">;</span> <span class="token comment">// 1:aaa, 2:bbb, 3:ddd, 4:ccc,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>插入来自范围 <code>[first, last)</code> 的元素。 若范围中的多个元素拥有比较等价的关键，则插入哪个元素是未指定的</li></ol><p><code>template&lt; class InputIt &gt; void insert( InputIt first, InputIt last );</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>multimap<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v1<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"aaa"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>multimap<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v<span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>v1<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v1<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>i <span class="token operator">:</span> v<span class="token punctuation">)</span>   std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">.</span>first <span class="token operator">&lt;&lt;</span> <span class="token string">":"</span> <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">.</span>second <span class="token operator">&lt;&lt;</span> <span class="token string">", "</span><span class="token punctuation">;</span> <span class="token comment">// 1:aaa, 2:bbb, 4:ccc,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>插入来自 initializer_list <code>ilist</code> 的元素。 若范围中的多个元素拥有比较等价的关键，则插入哪个元素是未指定的</li></ol><p><code>void insert( std::initializer_list&lt;value_type&gt; ilist );</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>multimap<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"aaa"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"ddd"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">"eee"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">"fff"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>i <span class="token operator">:</span> v<span class="token punctuation">)</span>   std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">.</span>first <span class="token operator">&lt;&lt;</span> <span class="token string">":"</span> <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">.</span>second <span class="token operator">&lt;&lt;</span> <span class="token string">", "</span><span class="token punctuation">;</span> <span class="token comment">// 1:aaa, 2:bbb, 3:ddd, 4:ccc, 5:fff,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="5"><li> 若 nh 是空的结点把柄，则不做任何事。否则插入 nh 所占有的元素到容器，若容器尚未含有拥有等价于 nh.key() 的关键的元素。</li></ol><p><code>iterator insert(node_type&amp;&amp; nh);</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>multimap<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"aaa"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>multimap<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span><span class="token double-colon punctuation">::</span>node_type nt<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>multimap<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span><span class="token double-colon punctuation">::</span>insert_return_type it <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span>nt<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> it<span class="token punctuation">.</span>inserted <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// 0</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>i <span class="token operator">:</span> v<span class="token punctuation">)</span>   std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">.</span>first <span class="token operator">&lt;&lt;</span> <span class="token string">":"</span> <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">.</span>second <span class="token operator">&lt;&lt;</span> <span class="token string">", "</span><span class="token punctuation">;</span> <span class="token comment">// 1:aaa, 2:bbb, 4:ccc,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="6"><li>若 nh 是空的结点把柄，则不做任何事并返回尾迭代器。否则，插入 nh 所占有的元素到容器，若容器尚未含有拥有等价于 nh.key() 的关键的元素，并返回指向拥有等于 nh.key() 的关键的元素的迭代器（无关乎插入成功还是失败）。若插入成功，则从 nh 移动，否则它保持该元素的所有权。元素被插入到尽可能接近正好先于 hint 的位置。</li></ol><p><code>iterator insert(const_iterator hint, node_type&amp;&amp; nh);</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>multimap<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"aaa"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>multimap<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span><span class="token double-colon punctuation">::</span>node_type nt<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>multimap<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator it <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span>nt<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>i <span class="token operator">:</span> v<span class="token punctuation">)</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">.</span>first <span class="token operator">&lt;&lt;</span> <span class="token string">":"</span> <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">.</span>second <span class="token operator">&lt;&lt;</span> <span class="token string">", "</span><span class="token punctuation">;</span> <span class="token comment">// // 1:aaa, 2:bbb, 4:ccc,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="emplace"><a href="#emplace" class="headerlink" title="emplace"></a>emplace</h3><p><code>template&lt; class... Args &gt; std::pair&lt;iterator,bool&gt; emplace( Args&amp;&amp;... args );</code></p><p>若容器中无拥有该关键的元素，则插入以给定的 <code>args</code> 原位构造的新元素到容器。返回由指向被插入元素，或若不发生插入则为既存元素的迭代器，和指代插入是否发生的 bool （若发生插入则为 true ，否则为 false ）。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>multimap<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"aaa"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> in<span class="token punctuation">&#123;</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"ddd"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">auto</span> <span class="token punctuation">[</span>it<span class="token punctuation">,</span> inserted<span class="token punctuation">]</span> <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> it<span class="token operator">-></span>first <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> inserted <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// 3 1</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>i <span class="token operator">:</span> v<span class="token punctuation">)</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">.</span>first <span class="token operator">&lt;&lt;</span> <span class="token string">":"</span> <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">.</span>second <span class="token operator">&lt;&lt;</span> <span class="token string">", "</span><span class="token punctuation">;</span> <span class="token comment">// 1:aaa, 2:bbb, 3:ddd, 4:ccc,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="emplace-hint"><a href="#emplace-hint" class="headerlink" title="emplace_hint"></a>emplace_hint</h3><p><code>template&lt; class... Args &gt; iterator emplace_hint( const_iterator hint, Args&amp;&amp;... args )</code></p><p>插入新元素到容器中尽可能接近于恰在 <code>hint</code> 前的位置。原位构造元素，即不进行复制或移动操作。返回指向新插入元素的迭代器。若因元素已存在而插入失败，则返回指向拥有等价关键的既存元素的迭代器。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>multimap<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"aaa"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">auto</span> it <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">emplace_hint</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"abc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> it<span class="token operator">-></span>first <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// 1</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>i <span class="token operator">:</span> v<span class="token punctuation">)</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">.</span>first <span class="token operator">&lt;&lt;</span> <span class="token string">":"</span> <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">.</span>second <span class="token operator">&lt;&lt;</span> <span class="token string">", "</span><span class="token punctuation">;</span> <span class="token comment">// 1:aaa, 2:bbb, 4:ccc,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="erase"><a href="#erase" class="headerlink" title="erase"></a>erase</h3><p>从容器擦除指定的元素。</p><p>1.移除位于pos的元素。返回指向下一个元素的迭代器。如一处的是最后一个，返回的是指向尾部的迭代器。</p><p><code>iterator erase( iterator pos );</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>multimap<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"aaa"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">auto</span> it <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> it<span class="token operator">-></span>first <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// 2</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>i <span class="token operator">:</span> v<span class="token punctuation">)</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">.</span>first <span class="token operator">&lt;&lt;</span> <span class="token string">":"</span> <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">.</span>second <span class="token operator">&lt;&lt;</span> <span class="token string">", "</span><span class="token punctuation">;</span> <span class="token comment">// 2:bbb, 4:ccc,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.移除一定范围内的元素。返回指向下一个元素的迭代器。如一处的是最后一个，返回的是指向尾部的迭代器.</p><p><code>iterator erase( const_iterator first, const_iterator last );</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>multimap<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"aaa"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">auto</span> it <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span><span class="token function">prev</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> it<span class="token operator">-></span>first <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// 4</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>i <span class="token operator">:</span> v<span class="token punctuation">)</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">.</span>first <span class="token operator">&lt;&lt;</span> <span class="token string">":"</span> <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">.</span>second <span class="token operator">&lt;&lt;</span> <span class="token string">", "</span><span class="token punctuation">;</span> <span class="token comment">// 4:ccc, </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3.移除关键等于 <code>key</code> 的元素（若存在）。</p><p><code>size_type erase( const key_type&amp; key );</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>multimap<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"aaa"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>multimap<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span><span class="token double-colon punctuation">::</span>key_type k<span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">auto</span> s <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> s <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// 1</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>i <span class="token operator">:</span> v<span class="token punctuation">)</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">.</span>first <span class="token operator">&lt;&lt;</span> <span class="token string">":"</span> <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">.</span>second <span class="token operator">&lt;&lt;</span> <span class="token string">", "</span><span class="token punctuation">;</span> <span class="token comment">// 1:aaa, 4:ccc,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="swap"><a href="#swap" class="headerlink" title="swap"></a>swap</h3><p><code>void swap( map&amp; other ) noexcept(std::allocator_traits&lt;Allocator&gt;::is_always_equal::value &amp;&amp; std::is_nothrow_swappable&lt;Compare&gt;::value)</code></p><p>将内容与其他容器交换。不在单独的元素上调用任何移动、复制或交换操作。所有迭代器和引用保持合法。尾后迭代器被非法化。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>multimap<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v1<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"ddd"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">"eee"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">"fff"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>multimap<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"aaa"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">swap</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>i <span class="token operator">:</span> v<span class="token punctuation">)</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">.</span>first <span class="token operator">&lt;&lt;</span> <span class="token string">":"</span> <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">.</span>second <span class="token operator">&lt;&lt;</span> <span class="token string">", "</span><span class="token punctuation">;</span> <span class="token comment">// 3:ddd, 4:eee, 5:fff,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="extract"><a href="#extract" class="headerlink" title="extract"></a>extract</h3><ol><li><p>解链含 position 所指向元素的结点并返回占有它的结点柄。</p><p><code>node_type extract( const key_type&amp; x );</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>multimap<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"aaa"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">auto</span> it <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">extract</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> it<span class="token punctuation">.</span><span class="token function">key</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">":"</span> <span class="token operator">&lt;&lt;</span> it<span class="token punctuation">.</span><span class="token function">mapped</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// 2:bbb</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>i <span class="token operator">:</span> v<span class="token punctuation">)</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">.</span>first <span class="token operator">&lt;&lt;</span> <span class="token string">":"</span> <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">.</span>second <span class="token operator">&lt;&lt;</span> <span class="token string">", "</span><span class="token punctuation">;</span> <span class="token comment">// 1:aaa, 4:ccc,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>若容器拥有元素而其键等于 <code>x</code> ，则从容器解链该元素并返回占有它的结点句柄。否则，返回空结点句柄。</p><p><code>node_type extract( const_iterator position );</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>multimap<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"aaa"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">auto</span> it <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">extract</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> it<span class="token punctuation">.</span><span class="token function">key</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">":"</span> <span class="token operator">&lt;&lt;</span> it<span class="token punctuation">.</span><span class="token function">mapped</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// 1:aaa</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>i <span class="token operator">:</span> v<span class="token punctuation">)</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">.</span>first <span class="token operator">&lt;&lt;</span> <span class="token string">":"</span> <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">.</span>second <span class="token operator">&lt;&lt;</span> <span class="token string">", "</span><span class="token punctuation">;</span> <span class="token comment">// 2:bbb, 4:ccc,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="merge"><a href="#merge" class="headerlink" title="merge"></a>merge</h3><p><code>template&lt;class C2&gt; void merge( std::map&lt;Key, T, C2, Allocator&gt;&amp; source );</code><br><code>template&lt;class C2&gt; void merge( std::map&lt;Key, T, C2, Allocator&gt;&amp;&amp; source );</code><br><code>template&lt;class C2&gt; void merge( std::multimap&lt;Key, T, C2, Allocator&gt;&amp; source );</code><br><code>template&lt;class C2&gt; void merge( std::multimap&lt;Key, T, C2, Allocator&gt;&amp;&amp; source );</code></p><p>试图提取其他set中的每个元素，并插入到当前容器 。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>multimap<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v1<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"ddd"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">"eee"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">"fff"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>multimap<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"aaa"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">merge</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>i <span class="token operator">:</span> v<span class="token punctuation">)</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">.</span>first <span class="token operator">&lt;&lt;</span> <span class="token string">":"</span> <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">.</span>second <span class="token operator">&lt;&lt;</span> <span class="token string">", "</span><span class="token punctuation">;</span><span class="token comment">// 1:aaa, 2:bbb, 3:ddd, 4:ccc, 5:fff,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h2><h3 id="count"><a href="#count" class="headerlink" title="count"></a>count</h3><p><code>size_type count( const Key&amp; key ) const;</code><br><code>template&lt; class K &gt; size_type count( const K&amp; x ) const</code>，用于查找自定义类型，需重载<code>&lt;</code>比较符。</p><p>返回拥有键比较等价于指定参数的元素数，因为此容器不允许重复故为 1 或 0。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>multimap<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"aaa"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> v<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="find"><a href="#find" class="headerlink" title="find"></a>find</h3><p><code>iterator find( const Key&amp; key );</code>, <code>const_iterator find( const Key&amp; key ) const;</code><br><code>template&lt; class K &gt; iterator find( const K&amp; x );</code><br><code>template&lt; class K &gt; const_iterator find( const K&amp; x ) const;</code></p><p>寻找带有特定键的元素。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>multimap<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"aaa"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">auto</span> it <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> it<span class="token operator">-></span>second <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// aaa</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="contains"><a href="#contains" class="headerlink" title="contains"></a>contains</h3><p><code>bool contains( const Key&amp; key ) const;</code><br><code>template&lt; class K &gt; bool contains( const K&amp; x ) const;</code></p><p>检查容器是否含有带特定键的元素。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>multimap<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"aaa"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">auto</span> it <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>boolalpha <span class="token operator">&lt;&lt;</span> it <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="equal-range"><a href="#equal-range" class="headerlink" title="equal_range"></a>equal_range</h3><p><code>std::pair&lt;iterator, iterator&gt; equal_range( const Key&amp; key );</code><br><code>std::pair&lt;const_iterator, const_iterator&gt; equal_range( const Key&amp; key ) const;</code><br><code>template&lt; class K &gt; std::pair&lt;iterator, iterator&gt; equal_range( const K&amp; x );</code><br><code>template&lt; class K &gt; std::pair&lt;const_iterator, const_iterator&gt; equal_range( const K&amp; x ) const;</code></p><p>返回匹配特定键的元素范围.返回值第一个指向首个不小于 <code>key</code> 的元素，第二个指向首个大于<code>key</code> 的元素。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>multimap<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"aaa"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">auto</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">]</span> <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">equal_range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a<span class="token operator">-></span>second <span class="token operator">&lt;&lt;</span> <span class="token string">","</span> <span class="token operator">&lt;&lt;</span> b<span class="token operator">-></span>second <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// bbb,ccc</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="lower-bound"><a href="#lower-bound" class="headerlink" title="lower_bound"></a>lower_bound</h3><p><code>iterator lower_bound( const Key&amp; key );</code>, <code>const_iterator lower_bound( const Key&amp; key ) const;</code><br><code>template&lt; class K &gt; iterator lower_bound(const K&amp; x);</code><br><code>template&lt; class K &gt; const_iterator lower_bound(const K&amp; x) const;</code></p><p>返回指向首个不小于(大于、等于)给定键的元素的迭代器.</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>multimap<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"aaa"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">auto</span> a <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">lower_bound</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a<span class="token operator">-></span>second <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// bbb</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="upper-bound"><a href="#upper-bound" class="headerlink" title="upper_bound"></a>upper_bound</h3><p><code>iterator upper_bound( const Key&amp; key );</code>, <code>const_iterator upper_bound( const Key&amp; key ) const;</code><br><code>template&lt; class K &gt; iterator upper_bound( const K&amp; x );</code><br><code>template&lt; class K &gt; const_iterator upper_bound( const K&amp; x ) const;</code></p><p>返回指向首个大于给定键的元素的迭代器.</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>multimap<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"aaa"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">auto</span> a <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">upper_bound</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a<span class="token operator">-></span>second <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// ccc</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="观察器"><a href="#观察器" class="headerlink" title="观察器"></a>观察器</h2><h3 id="key-comp"><a href="#key-comp" class="headerlink" title="key_comp"></a>key_comp</h3><p><code>key_compare key_comp() const;</code></p><p>返回用于比较<code>key</code>的函数对象，它是此容器构造函数参数 <code>comp</code> 的副本，它与 <code>value_comp</code> 相同。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>multimap<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"aaa"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>multimap<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span><span class="token double-colon punctuation">::</span>key_compare func <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">key_comp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>boolalpha <span class="token operator">&lt;&lt;</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="value-comp"><a href="#value-comp" class="headerlink" title="value_comp"></a>value_comp</h3><p><code>std::map::value_compare value_comp() const</code></p><p>返回用于在<code>value_type</code>类型的对象中比较键的函数。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>multimap<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"aaa"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>multimap<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span><span class="token double-colon punctuation">::</span>value_compare func <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">value_comp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>boolalpha <span class="token operator">&lt;&lt;</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"aaa"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// ture</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="成员类"><a href="#成员类" class="headerlink" title="成员类"></a>成员类</h2><h3 id="value-compare"><a href="#value-compare" class="headerlink" title="value_compare"></a>value_compare</h3><h2 id="非成员函数"><a href="#非成员函数" class="headerlink" title="非成员函数"></a>非成员函数</h2><h3 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h3><ol><li><code>operator==</code>  2.<code>operator!=</code>  3.<code>operator&lt;</code>  4.<code>operator&lt;=</code>  5.<code>operator&gt;</code>  6.<code>operator&gt;=</code>  7.<code>operator&lt;=&gt;</code></li></ol><h3 id="swap-1"><a href="#swap-1" class="headerlink" title="swap"></a>swap</h3><p><code>std::swap(std::multimap)</code>  特化 <code>std::swap</code> 算法</p><h3 id="擦除"><a href="#擦除" class="headerlink" title="擦除"></a>擦除</h3><p><code>erase(std::multimap)， erase_if(std::multimap)</code>  擦除所有满足特定判别标准的元素</p>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STL </tag>
            
            <tag> 关联容器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++ multiset API</title>
      <link href="/C-multiset-API.html"/>
      <url>/C-multiset-API.html</url>
      
        <content type="html"><![CDATA[<h2 id="C-multiset"><a href="#C-multiset" class="headerlink" title="C++ multiset"></a>C++ multiset</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">Key</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">Compare</span> <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>less<span class="token operator">&lt;</span>Key<span class="token operator">></span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">Allocator</span> <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>allocator<span class="token operator">&lt;</span>Key<span class="token operator">>></span>    <span class="token keyword">class</span> <span class="token class-name">multiset</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> pmr <span class="token punctuation">&#123;</span>    <span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">Key</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">Compare</span> <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>less<span class="token operator">&lt;</span>Key<span class="token operator">>></span>    <span class="token keyword">using</span> multiset <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>multiset<span class="token operator">&lt;</span>Key<span class="token punctuation">,</span> Compare<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>pmr<span class="token double-colon punctuation">::</span>polymorphic_allocator<span class="token operator">&lt;</span>Key<span class="token operator">>></span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>std::multiset</code> 是含有 Key 类型对象有序集的容器。不同于 set ，它允许多个关键拥有等价的值。用关键比较函数 Compare 进行排序。搜索、插入和移除操作拥有对数复杂度。<code>multiset</code>的API和<code>set</code>的API基本一致。</p><p>在每个标准库使用比较 (Compare) 概念的场所，用等价关系确定唯一性。不精确地说，若二个对象 <code>a</code> 与 <code>b</code> 相互间既不比较大于亦不比较小于： <code>!comp(a, b) &amp;&amp; !comp(b, a)</code> ，则认为它们等价。</p><h2 id="成员类型"><a href="#成员类型" class="headerlink" title="成员类型"></a>成员类型</h2><table><thead><tr><th>成员类型</th><th>定义</th></tr></thead><tbody><tr><td><code>key_type</code></td><td><code>Key</code></td></tr><tr><td><code>value_type</code></td><td><code>Key</code></td></tr><tr><td><code>size_type</code></td><td>无符号整数类型（通常是 <code>std::size_t</code> ）</td></tr><tr><td><code>difference_type</code></td><td>有符号整数类型（通常是 <code>std::ptrdiff_t</code> ）</td></tr><tr><td><code>key_compare</code></td><td><code>Compare</code></td></tr><tr><td><code>value_compare</code></td><td><code>Compare</code></td></tr><tr><td><code>allocator_type</code></td><td><code>Allocator</code></td></tr><tr><td><code>reference</code></td><td><code>value_type&amp;</code></td></tr><tr><td><code>const_reference</code></td><td><code>const value_type&amp;</code></td></tr><tr><td><code>pointer</code></td><td><code>std::allocator_traits&lt;Allocator&gt;::pointer</code></td></tr><tr><td><code>const_pointer</code></td><td><code>std::allocator_traits&lt;Allocator&gt;::const_pointer</code></td></tr><tr><td><code>iterator</code></td><td>遗留双向迭代器 (LegacyRandomAccessIterator)</td></tr><tr><td><code>const_iterator</code></td><td>常双向迭代器</td></tr><tr><td><code>reverse_iterator</code></td><td><code>std::reverse_iterator&lt;iterator&gt;</code></td></tr><tr><td><code>const_reverse_iterator</code></td><td><code>std::reverse_iterator&lt;const_iterator&gt;</code></td></tr><tr><td><code>node_type</code></td><td>表示容器结点的结点句柄特化</td></tr></tbody></table><h2 id="构造"><a href="#构造" class="headerlink" title="构造"></a>构造</h2><h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><ol><li><p>创建一个空容器</p><p><code>multiset();</code>,  <code>explicit multiset( const Allocator&amp; alloc );</code><br><code>explicit multiset( const Compare&amp; comp, const Allocator&amp; alloc = Allocator() );</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>multiset<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> <span class="token function">v</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>初始化列表</p><p><code>multiset( std::initializer_list&lt;value_type&gt; init, const Compare&amp; comp = Compare(), const Allocator&amp; alloc = Allocator() );</code><br><code>multiset( std::initializer_list&lt;value_type&gt; init, const Allocator&amp; );</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>multiset<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token string">"aaa"</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>string a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// aaa bbb ccc</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>以一对迭代器创建</p><p><code>template&lt; class InputIt &gt; multiset( InputIt first, InputIt last, const Compare&amp; comp = Compare(), const Allocator&amp; alloc = Allocator() );</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v1<span class="token punctuation">&#123;</span><span class="token string">"aaa"</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>multiset<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> <span class="token function">v</span><span class="token punctuation">(</span>v1<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v1<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>string a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// aaa bbb ccc</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>以其他的vector容器创建</p><p><code>multiset( const multiset&amp; other );</code> ,<code>multiset( const multiset&amp; other, const Allocator&amp; alloc );</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>set<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v1<span class="token punctuation">&#123;</span><span class="token string">"aaa"</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>set<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> <span class="token function">v</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>string a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// aaa bbb ccc</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>还可以使用移动语义</p><p><code>multiset( multiset&amp;&amp; other );</code>, <code>multiset( multiset&amp;&amp; other, const Allocator&amp; alloc );</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>set<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v1<span class="token punctuation">&#123;</span><span class="token string">"aaa"</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>set<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> <span class="token function">v</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>string a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// aaa bbb ccc</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="operator"><a href="#operator" class="headerlink" title="operator="></a>operator=</h3><p><code>multiset&amp; operator=( const multiset&amp; other );</code><br><code>multiset&amp; operator=( multiset&amp;&amp; other ) noexcept</code><br><code>multiset&amp; operator=( std::initializer_list&lt;value_type&gt; ilist );</code></p>   <pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>multiset<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token string">"aaa"</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>multiset<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v1 <span class="token operator">=</span> v<span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>multiset<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v2 <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>multiset<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v3 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"aaa"</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>string a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// aaa bbb ccc</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="get-allocator"><a href="#get-allocator" class="headerlink" title="get_allocator"></a>get_allocator</h3><p><code>allocator_type get_allocator() const noexcept;</code></p><p>返回与容器关联的分配器。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>multiset<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v<span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>multiset<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span><span class="token double-colon punctuation">::</span>allocator_type alloc_type <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">get_allocator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h2><h3 id="begin-end"><a href="#begin-end" class="headerlink" title="begin - end"></a>begin - end</h3><p><code>iterator begin() noexcept;</code>  <code>const_iterator begin() const noexcept;</code><br><code>iterator end() noexcept;</code>  <code>const_iterator end() const noexcept;</code></p><p>返回指向容器开头和结尾的迭代器。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>multiset<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token string">"aaa"</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>multiset<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator i <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">!=</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>i <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span><span class="token comment">// aaa bbb ccc</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="cbegin-cend"><a href="#cbegin-cend" class="headerlink" title="cbegin - cend"></a>cbegin - cend</h3><p><code>const_iterator cbegin() const noexcept;</code>  <code>const_iterator cend() const noexcept;</code></p><p>返回指向容器开头和结尾的常量迭代器。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>multiset<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token string">"aaa"</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>multiset<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span><span class="token double-colon punctuation">::</span>const_iterator i <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">!=</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>i <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span><span class="token comment">// aaa bbb ccc</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="rbegin-rend"><a href="#rbegin-rend" class="headerlink" title="rbegin - rend"></a>rbegin - rend</h3><p><code>reverse_iterator rbegin() noexcept;</code>  <code>const_reverse_iterator rbegin() const noexcept;</code><br><code>const_reverse_iterator rend() const noexcept;</code></p><p>返回指向容器开头和结尾的反向迭代器。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>multiset<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token string">"aaa"</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>multiset<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span><span class="token double-colon punctuation">::</span>reverse_iterator i <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">rbegin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">!=</span> v<span class="token punctuation">.</span><span class="token function">rend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>i <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span><span class="token comment">// ccc bbb aaa</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="crbegin-crend"><a href="#crbegin-crend" class="headerlink" title="crbegin - crend"></a>crbegin - crend</h3><p><code>const_reverse_iterator crbegin() const noexcept;</code><br><code>const_reverse_iterator crend() const noexcept;</code></p><p>返回指向容器开头和结尾的反向常量迭代器。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>multiset<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token string">"aaa"</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>multiset<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span><span class="token double-colon punctuation">::</span>reverse_iterator i <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">rbegin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">!=</span> v<span class="token punctuation">.</span><span class="token function">rend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>   std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>i <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span><span class="token comment">// ccc bbb aaa</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="容量"><a href="#容量" class="headerlink" title="容量"></a>容量</h2><h3 id="empty"><a href="#empty" class="headerlink" title="empty"></a>empty</h3><p><code>[[nodiscard]] bool empty() const noexcept;</code></p><p>判断容器是否为空，空则为true</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>multiset<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token string">"aaa"</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>boolalpha <span class="token operator">&lt;&lt;</span> v<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="size"><a href="#size" class="headerlink" title="size"></a>size</h3><p><code>size_type size() const noexcept;</code></p><p>返回容器中的元素数, 即 std::distance(begin(), end()) 。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>multiset<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token string">"aaa"</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> v<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// 3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="max-size"><a href="#max-size" class="headerlink" title="max_size"></a>max_size</h3><p><code>size_type max_size() const noexcept;</code></p><p>返回根据系统或库实现限制的容器可保有的元素最大数量</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>multiset<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token string">"aaa"</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> v<span class="token punctuation">.</span><span class="token function">max_size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// 288230376151711743</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="修改器"><a href="#修改器" class="headerlink" title="修改器"></a>修改器</h2><h3 id="clear"><a href="#clear" class="headerlink" title="clear"></a>clear</h3><p><code>void clear() noexcept;</code></p><p>擦除所有元素。此调用后 <code>size()</code> 返回零。非法化任何指代所含元素的引用、指针或迭代器。任何尾后迭代器亦被非法化</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>multiset<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token string">"aaa"</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> v<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// 0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="insert"><a href="#insert" class="headerlink" title="insert"></a>insert</h3><p>插入元素到容器中的指定位置。</p><ol><li>插入 <code>value</code>返回由指向被插入元素（或阻止插入的元素）的迭代器和若插入发生则设为 true 的 bool 值。 支持移动语义。</li></ol><p><code>iterator insert( const value_type&amp; value );</code>， <code>iterator insert( value_type&amp;&amp; value );</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>multiset<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token string">"aaa"</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">auto</span> it <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">"ddd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// auto it = v.insert(std::move("ddd"));</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>it <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// ddd</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>插入 <code>value</code> 到尽可能接近，正好前于 <code>hint</code> 的位置。返回指向被插入元素，或阻止插入的元素的迭代器。</li></ol><p><code>iterator insert( const_iterator hint, const value_type&amp; value );</code><br><code>iterator insert( const_iterator hint, value_type&amp;&amp; value );</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>multiset<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token string">"aaa"</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>multiset<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator it <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token string">"aab"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// </span>std<span class="token double-colon punctuation">::</span>set<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator it <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token string">"aba"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>it <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// aab</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>string a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// aaa aab bbb ccc</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>插入来自范围 <code>[first, last)</code> 的元素。 若范围中的多个元素拥有比较等价的关键，则插入哪个元素是未指定的</li></ol><p><code>template&lt; class InputIt &gt; void insert( InputIt first, InputIt last );</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v1<span class="token punctuation">&#123;</span><span class="token string">"aaa"</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>multiset<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v<span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>v1<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v1<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>string a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// aaa bbb ccc</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>插入来自 initializer_list <code>ilist</code> 的元素。 若范围中的多个元素拥有比较等价的关键，则插入哪个元素是未指定的</li></ol><p><code>void insert( std::initializer_list&lt;value_type&gt; ilist );</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>multiset<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v<span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"aaa"</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>string a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// aaa bbb ccc</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="5"><li> 若 nh 是空的结点把柄，则不做任何事。否则插入 nh 所占有的元素到容器，若容器尚未含有拥有等价于 nh.key() 的关键的元素。</li></ol><p><code>iterator insert(node_type&amp;&amp; nh);</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>multiset<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token string">"aaa"</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>multiset<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span><span class="token double-colon punctuation">::</span>node_type nt<span class="token punctuation">;</span><span class="token keyword">auto</span> it <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span>nt<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="6"><li>若 nh 是空的结点把柄，则不做任何事并返回尾迭代器。否则，插入 nh 所占有的元素到容器，若容器尚未含有拥有等价于 nh.key() 的关键的元素，并返回指向拥有等于 nh.key() 的关键的元素的迭代器（无关乎插入成功还是失败）。若插入成功，则从 nh 移动，否则它保持该元素的所有权。元素被插入到尽可能接近正好先于 hint 的位置。</li></ol><p><code>iterator insert(const_iterator hint, node_type&amp;&amp; nh);</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>multiset<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token string">"aaa"</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>multiset<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span><span class="token double-colon punctuation">::</span>node_type nt<span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>multiset<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator it <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span>nt<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="emplace"><a href="#emplace" class="headerlink" title="emplace"></a>emplace</h3><p><code>template&lt; class... Args &gt; iterator emplace( Args&amp;&amp;... args );</code></p><p>若容器中无拥有该关键的元素，则插入以给定的 <code>args</code> 原位构造的新元素到容器。返回由指向被插入元素，或若不发生插入则为既存元素的迭代器，和指代插入是否发生的 bool （若发生插入则为 true ，否则为 false ）。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>multiset<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token string">"aaa"</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">auto</span> it <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">"ddd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>it <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// ddd</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>string a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// // aaa bbb ccc ddd</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="emplace-hint"><a href="#emplace-hint" class="headerlink" title="emplace_hint"></a>emplace_hint</h3><p><code>template&lt; class... Args &gt; iterator emplace_hint( const_iterator hint, Args&amp;&amp;... args )</code></p><p>插入新元素到容器中尽可能接近于恰在 <code>hint</code> 前的位置。原位构造元素，即不进行复制或移动操作。返回指向新插入元素的迭代器。若因元素已存在而插入失败，则返回指向拥有等价关键的既存元素的迭代器。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>multiset<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token string">"aaa"</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">auto</span> it <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"ddd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>it <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// ddd</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>string a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// aaa bbb ccc ddd</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="erase"><a href="#erase" class="headerlink" title="erase"></a>erase</h3><p>从容器擦除指定的元素。</p><p>1.移除位于pos的元素。返回指向下一个元素的迭代器。如一处的是最后一个，返回的是指向尾部的迭代器。</p><p><code>iterator erase( const_iterator pos );</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>multiset<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token string">"aaa"</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">auto</span> it <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>it <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// bbb</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>string a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// bbb ccc</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>2.移除一定范围内的元素。返回指向下一个元素的迭代器。如一处的是最后一个，返回的是指向尾部的迭代器.</p><p><code>iterator erase( const_iterator first, const_iterator last );</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>multiset<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token string">"aaa"</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">auto</span> it <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>string a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>3.移除关键等于 <code>key</code> 的元素（若存在）。</p><p><code>size_type erase( const key_type&amp; key );</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>multiset<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token string">"aaa"</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>multiset<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span><span class="token double-colon punctuation">::</span>key_type k<span class="token punctuation">&#123;</span><span class="token string">"bbb"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">auto</span> s <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> s <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// 2</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>string a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// bbb ccc</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="swap"><a href="#swap" class="headerlink" title="swap"></a>swap</h3><p><code>void swap( set&amp; other ) noexcept(std::allocator_traits&lt;Allocator&gt;::is_always_equal::value &amp;&amp; std::is_nothrow_swappable&lt;Compare&gt;::value)</code></p><p>将内容与其他容器交换。不在单独的元素上调用任何移动、复制或交换操作。所有迭代器和引用保持合法。尾后迭代器被非法化。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>multiset<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v1<span class="token punctuation">&#123;</span><span class="token string">"ddd"</span><span class="token punctuation">,</span> <span class="token string">"eee"</span><span class="token punctuation">,</span> <span class="token string">"fff"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>multiset<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token string">"aaa"</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">swap</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>string a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ddd eee fff</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="extract"><a href="#extract" class="headerlink" title="extract"></a>extract</h3><ol><li><p>解链含 position 所指向元素的结点并返回占有它的结点柄。</p><p><code>node_type extract( const key_type&amp; x );</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>multiset<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token string">"aaa"</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>multiset<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span><span class="token double-colon punctuation">::</span>key_type k<span class="token punctuation">&#123;</span><span class="token string">"bbb"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>multiset<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span><span class="token double-colon punctuation">::</span>node_type nt <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">extract</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> nt<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// bbb</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>string a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// aaa bbb ccc</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>若容器拥有元素而其键等于 <code>x</code> ，则从容器解链该元素并返回占有它的结点句柄。否则，返回空结点句柄。</p><p><code>node_type extract( const_iterator position );</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>multiset<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token string">"aaa"</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>multiset<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span><span class="token double-colon punctuation">::</span>node_type nt <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">extract</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>string a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="merge"><a href="#merge" class="headerlink" title="merge"></a>merge</h3><p><code>template&lt;class C2&gt; void merge( std::set&lt;Key, C2, Allocator&gt;&amp; source );</code><br><code>template&lt;class C2&gt; void merge( std::set&lt;Key, C2, Allocator&gt;&amp;&amp; source );</code><br><code>template&lt;class C2&gt; void merge( std::multiset&lt;Key, C2, Allocator&gt;&amp; source );</code><br><code>template&lt;class C2&gt; void merge( std::multiset&lt;Key, C2, Allocator&gt;&amp;&amp; source );</code></p><p>试图提取其他set中的每个元素，并插入到当前容器 。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>multiset<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v1<span class="token punctuation">&#123;</span><span class="token string">"ddd"</span><span class="token punctuation">,</span> <span class="token string">"eee"</span><span class="token punctuation">,</span> <span class="token string">"fff"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>multiset<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token string">"aaa"</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">merge</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>string a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// aaa bbb ccc ddd eee fff</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h2><h3 id="count"><a href="#count" class="headerlink" title="count"></a>count</h3><p><code>size_type count( const Key&amp; key ) const;</code><br><code>template&lt; class K &gt; size_type count( const K&amp; x ) const</code>，用于查找自定义类型，需重载<code>&lt;</code>比较符。</p><p>返回拥有键比较等价于指定参数的元素数，因为此容器不允许重复故为 1 或 0。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>multiset<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token string">"aaa"</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> v<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token string">"aaa"</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// 2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="find"><a href="#find" class="headerlink" title="find"></a>find</h3><p><code>iterator find( const Key&amp; key );</code>, <code>const_iterator find( const Key&amp; key ) const;</code><br><code>template&lt; class K &gt; iterator find( const K&amp; x );</code><br><code>template&lt; class K &gt; const_iterator find( const K&amp; x ) const;</code></p><p>寻找带有特定键的元素。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>multiset<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token string">"aaa"</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">auto</span> it <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">"aaa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>it <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// aaa</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="contains"><a href="#contains" class="headerlink" title="contains"></a>contains</h3><p><code>bool contains( const Key&amp; key ) const;</code><br><code>template&lt; class K &gt; bool contains( const K&amp; x ) const;</code></p><p>检查容器是否含有带特定键的元素。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>multiset<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token string">"aaa"</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">bool</span> it <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"aaa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>boolalpha <span class="token operator">&lt;&lt;</span> it <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="equal-range"><a href="#equal-range" class="headerlink" title="equal_range"></a>equal_range</h3><p><code>std::pair&lt;iterator,iterator&gt; equal_range( const Key&amp; key );</code><br><code>std::pair&lt;const_iterator,const_iterator&gt; equal_range( const Key&amp; key ) const;</code><br><code>template&lt; class K &gt; std::pair&lt;iterator,iterator&gt; equal_range( const K&amp; x );</code><br><code>template&lt; class K &gt; std::pair&lt;const_iterator,const_iterator&gt; equal_range( const K&amp; x ) const;</code></p><p>返回匹配特定键的元素范围.返回值第一个指向首个不小于 <code>key</code> 的元素，第二个指向首个大于<code>key</code> 的元素。若找不到这种元素，则返回尾后迭代器。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>multiset<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token string">"aaa"</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">auto</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">]</span> <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">equal_range</span><span class="token punctuation">(</span><span class="token string">"bbb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>b <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// bbb ccc</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="lower-bound"><a href="#lower-bound" class="headerlink" title="lower_bound"></a>lower_bound</h3><p><code>iterator lower_bound( const Key&amp; key );</code>, <code>const_iterator lower_bound( const Key&amp; key ) const;</code><br><code>template&lt; class K &gt; iterator lower_bound(const K&amp; x);</code><br><code>template&lt; class K &gt; const_iterator lower_bound(const K&amp; x) const;</code></p><p>返回指向首个不小于(大于、等于)给定键的元素的迭代器.若找不到这种元素，则返回尾后迭代器。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>multiset<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token string">"aaa"</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">auto</span> a <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">lower_bound</span><span class="token punctuation">(</span><span class="token string">"bbb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>a <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// bbb</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="upper-bound"><a href="#upper-bound" class="headerlink" title="upper_bound"></a>upper_bound</h3><p><code>iterator upper_bound( const Key&amp; key );</code>, <code>const_iterator upper_bound( const Key&amp; key ) const;</code><br><code>template&lt; class K &gt; iterator upper_bound( const K&amp; x );</code><br><code>template&lt; class K &gt; const_iterator upper_bound( const K&amp; x ) const;</code></p><p>返回指向首个大于给定键的元素的迭代器.若找不到这种元素，则返回尾后迭代器。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>multiset<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token string">"aaa"</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">auto</span> a <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">upper_bound</span><span class="token punctuation">(</span><span class="token string">"bbb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>a <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// ccc</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="观察器"><a href="#观察器" class="headerlink" title="观察器"></a>观察器</h2><h3 id="key-comp"><a href="#key-comp" class="headerlink" title="key_comp"></a>key_comp</h3><p><code>key_compare key_comp() const;</code></p><p>返回用于比较<code>key</code>的函数对象，它是此容器构造函数参数 <code>comp</code> 的副本，它与 <code>value_comp</code> 相同。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>multiset<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token string">"aaa"</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>multiset<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span><span class="token double-colon punctuation">::</span>key_compare func <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">key_comp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>boolalpha <span class="token operator">&lt;&lt;</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token string">"aaa"</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="value-comp"><a href="#value-comp" class="headerlink" title="value_comp"></a>value_comp</h3><p><code>std::multiset::value_compare value_comp() const;</code></p><p>返回用于在<code>value_type</code>类型的对象中比较键的函数。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>multiset<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token string">"aaa"</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>multiset<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span><span class="token double-colon punctuation">::</span>value_compare func <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">value_comp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>boolalpha <span class="token operator">&lt;&lt;</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token string">"aaa"</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="非成员函数"><a href="#非成员函数" class="headerlink" title="非成员函数"></a>非成员函数</h2><h3 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h3><ol><li><code>operator==</code>  2.<code>operator!=</code>  3.<code>operator&lt;</code>  4.<code>operator&lt;=</code>  5.<code>operator&gt;</code>  6.<code>operator&gt;=</code>  7.<code>operator&lt;=&gt;</code></li></ol><h3 id="swap-1"><a href="#swap-1" class="headerlink" title="swap"></a>swap</h3><p><code>std::swap(std::multiset)</code>  特化 <code>std::swap</code> 算法</p><h3 id="擦除"><a href="#擦除" class="headerlink" title="擦除"></a>擦除</h3><p><code>erase(std::multiset)， erase_if(std::multiset)</code>  擦除所有满足特定判别标准的元素</p>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STL </tag>
            
            <tag> 关联容器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++ map API</title>
      <link href="/C-map-API.html"/>
      <url>/C-map-API.html</url>
      
        <content type="html"><![CDATA[<h2 id="C-map"><a href="#C-map" class="headerlink" title="C++ map"></a>C++ map</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">Key</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">Compare</span> <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>less<span class="token operator">&lt;</span>Key<span class="token operator">></span><span class="token punctuation">,</span>    <span class="token keyword">class</span> <span class="token class-name">Allocator</span> <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>allocator<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>pair<span class="token operator">&lt;</span><span class="token keyword">const</span> Key<span class="token punctuation">,</span> T<span class="token operator">></span> <span class="token operator">></span><span class="token operator">></span> <span class="token keyword">class</span> <span class="token class-name">map</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> pmr <span class="token punctuation">&#123;</span>    <span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">Key</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">Compare</span> <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>less<span class="token operator">&lt;</span>Key<span class="token operator">>></span>    <span class="token keyword">using</span> map <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>map<span class="token operator">&lt;</span>Key<span class="token punctuation">,</span> T<span class="token punctuation">,</span> Compare<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>pmr<span class="token double-colon punctuation">::</span>polymorphic_allocator<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>pair<span class="token operator">&lt;</span><span class="token keyword">const</span> Key<span class="token punctuation">,</span>T<span class="token operator">>></span><span class="token operator">></span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>std::map</code> 是有序键值对容器，它的元素的键是唯一的。用比较函数 <code>Compare</code> 排序键。搜索、移除和插入操作拥有对数复杂度。 <code>map</code> 通常实现为红黑树</p><p>在每个标准库使用比较 <code>(Compare) </code>概念的场所，用等价关系确定唯一性。不精确地说，若二个对象 <code>a</code> 与 <code>b</code> 相互间既不比较大于亦不比较小于： <code>!comp(a, b) &amp;&amp; !comp(b, a)</code> ，则认为它们等价。</p><h2 id="成员类型"><a href="#成员类型" class="headerlink" title="成员类型"></a>成员类型</h2><table><thead><tr><th>成员类型</th><th>定义</th></tr></thead><tbody><tr><td><code>key_type</code></td><td><code>Key</code></td></tr><tr><td><code>mapped_type</code></td><td><code>T</code></td></tr><tr><td><code>size_type</code></td><td>无符号整数类型（通常是 <code>std::size_t</code> ）</td></tr><tr><td><code>difference_type</code></td><td>有符号整数类型（通常是 <code>std::ptrdiff_t</code> ）</td></tr><tr><td><code>key_compare</code></td><td><code>Compare</code></td></tr><tr><td><code>allocator_type</code></td><td><code>Allocator</code></td></tr><tr><td><code>reference</code></td><td><code>value_type&amp;</code></td></tr><tr><td><code>const_reference</code></td><td><code>const value_type&amp;</code></td></tr><tr><td><code>pointer</code></td><td><code>std::allocator_traits&lt;Allocator&gt;::pointer</code></td></tr><tr><td><code>const_pointer</code></td><td><code>std::allocator_traits&lt;Allocator&gt;::const_pointer</code></td></tr><tr><td><code>iterator</code></td><td>遗留双向迭代器 (LegacyRandomAccessIterator)</td></tr><tr><td><code>const_iterator</code></td><td>常双向迭代器</td></tr><tr><td><code>reverse_iterator</code></td><td><code>std::reverse_iterator&lt;iterator&gt;</code></td></tr><tr><td><code>const_reverse_iterator</code></td><td><code>std::reverse_iterator&lt;const_iterator&gt;</code></td></tr><tr><td><code>node_type</code></td><td>表示容器结点的结点句柄特化</td></tr></tbody></table><p><code>insert_return_type</code>:描述插入 <code>node_type</code> 结果的类型，下列类型的特化，以模板实参 <code>iterator</code> 和 <code>node_type</code> 实例化。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">Iter</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">NodeType</span><span class="token operator">></span> <span class="token keyword">struct</span> <span class="token comment">/*unspecified*/</span> <span class="token punctuation">&#123;</span>    Iter     position<span class="token punctuation">;</span>    <span class="token keyword">bool</span>     inserted<span class="token punctuation">;</span>    NodeType node<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="构造"><a href="#构造" class="headerlink" title="构造"></a>构造</h2><h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><ol><li><p>创建一个空容器. </p><p><code>map();</code>,  <code>explicit map( const Allocator&amp; alloc );</code><br><code>explicit map( const Compare&amp; comp, const Allocator&amp; alloc = Allocator() );</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>map<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> <span class="token function">v</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>初始化列表</p><p><code>map( std::initializer_list&lt;value_type&gt; init, const Allocator&amp; );</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"aaa"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// for (auto&amp;  i:v) std::cout&lt;&lt; i.first &lt;&lt; ":" &lt;&lt; i.second &lt;&lt; ", "; // 1:aaa, 2:bbb, 4:ccc, </span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>     std<span class="token double-colon punctuation">::</span> cout <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">.</span>first <span class="token operator">&lt;&lt;</span> <span class="token string">":"</span> <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">.</span>second <span class="token operator">&lt;&lt;</span> <span class="token string">", "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1:aaa, 2:bbb, 4:ccc, </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>以一对迭代器创建</p><p><code>template&lt; class InputIt &gt; map( InputIt first, InputIt last,  const Allocator&amp; alloc );</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v1<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"ddd"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">"eee"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">"fff"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> <span class="token function">v</span><span class="token punctuation">(</span>v1<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v1<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span>  i<span class="token operator">:</span>v<span class="token punctuation">)</span> std<span class="token double-colon punctuation">::</span>cout<span class="token operator">&lt;&lt;</span> i<span class="token punctuation">.</span>first <span class="token operator">&lt;&lt;</span> <span class="token string">":"</span> <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">.</span>second <span class="token operator">&lt;&lt;</span> <span class="token string">", "</span><span class="token punctuation">;</span> <span class="token comment">// 3:ddd, 4:eee, 5:fff,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>以其他的容器创建</p><p><code>map( const map&amp; other );</code>, <code>map( const map&amp; other, const Allocator&amp; alloc );</code> ,</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v1<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"ddd"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">"eee"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">"fff"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> <span class="token function">v</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span>  i<span class="token operator">:</span>v<span class="token punctuation">)</span> std<span class="token double-colon punctuation">::</span>cout<span class="token operator">&lt;&lt;</span> i<span class="token punctuation">.</span>first <span class="token operator">&lt;&lt;</span> <span class="token string">":"</span> <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">.</span>second <span class="token operator">&lt;&lt;</span> <span class="token string">", "</span><span class="token punctuation">;</span> <span class="token comment">// 3:ddd, 4:eee, 5:fff,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>还可以使用移动语义</p><p><code>map( map&amp;&amp; other );</code>, <code>map( map&amp;&amp; other, const Allocator&amp; alloc );</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v1<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"ddd"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">"eee"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">"fff"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> <span class="token function">v</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span>  i<span class="token operator">:</span>v<span class="token punctuation">)</span> std<span class="token double-colon punctuation">::</span>cout<span class="token operator">&lt;&lt;</span> i<span class="token punctuation">.</span>first <span class="token operator">&lt;&lt;</span> <span class="token string">":"</span> <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">.</span>second <span class="token operator">&lt;&lt;</span> <span class="token string">", "</span><span class="token punctuation">;</span> <span class="token comment">// 3:ddd, 4:eee, 5:fff,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="operator"><a href="#operator" class="headerlink" title="operator="></a>operator=</h3><p><code>map&amp; operator=( const map&amp; other );</code>, <code>map&amp; operator=( std::initializer_list&lt;value_type&gt; ilist );</code><br><code>map&amp; operator=( map&amp;&amp; other ) noexcept(std::allocator_traits&lt;Allocator&gt;::is_always_equal::value &amp;&amp; std::is_nothrow_move_assignable&lt;Compare&gt;::value)</code></p>   <pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v1<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"ddd"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">"eee"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">"fff"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v <span class="token operator">=</span> v1<span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v2 <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v3 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"aaa"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span>  i<span class="token operator">:</span>v<span class="token punctuation">)</span> std<span class="token double-colon punctuation">::</span>cout<span class="token operator">&lt;&lt;</span> i<span class="token punctuation">.</span>first <span class="token operator">&lt;&lt;</span> <span class="token string">":"</span> <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">.</span>second <span class="token operator">&lt;&lt;</span> <span class="token string">", "</span><span class="token punctuation">;</span> <span class="token comment">// // 3:ddd, 4:eee, 5:fff,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="get-allocator"><a href="#get-allocator" class="headerlink" title="get_allocator"></a>get_allocator</h3><p><code>allocator_type get_allocator() const noexcept;</code></p><p>返回与容器关联的分配器。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"aaa"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span><span class="token double-colon punctuation">::</span>allocator_type alloc_type <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">get_allocator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="元素访问"><a href="#元素访问" class="headerlink" title="元素访问"></a>元素访问</h2><h3 id="at"><a href="#at" class="headerlink" title="at"></a>at</h3><p><code>T&amp; at( const Key&amp; key );</code>, <code>const T&amp; at( const Key&amp; key ) const;</code></p><p>访问或插入指定的元素，同时进行越界检查.</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"aaa"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> v<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// bbb</span>v<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span>  i<span class="token operator">:</span>v<span class="token punctuation">)</span>    std<span class="token double-colon punctuation">::</span>cout<span class="token operator">&lt;&lt;</span> i<span class="token punctuation">.</span>first <span class="token operator">&lt;&lt;</span> <span class="token string">":"</span> <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">.</span>second <span class="token operator">&lt;&lt;</span> <span class="token string">", "</span><span class="token punctuation">;</span> <span class="token comment">// 1:aaa, 2:abc, 4:ccc,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="operator-1"><a href="#operator-1" class="headerlink" title="operator[]"></a>operator[]</h3><p><code>T&amp; operator[]( const Key&amp; key );</code>, <code>T&amp; operator[]( Key&amp;&amp; key );</code></p><p>访问或插入指定的元素</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"aaa"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> v<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// bbbv[2] = "abc";</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span>  i<span class="token operator">:</span>v<span class="token punctuation">)</span> std<span class="token double-colon punctuation">::</span>cout<span class="token operator">&lt;&lt;</span> i<span class="token punctuation">.</span>first <span class="token operator">&lt;&lt;</span> <span class="token string">":"</span> <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">.</span>second <span class="token operator">&lt;&lt;</span> <span class="token string">", "</span><span class="token punctuation">;</span> <span class="token comment">// 1:aaa, 2:abc, 4:ccc,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h2><h3 id="begin-end"><a href="#begin-end" class="headerlink" title="begin - end"></a>begin - end</h3><p><code>iterator begin() noexcept;</code>  <code>const_iterator begin() const noexcept;</code><br><code>iterator end() noexcept;</code>  <code>const_iterator end() const noexcept;</code></p><p>返回指向容器开头和结尾的迭代器。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"aaa"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator i <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">!=</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>   std<span class="token double-colon punctuation">::</span>cout<span class="token operator">&lt;&lt;</span> i<span class="token operator">-></span>first <span class="token operator">&lt;&lt;</span> <span class="token string">":"</span> <span class="token operator">&lt;&lt;</span> i<span class="token operator">-></span>second <span class="token operator">&lt;&lt;</span> <span class="token string">", "</span><span class="token punctuation">;</span> <span class="token comment">// 1:aaa, 2:abc, 4:ccc,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="cbegin-cend"><a href="#cbegin-cend" class="headerlink" title="cbegin - cend"></a>cbegin - cend</h3><p><code>const_iterator cbegin() const noexcept;</code>  <code>const_iterator cend() const noexcept;</code></p><p>返回指向容器开头和结尾的常量迭代器。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"aaa"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span><span class="token double-colon punctuation">::</span>const_iterator i <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">!=</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>   std<span class="token double-colon punctuation">::</span>cout<span class="token operator">&lt;&lt;</span> i<span class="token operator">-></span>first <span class="token operator">&lt;&lt;</span> <span class="token string">":"</span> <span class="token operator">&lt;&lt;</span> i<span class="token operator">-></span>second <span class="token operator">&lt;&lt;</span> <span class="token string">", "</span><span class="token punctuation">;</span> <span class="token comment">// 1:aaa, 2:abc, 4:ccc,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="rbegin-rend"><a href="#rbegin-rend" class="headerlink" title="rbegin - rend"></a>rbegin - rend</h3><p><code>reverse_iterator rbegin() noexcept;</code>  <code>const_reverse_iterator rbegin() const noexcept;</code><br><code>const_reverse_iterator rend() const noexcept;</code></p><p>返回指向容器开头和结尾的反向迭代器。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"aaa"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span><span class="token double-colon punctuation">::</span>reverse_iterator i <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">rbegin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">!=</span> v<span class="token punctuation">.</span><span class="token function">rend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>   std<span class="token double-colon punctuation">::</span>cout<span class="token operator">&lt;&lt;</span> i<span class="token operator">-></span>first <span class="token operator">&lt;&lt;</span> <span class="token string">":"</span> <span class="token operator">&lt;&lt;</span> i<span class="token operator">-></span>second <span class="token operator">&lt;&lt;</span> <span class="token string">", "</span><span class="token punctuation">;</span> <span class="token comment">// 4:ccc, 2:bbb, 1:aaa, </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="crbegin-crend"><a href="#crbegin-crend" class="headerlink" title="crbegin - crend"></a>crbegin - crend</h3><p><code>const_reverse_iterator crbegin() const noexcept;</code><br><code>const_reverse_iterator crend() const noexcept;</code></p><p>返回指向容器开头和结尾的反向常量迭代器。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"aaa"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span><span class="token double-colon punctuation">::</span>const_reverse_iterator i <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">rbegin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">!=</span> v<span class="token punctuation">.</span><span class="token function">rend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>   std<span class="token double-colon punctuation">::</span>cout<span class="token operator">&lt;&lt;</span> i<span class="token operator">-></span>first <span class="token operator">&lt;&lt;</span> <span class="token string">":"</span> <span class="token operator">&lt;&lt;</span> i<span class="token operator">-></span>second <span class="token operator">&lt;&lt;</span> <span class="token string">", "</span><span class="token punctuation">;</span> <span class="token comment">// 4:ccc, 2:bbb, 1:aaa, </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="容量"><a href="#容量" class="headerlink" title="容量"></a>容量</h2><h3 id="empty"><a href="#empty" class="headerlink" title="empty"></a>empty</h3><p><code>[[nodiscard]] bool empty() const noexcept;</code></p><p>判断容器是否为空，空则为true</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"aaa"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>boolalpha <span class="token operator">&lt;&lt;</span> v<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="size"><a href="#size" class="headerlink" title="size"></a>size</h3><p><code>size_type size() const noexcept;</code></p><p>返回容器中的元素数, 即 std::distance(begin(), end()) 。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"aaa"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> v<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// 3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="max-size"><a href="#max-size" class="headerlink" title="max_size"></a>max_size</h3><p><code>size_type max_size() const noexcept;</code></p><p>返回根据系统或库实现限制的容器可保有的元素最大数量</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"aaa"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> v<span class="token punctuation">.</span><span class="token function">max_size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// 256204778801521550</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="修改器"><a href="#修改器" class="headerlink" title="修改器"></a>修改器</h2><h3 id="clear"><a href="#clear" class="headerlink" title="clear"></a>clear</h3><p><code>void clear() noexcept;</code></p><p>擦除所有元素。此调用后 <code>size()</code> 返回零。非法化任何指代所含元素的引用、指针或迭代器。任何尾后迭代器亦被非法化</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"aaa"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> v<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// 0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="insert"><a href="#insert" class="headerlink" title="insert"></a>insert</h3><p>插入元素到容器中的指定位置。</p><ol><li>插入 <code>value</code>返回由指向被插入元素（或阻止插入的元素）的迭代器和若插入发生则设为 true 的 bool 值。 支持移动语义。</li></ol><p><code>std::pair&lt;iterator,bool&gt; insert( const value_type&amp; value )</code><br><code>std::pair&lt;iterator,bool&gt; insert( value_type&amp;&amp; value );</code><br><code>template&lt; class P &gt; std::pair&lt;iterator,bool&gt; insert( P&amp;&amp; value );</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"aaa"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>pair<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token operator">></span> p<span class="token punctuation">;</span>p <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"ddd"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"insert "</span> <span class="token operator">&lt;&lt;</span> p<span class="token punctuation">.</span>first<span class="token operator">-></span>first <span class="token operator">&lt;&lt;</span> <span class="token string">":"</span> <span class="token operator">&lt;&lt;</span> p<span class="token punctuation">.</span>first<span class="token operator">-></span>second <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>boolalpha <span class="token operator">&lt;&lt;</span> p<span class="token punctuation">.</span>second <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// insert 3:ddd true</span>std<span class="token double-colon punctuation">::</span>map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"aaa"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>pair<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token operator">></span> p<span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> in<span class="token punctuation">&#123;</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"ddd"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>p <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"insert "</span> <span class="token operator">&lt;&lt;</span> p<span class="token punctuation">.</span>first<span class="token operator">-></span>first <span class="token operator">&lt;&lt;</span> <span class="token string">":"</span> <span class="token operator">&lt;&lt;</span> p<span class="token punctuation">.</span>first<span class="token operator">-></span>second <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>boolalpha <span class="token operator">&lt;&lt;</span> p<span class="token punctuation">.</span>second <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// insert 3:ddd true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>插入 <code>value</code> 到尽可能接近，正好前于 <code>hint</code> 的位置。返回指向被插入元素，或阻止插入的元素的迭代器。</li></ol><p><code>iterator insert( const_iterator hint, const value_type&amp; value );</code><br><code>iterator insert( const_iterator hint, value_type&amp;&amp; value );</code><br><code>template&lt; class P &gt; iterator insert( const_iterator hint, P&amp;&amp; value )</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"aaa"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> in<span class="token punctuation">&#123;</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"ddd"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">auto</span>  p <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> in<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// auto p = v.insert(v.end(), std::move(in));</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>i <span class="token operator">:</span> v<span class="token punctuation">)</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">.</span>first <span class="token operator">&lt;&lt;</span> <span class="token string">":"</span> <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">.</span>second <span class="token operator">&lt;&lt;</span> <span class="token string">", "</span><span class="token punctuation">;</span> <span class="token comment">// 1:aaa, 2:bbb, 3:ddd, 4:ccc,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>插入来自范围 <code>[first, last)</code> 的元素。 若范围中的多个元素拥有比较等价的关键，则插入哪个元素是未指定的</li></ol><p><code>template&lt; class InputIt &gt; void insert( InputIt first, InputIt last );</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v1<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"aaa"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v<span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>v1<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v1<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>i <span class="token operator">:</span> v<span class="token punctuation">)</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">.</span>first <span class="token operator">&lt;&lt;</span> <span class="token string">":"</span> <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">.</span>second <span class="token operator">&lt;&lt;</span> <span class="token string">", "</span><span class="token punctuation">;</span> <span class="token comment">// 1:aaa, 2:bbb, 4:ccc,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>插入来自 initializer_list <code>ilist</code> 的元素。 若范围中的多个元素拥有比较等价的关键，则插入哪个元素是未指定的</li></ol><p><code>void insert( std::initializer_list&lt;value_type&gt; ilist );</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"aaa"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"ddd"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">"eee"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">"fff"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>i <span class="token operator">:</span> v<span class="token punctuation">)</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">.</span>first <span class="token operator">&lt;&lt;</span> <span class="token string">":"</span> <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">.</span>second <span class="token operator">&lt;&lt;</span> <span class="token string">", "</span><span class="token punctuation">;</span> <span class="token comment">// 1:aaa, 2:bbb, 3:ddd, 4:ccc, 5:fff,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="5"><li> 若 nh 是空的结点把柄，则不做任何事。否则插入 nh 所占有的元素到容器，若容器尚未含有拥有等价于 nh.key() 的关键的元素。</li></ol><p><code>insert_return_type insert(node_type&amp;&amp; nh);</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"aaa"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span><span class="token double-colon punctuation">::</span>node_type nt<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span><span class="token double-colon punctuation">::</span>insert_return_type it <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span>nt<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> it<span class="token punctuation">.</span>inserted <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// 0</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>i <span class="token operator">:</span> v<span class="token punctuation">)</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">.</span>first <span class="token operator">&lt;&lt;</span> <span class="token string">":"</span> <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">.</span>second <span class="token operator">&lt;&lt;</span> <span class="token string">", "</span><span class="token punctuation">;</span> <span class="token comment">// 1:aaa, 2:bbb, 4:ccc,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="6"><li>若 nh 是空的结点把柄，则不做任何事并返回尾迭代器。否则，插入 nh 所占有的元素到容器，若容器尚未含有拥有等价于 nh.key() 的关键的元素，并返回指向拥有等于 nh.key() 的关键的元素的迭代器（无关乎插入成功还是失败）。若插入成功，则从 nh 移动，否则它保持该元素的所有权。元素被插入到尽可能接近正好先于 hint 的位置。</li></ol><p><code>iterator insert(const_iterator hint, node_type&amp;&amp; nh);</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"aaa"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span><span class="token double-colon punctuation">::</span>node_type nt<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator it <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span>nt<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>i <span class="token operator">:</span> v<span class="token punctuation">)</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">.</span>first <span class="token operator">&lt;&lt;</span> <span class="token string">":"</span> <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">.</span>second <span class="token operator">&lt;&lt;</span> <span class="token string">", "</span><span class="token punctuation">;</span> <span class="token comment">// // 1:aaa, 2:bbb, 4:ccc,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="emplace"><a href="#emplace" class="headerlink" title="emplace"></a>emplace</h3><p><code>template&lt; class... Args &gt; std::pair&lt;iterator,bool&gt; emplace( Args&amp;&amp;... args );</code></p><p>若容器中无拥有该关键的元素，则插入以给定的 <code>args</code> 原位构造的新元素到容器。返回由指向被插入元素，或若不发生插入则为既存元素的迭代器，和指代插入是否发生的 bool （若发生插入则为 true ，否则为 false ）。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"aaa"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> in<span class="token punctuation">&#123;</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"ddd"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">auto</span> <span class="token punctuation">[</span>it<span class="token punctuation">,</span> inserted<span class="token punctuation">]</span> <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> it<span class="token operator">-></span>first <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> inserted <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// 3 1</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>i <span class="token operator">:</span> v<span class="token punctuation">)</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">.</span>first <span class="token operator">&lt;&lt;</span> <span class="token string">":"</span> <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">.</span>second <span class="token operator">&lt;&lt;</span> <span class="token string">", "</span><span class="token punctuation">;</span> <span class="token comment">// 1:aaa, 2:bbb, 3:ddd, 4:ccc,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="insert-or-assign"><a href="#insert-or-assign" class="headerlink" title="insert_or_assign"></a>insert_or_assign</h3><p><code>template &lt;class M&gt; std::pair&lt;iterator, bool&gt; insert_or_assign(const key_type&amp; k, M&amp;&amp; obj);</code><br><code>template &lt;class M&gt; std::pair&lt;iterator, bool&gt; insert_or_assign(key_type&amp;&amp; k, M&amp;&amp; obj);</code><br><code>template &lt;class M&gt; iterator insert_or_assign(const_iterator hint, const key_type&amp; k, M&amp;&amp; obj);</code><br><code>template &lt;class M&gt; iterator insert_or_assign(const_iterator hint, key_type&amp;&amp; k, M&amp;&amp; obj);</code></p><p>插入元素，或若键已存在则赋值给当前元素.</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"aaa"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">auto</span> <span class="token punctuation">[</span>it<span class="token punctuation">,</span> inserted<span class="token punctuation">]</span> <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">insert_or_assign</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"aaa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>boolalpha <span class="token operator">&lt;&lt;</span> inserted <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// false</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>i <span class="token operator">:</span> v<span class="token punctuation">)</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">.</span>first <span class="token operator">&lt;&lt;</span> <span class="token string">":"</span> <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">.</span>second <span class="token operator">&lt;&lt;</span> <span class="token string">", "</span><span class="token punctuation">;</span> <span class="token comment">// 1:aaa, 2:bbb, 4:ccc,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="emplace-hint"><a href="#emplace-hint" class="headerlink" title="emplace_hint"></a>emplace_hint</h3><p><code>template&lt; class... Args &gt; iterator emplace_hint( const_iterator hint, Args&amp;&amp;... args )</code></p><p>插入新元素到容器中尽可能接近于恰在 <code>hint</code> 前的位置。原位构造元素，即不进行复制或移动操作。返回指向新插入元素的迭代器。若因元素已存在而插入失败，则返回指向拥有等价关键的既存元素的迭代器。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"aaa"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">auto</span> it <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">emplace_hint</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"abc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> it<span class="token operator">-></span>first <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// 1</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>i <span class="token operator">:</span> v<span class="token punctuation">)</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">.</span>first <span class="token operator">&lt;&lt;</span> <span class="token string">":"</span> <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">.</span>second <span class="token operator">&lt;&lt;</span> <span class="token string">", "</span><span class="token punctuation">;</span> <span class="token comment">// 1:aaa, 2:bbb, 4:ccc,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="try-emplace"><a href="#try-emplace" class="headerlink" title="try_emplace"></a>try_emplace</h3><p><code>template &lt;class... Args&gt; pair&lt;iterator, bool&gt; try_emplace(const key_type&amp; k, Args&amp;&amp;... args);</code><br><code>template &lt;class... Args&gt; pair&lt;iterator, bool&gt; try_emplace(key_type&amp;&amp; k, Args&amp;&amp;... args);</code><br><code>template &lt;class... Args&gt; iterator try_emplace(const_iterator hint, const key_type&amp; k, Args&amp;&amp;... args);</code><br><code>template &lt;class... Args&gt; iterator try_emplace(const_iterator hint, key_type&amp;&amp; k, Args&amp;&amp;... args);</code></p><p>若键不存在则原位插入，若键存在则不做任何事.</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"aaa"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">auto</span> <span class="token punctuation">[</span>it<span class="token punctuation">,</span> inserted<span class="token punctuation">]</span> <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">try_emplace</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> inserted <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// 1</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>i <span class="token operator">:</span> v<span class="token punctuation">)</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">.</span>first <span class="token operator">&lt;&lt;</span> <span class="token string">":"</span> <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">.</span>second <span class="token operator">&lt;&lt;</span> <span class="token string">", "</span><span class="token punctuation">;</span> <span class="token comment">// 1:aaa, 2:bbb, 3:abc, 4:ccc,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="erase"><a href="#erase" class="headerlink" title="erase"></a>erase</h3><p>从容器擦除指定的元素。</p><p>1.移除位于pos的元素。返回指向下一个元素的迭代器。如一处的是最后一个，返回的是指向尾部的迭代器。</p><p><code>iterator erase( iterator pos );</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"aaa"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">auto</span> it <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> it<span class="token operator">-></span>first <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// 2</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>i <span class="token operator">:</span> v<span class="token punctuation">)</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">.</span>first <span class="token operator">&lt;&lt;</span> <span class="token string">":"</span> <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">.</span>second <span class="token operator">&lt;&lt;</span> <span class="token string">", "</span><span class="token punctuation">;</span> <span class="token comment">// 2:bbb, 4:ccc,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.移除一定范围内的元素。返回指向下一个元素的迭代器。如一处的是最后一个，返回的是指向尾部的迭代器.</p><p><code>iterator erase( const_iterator first, const_iterator last );</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"aaa"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">auto</span> it <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span><span class="token function">prev</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> it<span class="token operator">-></span>first <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// 4</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>i <span class="token operator">:</span> v<span class="token punctuation">)</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">.</span>first <span class="token operator">&lt;&lt;</span> <span class="token string">":"</span> <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">.</span>second <span class="token operator">&lt;&lt;</span> <span class="token string">", "</span><span class="token punctuation">;</span> <span class="token comment">// 4:ccc, </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3.移除关键等于 <code>key</code> 的元素（若存在）。</p><p><code>size_type erase( const key_type&amp; key );</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>multimap<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"aaa"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>multimap<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span><span class="token double-colon punctuation">::</span>key_type k<span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">auto</span> s <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> s <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// 1</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>i <span class="token operator">:</span> v<span class="token punctuation">)</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">.</span>first <span class="token operator">&lt;&lt;</span> <span class="token string">":"</span> <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">.</span>second <span class="token operator">&lt;&lt;</span> <span class="token string">", "</span><span class="token punctuation">;</span> <span class="token comment">// 1:aaa, 4:ccc,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="swap"><a href="#swap" class="headerlink" title="swap"></a>swap</h3><p><code>void swap( map&amp; other ) noexcept(std::allocator_traits&lt;Allocator&gt;::is_always_equal::value &amp;&amp; std::is_nothrow_swappable&lt;Compare&gt;::value)</code></p><p>将内容与其他容器交换。不在单独的元素上调用任何移动、复制或交换操作。所有迭代器和引用保持合法。尾后迭代器被非法化。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v1<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"ddd"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">"eee"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">"fff"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"aaa"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">swap</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>i <span class="token operator">:</span> v<span class="token punctuation">)</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">.</span>first <span class="token operator">&lt;&lt;</span> <span class="token string">":"</span> <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">.</span>second <span class="token operator">&lt;&lt;</span> <span class="token string">", "</span><span class="token punctuation">;</span> <span class="token comment">// 3:ddd, 4:eee, 5:fff,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="extract"><a href="#extract" class="headerlink" title="extract"></a>extract</h3><ol><li><p>解链含 position 所指向元素的结点并返回占有它的结点柄。</p><p><code>node_type extract( const key_type&amp; x );</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"aaa"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">auto</span> it <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">extract</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> it<span class="token punctuation">.</span><span class="token function">key</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">":"</span> <span class="token operator">&lt;&lt;</span> it<span class="token punctuation">.</span><span class="token function">mapped</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// 2:bbb</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>i <span class="token operator">:</span> v<span class="token punctuation">)</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">.</span>first <span class="token operator">&lt;&lt;</span> <span class="token string">":"</span> <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">.</span>second <span class="token operator">&lt;&lt;</span> <span class="token string">", "</span><span class="token punctuation">;</span> <span class="token comment">// 1:aaa, 4:ccc,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>若容器拥有元素而其键等于 <code>x</code> ，则从容器解链该元素并返回占有它的结点句柄。否则，返回空结点句柄。</p><p><code>node_type extract( const_iterator position );</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"aaa"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">auto</span> it <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">extract</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> it<span class="token punctuation">.</span><span class="token function">key</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">":"</span> <span class="token operator">&lt;&lt;</span> it<span class="token punctuation">.</span><span class="token function">mapped</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// 1:aaa</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>i <span class="token operator">:</span> v<span class="token punctuation">)</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">.</span>first <span class="token operator">&lt;&lt;</span> <span class="token string">":"</span> <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">.</span>second <span class="token operator">&lt;&lt;</span> <span class="token string">", "</span><span class="token punctuation">;</span> <span class="token comment">// 2:bbb, 4:ccc,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="merge"><a href="#merge" class="headerlink" title="merge"></a>merge</h3><p><code>template&lt;class C2&gt; void merge( std::map&lt;Key, T, C2, Allocator&gt;&amp; source );</code><br><code>template&lt;class C2&gt; void merge( std::map&lt;Key, T, C2, Allocator&gt;&amp;&amp; source );</code><br><code>template&lt;class C2&gt; void merge( std::multimap&lt;Key, T, C2, Allocator&gt;&amp; source );</code><br><code>template&lt;class C2&gt; void merge( std::multimap&lt;Key, T, C2, Allocator&gt;&amp;&amp; source );</code></p><p>试图提取其他set中的每个元素，并插入到当前容器 。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v1<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"ddd"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">"eee"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">"fff"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"aaa"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">merge</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>i <span class="token operator">:</span> v<span class="token punctuation">)</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">.</span>first <span class="token operator">&lt;&lt;</span> <span class="token string">":"</span> <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">.</span>second <span class="token operator">&lt;&lt;</span> <span class="token string">", "</span><span class="token punctuation">;</span><span class="token comment">// 1:aaa, 2:bbb, 3:ddd, 4:ccc, 5:fff,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h2><h3 id="count"><a href="#count" class="headerlink" title="count"></a>count</h3><p><code>size_type count( const Key&amp; key ) const;</code><br><code>template&lt; class K &gt; size_type count( const K&amp; x ) const</code>，用于查找自定义类型，需重载<code>&lt;</code>比较符。</p><p>返回拥有键比较等价于指定参数的元素数，因为此容器不允许重复故为 1 或 0。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"aaa"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> v<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="find"><a href="#find" class="headerlink" title="find"></a>find</h3><p><code>iterator find( const Key&amp; key );</code>, <code>const_iterator find( const Key&amp; key ) const;</code><br><code>template&lt; class K &gt; iterator find( const K&amp; x );</code><br><code>template&lt; class K &gt; const_iterator find( const K&amp; x ) const;</code></p><p>寻找带有特定键的元素。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"aaa"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">auto</span> it <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> it<span class="token operator">-></span>second <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// aaa</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="contains"><a href="#contains" class="headerlink" title="contains"></a>contains</h3><p><code>bool contains( const Key&amp; key ) const;</code><br><code>template&lt; class K &gt; bool contains( const K&amp; x ) const;</code></p><p>检查容器是否含有带特定键的元素。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"aaa"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">auto</span> it <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>boolalpha <span class="token operator">&lt;&lt;</span> it <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="equal-range"><a href="#equal-range" class="headerlink" title="equal_range"></a>equal_range</h3><p><code>std::pair&lt;iterator, iterator&gt; equal_range( const Key&amp; key );</code><br><code>std::pair&lt;const_iterator, const_iterator&gt; equal_range( const Key&amp; key ) const;</code><br><code>template&lt; class K &gt; std::pair&lt;iterator, iterator&gt; equal_range( const K&amp; x );</code><br><code>template&lt; class K &gt; std::pair&lt;const_iterator, const_iterator&gt; equal_range( const K&amp; x ) const;</code></p><p>返回匹配特定键的元素范围.返回值第一个指向首个不小于 <code>key</code> 的元素，第二个指向首个大于<code>key</code> 的元素。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"aaa"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">auto</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">]</span> <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">equal_range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a<span class="token operator">-></span>second <span class="token operator">&lt;&lt;</span> <span class="token string">","</span> <span class="token operator">&lt;&lt;</span> b<span class="token operator">-></span>second <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// bbb,ccc</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="lower-bound"><a href="#lower-bound" class="headerlink" title="lower_bound"></a>lower_bound</h3><p><code>iterator lower_bound( const Key&amp; key );</code>, <code>const_iterator lower_bound( const Key&amp; key ) const;</code><br><code>template&lt; class K &gt; iterator lower_bound(const K&amp; x);</code><br><code>template&lt; class K &gt; const_iterator lower_bound(const K&amp; x) const;</code></p><p>返回指向首个不小于(大于、等于)给定键的元素的迭代器.</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"aaa"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">auto</span> a <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">lower_bound</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a<span class="token operator">-></span>second <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// bbb</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="upper-bound"><a href="#upper-bound" class="headerlink" title="upper_bound"></a>upper_bound</h3><p><code>iterator upper_bound( const Key&amp; key );</code>, <code>const_iterator upper_bound( const Key&amp; key ) const;</code><br><code>template&lt; class K &gt; iterator upper_bound( const K&amp; x );</code><br><code>template&lt; class K &gt; const_iterator upper_bound( const K&amp; x ) const;</code></p><p>返回指向首个大于给定键的元素的迭代器.</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"aaa"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">auto</span> a <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">upper_bound</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a<span class="token operator">-></span>second <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// ccc</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="观察器"><a href="#观察器" class="headerlink" title="观察器"></a>观察器</h2><h3 id="key-comp"><a href="#key-comp" class="headerlink" title="key_comp"></a>key_comp</h3><p><code>key_compare key_comp() const;</code></p><p>返回用于比较<code>key</code>的函数对象，它是此容器构造函数参数 <code>comp</code> 的副本，它与 <code>value_comp</code> 相同。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"aaa"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span><span class="token double-colon punctuation">::</span>key_compare func <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">key_comp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>boolalpha <span class="token operator">&lt;&lt;</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="value-comp"><a href="#value-comp" class="headerlink" title="value_comp"></a>value_comp</h3><p><code>std::map::value_compare value_comp() const</code></p><p>返回用于在<code>value_type</code>类型的对象中比较键的函数。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"aaa"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span><span class="token double-colon punctuation">::</span>value_compare func <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">value_comp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>boolalpha <span class="token operator">&lt;&lt;</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"aaa"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// ture</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="成员类"><a href="#成员类" class="headerlink" title="成员类"></a>成员类</h2><h3 id="value-compare"><a href="#value-compare" class="headerlink" title="value_compare"></a>value_compare</h3><h2 id="非成员函数"><a href="#非成员函数" class="headerlink" title="非成员函数"></a>非成员函数</h2><h3 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h3><ol><li><code>operator==</code>  2.<code>operator!=</code>  3.<code>operator&lt;</code>  4.<code>operator&lt;=</code>  5.<code>operator&gt;</code>  6.<code>operator&gt;=</code>  7.<code>operator&lt;=&gt;</code></li></ol><h3 id="swap-1"><a href="#swap-1" class="headerlink" title="swap"></a>swap</h3><p><code>std::swap(std::map)</code>  特化 <code>std::swap</code> 算法</p><h3 id="擦除"><a href="#擦除" class="headerlink" title="擦除"></a>擦除</h3><p><code>erase(std::map)， erase_if(std::map)</code>  擦除所有满足特定判别标准的元素</p>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STL </tag>
            
            <tag> 关联容器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++ set API</title>
      <link href="/C-set-API.html"/>
      <url>/C-set-API.html</url>
      
        <content type="html"><![CDATA[<h2 id="C-set"><a href="#C-set" class="headerlink" title="C++ set"></a>C++ set</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">Key</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">Compare</span> <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>less<span class="token operator">&lt;</span>Key<span class="token operator">></span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">Allocator</span> <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>allocator<span class="token operator">&lt;</span>Key<span class="token operator">>></span><span class="token keyword">class</span> <span class="token class-name">set</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> pmr <span class="token punctuation">&#123;</span>    <span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">Key</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">Compare</span> <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>less<span class="token operator">&lt;</span>Key<span class="token operator">>></span>    <span class="token keyword">using</span> set <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>set<span class="token operator">&lt;</span>Key<span class="token punctuation">,</span> Compare<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>pmr<span class="token double-colon punctuation">::</span>polymorphic_allocator<span class="token operator">&lt;</span>Key<span class="token operator">>></span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>std::set</code> 是关联容器，含有 <code>Key</code> 类型对象的已排序集。用比较函数 比较 (Compare) 进行排序。搜索、移除和插入拥有对数复杂度。 <code>set</code> 通常以红黑树实现。</p><p>在每个标准库使用比较 (Compare) 概念的场所，用等价关系确定唯一性。不精确地说，若二个对象 <code>a</code> 与 <code>b</code> 相互间既不比较大于亦不比较小于： <code>!comp(a, b) &amp;&amp; !comp(b, a)</code> ，则认为它们等价。</p><h2 id="成员类型"><a href="#成员类型" class="headerlink" title="成员类型"></a>成员类型</h2><table><thead><tr><th>成员类型</th><th>定义</th></tr></thead><tbody><tr><td><code>key_type</code></td><td><code>Key</code></td></tr><tr><td><code>value_type</code></td><td><code>Key</code></td></tr><tr><td><code>size_type</code></td><td>无符号整数类型（通常是 <code>std::size_t</code> ）</td></tr><tr><td><code>difference_type</code></td><td>有符号整数类型（通常是 <code>std::ptrdiff_t</code> ）</td></tr><tr><td><code>key_compare</code></td><td><code>Compare</code></td></tr><tr><td><code>value_compare</code></td><td><code>Compare</code></td></tr><tr><td><code>allocator_type</code></td><td><code>Allocator</code></td></tr><tr><td><code>reference</code></td><td><code>value_type&amp;</code></td></tr><tr><td><code>const_reference</code></td><td><code>const value_type&amp;</code></td></tr><tr><td><code>pointer</code></td><td><code>std::allocator_traits&lt;Allocator&gt;::pointer</code></td></tr><tr><td><code>const_pointer</code></td><td><code>std::allocator_traits&lt;Allocator&gt;::const_pointer</code></td></tr><tr><td><code>iterator</code></td><td>遗留双向迭代器 (LegacyRandomAccessIterator)</td></tr><tr><td><code>const_iterator</code></td><td>常双向迭代器</td></tr><tr><td><code>reverse_iterator</code></td><td><code>std::reverse_iterator&lt;iterator&gt;</code></td></tr><tr><td><code>const_reverse_iterator</code></td><td><code>std::reverse_iterator&lt;const_iterator&gt;</code></td></tr><tr><td><code>node_type</code></td><td>表示容器结点的结点句柄特化</td></tr></tbody></table><p><code>insert_return_type</code>:描述插入 <code>node_type</code> 结果的类型，下列类型的特化，以模板实参 <code>iterator</code> 和 <code>node_type</code> 实例化。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">Iter</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">NodeType</span><span class="token operator">></span> <span class="token keyword">struct</span> <span class="token comment">/*unspecified*/</span> <span class="token punctuation">&#123;</span>    Iter     position<span class="token punctuation">;</span>    <span class="token keyword">bool</span>     inserted<span class="token punctuation">;</span>    NodeType node<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="构造"><a href="#构造" class="headerlink" title="构造"></a>构造</h2><h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><ol><li><p>创建一个空set. </p><p><code>set();</code>,  <code>explicit set( const Allocator&amp; alloc );</code><br><code>explicit set( const Compare&amp; comp, const Allocator&amp; alloc = Allocator() );</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>set<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> <span class="token function">v</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>初始化列表</p><p><code>set( std::initializer_list&lt;value_type&gt; init, const Compare&amp; comp = Compare(), const Allocator&amp; alloc = Allocator() );</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>set<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token string">"aaa"</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>string a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// aaa bbb ccc</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>以一对迭代器创建</p><p><code>template&lt; class InputIt &gt; set( InputIt first, InputIt last, const Compare&amp; comp = Compare(), const Allocator&amp; alloc = Allocator() );</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v1<span class="token punctuation">&#123;</span><span class="token string">"aaa"</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>set<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> <span class="token function">v</span><span class="token punctuation">(</span>v1<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v1<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>string a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// aaa bbb ccc</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>以其他的vector容器创建</p><p><code>set( const set&amp; other );</code> ,<code>set( const set&amp; other, const Allocator&amp; alloc );</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>set<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v1<span class="token punctuation">&#123;</span><span class="token string">"aaa"</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>set<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> <span class="token function">v</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>string a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// aaa bbb ccc</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>还可以使用移动语义</p><p><code>set( set&amp;&amp; other );</code>, <code>set( set&amp;&amp; other, const Allocator&amp; alloc );</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>set<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v1<span class="token punctuation">&#123;</span><span class="token string">"aaa"</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>set<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> <span class="token function">v</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>string a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// aaa bbb ccc</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="operator"><a href="#operator" class="headerlink" title="operator="></a>operator=</h3><p><code>set&amp; operator=( const set&amp; other );</code><br><code>set&amp; operator=( set&amp;&amp; other ) noexcept</code><br><code>set&amp; operator=( std::initializer_list&lt;value_type&gt; ilist );</code></p>   <pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>set<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token string">"aaa"</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>set<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v1 <span class="token operator">=</span> v<span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>set<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v2 <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>set<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v3 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"aaa"</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>string a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// aaa bbb ccc</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="get-allocator"><a href="#get-allocator" class="headerlink" title="get_allocator"></a>get_allocator</h3><p>返回与容器关联的分配器。<code>allocator_type get_allocator() const noexcept;</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>set<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v<span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>set<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span><span class="token double-colon punctuation">::</span>allocator_type alloc_type <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">get_allocator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h2><h3 id="begin-end"><a href="#begin-end" class="headerlink" title="begin - end"></a>begin - end</h3><p><code>iterator begin() noexcept;</code>  <code>const_iterator begin() const noexcept;</code><br><code>iterator end() noexcept;</code>  <code>const_iterator end() const noexcept;</code></p><p>返回指向容器开头和结尾的迭代器。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>set<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token string">"aaa"</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>set<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator i <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">!=</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>i <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span><span class="token comment">// aaa bbb ccc</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="cbegin-cend"><a href="#cbegin-cend" class="headerlink" title="cbegin - cend"></a>cbegin - cend</h3><p><code>const_iterator cbegin() const noexcept;</code>  <code>const_iterator cend() const noexcept;</code></p><p>返回指向容器开头和结尾的常量迭代器。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>set<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token string">"aaa"</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>set<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span><span class="token double-colon punctuation">::</span>const_iterator i <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">!=</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>i <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span><span class="token comment">// aaa bbb ccc</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="rbegin-rend"><a href="#rbegin-rend" class="headerlink" title="rbegin - rend"></a>rbegin - rend</h3><p><code>reverse_iterator rbegin() noexcept;</code>  <code>const_reverse_iterator rbegin() const noexcept;</code><br><code>const_reverse_iterator rend() const noexcept;</code></p><p>返回指向容器开头和结尾的反向迭代器。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>set<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token string">"aaa"</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>set<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span><span class="token double-colon punctuation">::</span>reverse_iterator i <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">rbegin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">!=</span> v<span class="token punctuation">.</span><span class="token function">rend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>i <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span><span class="token comment">// ccc bbb aaa</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="crbegin-crend"><a href="#crbegin-crend" class="headerlink" title="crbegin - crend"></a>crbegin - crend</h3><p><code>const_reverse_iterator crbegin() const noexcept;</code><br><code>const_reverse_iterator crend() const noexcept;</code></p><p>返回指向容器开头和结尾的反向常量迭代器。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>set<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token string">"aaa"</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>set<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span><span class="token double-colon punctuation">::</span>reverse_iterator i <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">rbegin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">!=</span> v<span class="token punctuation">.</span><span class="token function">rend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>i <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span><span class="token comment">// ccc bbb aaa</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="容量"><a href="#容量" class="headerlink" title="容量"></a>容量</h2><h3 id="empty"><a href="#empty" class="headerlink" title="empty"></a>empty</h3><p><code>[[nodiscard]] bool empty() const noexcept;</code></p><p>判断容器是否为空，空则为true</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>set<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token string">"aaa"</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>boolalpha <span class="token operator">&lt;&lt;</span> v<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="size"><a href="#size" class="headerlink" title="size"></a>size</h3><p><code>size_type size() const noexcept;</code></p><p>返回容器中的元素数, 即 std::distance(begin(), end()) 。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>set<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token string">"aaa"</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> v<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// 3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="max-size"><a href="#max-size" class="headerlink" title="max_size"></a>max_size</h3><p><code>size_type max_size() const noexcept;</code></p><p>返回根据系统或库实现限制的容器可保有的元素最大数量</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>set<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token string">"aaa"</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> v<span class="token punctuation">.</span><span class="token function">max_size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// 144115188075855871</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="修改器"><a href="#修改器" class="headerlink" title="修改器"></a>修改器</h2><h3 id="clear"><a href="#clear" class="headerlink" title="clear"></a>clear</h3><p><code>void clear() noexcept;</code></p><p>擦除所有元素。此调用后 <code>size()</code> 返回零。非法化任何指代所含元素的引用、指针或迭代器。任何尾后迭代器亦被非法化</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>set<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token string">"aaa"</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> v<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// 0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="insert"><a href="#insert" class="headerlink" title="insert"></a>insert</h3><p>插入元素到容器中的指定位置。</p><ol><li>插入 <code>value</code>返回由指向被插入元素（或阻止插入的元素）的迭代器和若插入发生则设为 true 的 bool 值。 支持移动语义。</li></ol><p><code>std::pair&lt;iterator,bool&gt; insert( const value_type&amp; value );</code><br><code>std::pair&lt;iterator,bool&gt; insert( value_type&amp;&amp; value );</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>set<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token string">"aaa"</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>pair<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>set<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token operator">></span> p<span class="token punctuation">;</span>p <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">"ddd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>p<span class="token punctuation">.</span>first <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>boolalpha <span class="token operator">&lt;&lt;</span> p<span class="token punctuation">.</span>second <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// ddd true</span>p <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">"aaa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// p = v.insert(std::move(std::string("aaa")));</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>p<span class="token punctuation">.</span>first <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>boolalpha <span class="token operator">&lt;&lt;</span> p<span class="token punctuation">.</span>second <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// aaa false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>插入 <code>value</code> 到尽可能接近，正好前于 <code>hint</code> 的位置。返回指向被插入元素，或阻止插入的元素的迭代器。</li></ol><p><code>iterator insert( const_iterator hint, const value_type&amp; value );</code><br><code>iterator insert( const_iterator hint, value_type&amp;&amp; value );</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>set<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token string">"aaa"</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>set<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator it <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token string">"aab"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// std::set&lt;std::string>::iterator it = v.insert(v.begin(), std::move(std::string("aba")));</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>it <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// aab</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>string a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// aaa aab bbb ccc</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>插入来自范围 <code>[first, last)</code> 的元素。 若范围中的多个元素拥有比较等价的关键，则插入哪个元素是未指定的</li></ol><p><code>template&lt; class InputIt &gt; void insert( InputIt first, InputIt last );</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v1<span class="token punctuation">&#123;</span><span class="token string">"aaa"</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>set<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v<span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>v1<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v1<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>string a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// aaa bbb ccc</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>插入来自 initializer_list <code>ilist</code> 的元素。 若范围中的多个元素拥有比较等价的关键，则插入哪个元素是未指定的</li></ol><p><code>void insert( std::initializer_list&lt;value_type&gt; ilist );</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>set<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v<span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"aaa"</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>string a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// aaa bbb ccc</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="5"><li> 若 nh 是空的结点把柄，则不做任何事。否则插入 nh 所占有的元素到容器，若容器尚未含有拥有等价于 nh.key() 的关键的元素。</li></ol><p><code>insert_return_type insert(node_type&amp;&amp; nh);</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>set<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token string">"aaa"</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>set<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span><span class="token double-colon punctuation">::</span>node_type nt<span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>set<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span><span class="token double-colon punctuation">::</span>insert_return_type it <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span>nt<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="6"><li>若 nh 是空的结点把柄，则不做任何事并返回尾迭代器。否则，插入 nh 所占有的元素到容器，若容器尚未含有拥有等价于 nh.key() 的关键的元素，并返回指向拥有等于 nh.key() 的关键的元素的迭代器（无关乎插入成功还是失败）。若插入成功，则从 nh 移动，否则它保持该元素的所有权。元素被插入到尽可能接近正好先于 hint 的位置。</li></ol><p><code>iterator insert(const_iterator hint, node_type&amp;&amp; nh);</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>set<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token string">"aaa"</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>set<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span><span class="token double-colon punctuation">::</span>node_type nt<span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>set<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator it <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span>nt<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout<span class="token operator">&lt;&lt;</span><span class="token operator">*</span>it<span class="token operator">&lt;&lt;</span>std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="emplace"><a href="#emplace" class="headerlink" title="emplace"></a>emplace</h3><p><code>template&lt; class... Args &gt; std::pair&lt;iterator,bool&gt; emplace( Args&amp;&amp;... args );</code></p><p>若容器中无拥有该关键的元素，则插入以给定的 <code>args</code> 原位构造的新元素到容器。返回由指向被插入元素，或若不发生插入则为既存元素的迭代器，和指代插入是否发生的 bool （若发生插入则为 true ，否则为 false ）。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>set<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token string">"aaa"</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>pair<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>set<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token operator">></span> p<span class="token punctuation">;</span><span class="token keyword">auto</span> <span class="token punctuation">[</span>it<span class="token punctuation">,</span> is<span class="token punctuation">]</span> <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">"ddd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>it <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>boolalpha <span class="token operator">&lt;&lt;</span> is <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// ddd true</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>string a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// // aaa bbb ccc ddd</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="emplace-hint"><a href="#emplace-hint" class="headerlink" title="emplace_hint"></a>emplace_hint</h3><p><code>template&lt; class... Args &gt; iterator emplace_hint( const_iterator hint, Args&amp;&amp;... args )</code></p><p>插入新元素到容器中尽可能接近于恰在 <code>hint</code> 前的位置。原位构造元素，即不进行复制或移动操作。返回指向新插入元素的迭代器。若因元素已存在而插入失败，则返回指向拥有等价关键的既存元素的迭代器。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>set<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token string">"aaa"</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>pair<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>set<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token operator">></span> p<span class="token punctuation">;</span><span class="token keyword">auto</span> it <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"ddd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>it <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// ddd</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>string a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// // aaa bbb ccc ddd</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="erase"><a href="#erase" class="headerlink" title="erase"></a>erase</h3><p>从容器擦除指定的元素。</p><p>1.移除位于pos的元素。返回指向下一个元素的迭代器。如一处的是最后一个，返回的是指向尾部的迭代器。</p><p><code>iterator erase( iterator pos );</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>set<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token string">"aaa"</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">auto</span> it <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>it <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// bbb</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>string a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// bbb ccc</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>2.移除一定范围内的元素。返回指向下一个元素的迭代器。如一处的是最后一个，返回的是指向尾部的迭代器.</p><p><code>iterator erase( const_iterator first, const_iterator last );</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>set<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token string">"aaa"</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">auto</span> it <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>string a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>3.移除关键等于 <code>key</code> 的元素（若存在）。</p><p><code>size_type erase( const key_type&amp; key );</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>set<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token string">"aaa"</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>set<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span><span class="token double-colon punctuation">::</span>key_type k<span class="token punctuation">&#123;</span><span class="token string">"aaa"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">auto</span> s <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> s <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// 1</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>string a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// bbb ccc</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="swap"><a href="#swap" class="headerlink" title="swap"></a>swap</h3><p><code>void swap( set&amp; other ) noexcept(std::allocator_traits&lt;Allocator&gt;::is_always_equal::value &amp;&amp; std::is_nothrow_swappable&lt;Compare&gt;::value)</code></p><p>将内容与其他容器交换。不在单独的元素上调用任何移动、复制或交换操作。所有迭代器和引用保持合法。尾后迭代器被非法化。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>set<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v1<span class="token punctuation">&#123;</span><span class="token string">"ddd"</span><span class="token punctuation">,</span> <span class="token string">"eee"</span><span class="token punctuation">,</span> <span class="token string">"fff"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>set<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token string">"aaa"</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">swap</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>string a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ddd eee fff</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="extract"><a href="#extract" class="headerlink" title="extract"></a>extract</h3><ol><li><p>解链含 position 所指向元素的结点并返回占有它的结点柄。</p><p><code>node_type extract( const key_type&amp; x );</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>set<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token string">"aaa"</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>set<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span><span class="token double-colon punctuation">::</span>key_type k<span class="token punctuation">&#123;</span><span class="token string">"aaa"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>set<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span><span class="token double-colon punctuation">::</span>node_type nt <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">extract</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>string a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// bbb ccc</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>若容器拥有元素而其键等于 <code>x</code> ，则从容器解链该元素并返回占有它的结点句柄。否则，返回空结点句柄。</p><p><code>node_type extract( const_iterator position );</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>set<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token string">"aaa"</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>set<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span><span class="token double-colon punctuation">::</span>node_type nt <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">extract</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>string a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="merge"><a href="#merge" class="headerlink" title="merge"></a>merge</h3><p><code>template&lt;class C2&gt; void merge( std::set&lt;Key, C2, Allocator&gt;&amp; source );</code><br><code>template&lt;class C2&gt; void merge( std::set&lt;Key, C2, Allocator&gt;&amp;&amp; source );</code><br><code>template&lt;class C2&gt; void merge( std::multiset&lt;Key, C2, Allocator&gt;&amp; source );</code><br><code>template&lt;class C2&gt; void merge( std::multiset&lt;Key, C2, Allocator&gt;&amp;&amp; source );</code></p><p>试图提取其他set中的每个元素，并插入到当前容器 。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>set<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v1<span class="token punctuation">&#123;</span><span class="token string">"ddd"</span><span class="token punctuation">,</span> <span class="token string">"eee"</span><span class="token punctuation">,</span> <span class="token string">"fff"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>set<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token string">"aaa"</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">merge</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>string a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// aaa bbb ccc ddd eee fff</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h2><h3 id="count"><a href="#count" class="headerlink" title="count"></a>count</h3><p><code>size_type count( const Key&amp; key ) const;</code><br><code>template&lt; class K &gt; size_type count( const K&amp; x ) const</code>，用于查找自定义类型，需重载<code>&lt;</code>比较符。</p><p>返回拥有键比较等价于指定参数的元素数，因为此容器不允许重复故为 1 或 0。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>set<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token string">"aaa"</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> v<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token string">"aaa"</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// 1</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>string a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// aaa bbb ccc</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="find"><a href="#find" class="headerlink" title="find"></a>find</h3><p><code>iterator find( const Key&amp; key );</code>, <code>const_iterator find( const Key&amp; key ) const;</code><br><code>template&lt; class K &gt; iterator find( const K&amp; x );</code><br><code>template&lt; class K &gt; const_iterator find( const K&amp; x ) const;</code></p><p>寻找带有特定键的元素。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>set<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token string">"aaa"</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">auto</span> it <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">"aaa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>it <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// aaa</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="contains"><a href="#contains" class="headerlink" title="contains"></a>contains</h3><p><code>bool contains( const Key&amp; key ) const;</code><br><code>template&lt; class K &gt; bool contains( const K&amp; x ) const;</code></p><p>检查容器是否含有带特定键的元素。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>set<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token string">"aaa"</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">bool</span> it <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"aaa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>boolalpha <span class="token operator">&lt;&lt;</span> it <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="equal-range"><a href="#equal-range" class="headerlink" title="equal_range"></a>equal_range</h3><p><code>std::pair&lt;iterator,iterator&gt; equal_range( const Key&amp; key );</code><br><code>std::pair&lt;const_iterator,const_iterator&gt; equal_range( const Key&amp; key ) const;</code><br><code>template&lt; class K &gt; std::pair&lt;iterator,iterator&gt; equal_range( const K&amp; x );</code><br><code>template&lt; class K &gt; std::pair&lt;const_iterator,const_iterator&gt; equal_range( const K&amp; x ) const;</code></p><p>返回匹配特定键的元素范围.返回值第一个指向首个不小于 <code>key</code> 的元素，第二个指向首个大于<code>key</code> 的元素。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>set<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token string">"aaa"</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">auto</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">]</span> <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">equal_range</span><span class="token punctuation">(</span><span class="token string">"bbb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>b <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// bbb ccc</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="lower-bound"><a href="#lower-bound" class="headerlink" title="lower_bound"></a>lower_bound</h3><p><code>iterator lower_bound( const Key&amp; key );</code>, <code>const_iterator lower_bound( const Key&amp; key ) const;</code><br><code>template&lt; class K &gt; iterator lower_bound(const K&amp; x);</code><br><code>template&lt; class K &gt; const_iterator lower_bound(const K&amp; x) const;</code></p><p>返回指向首个不小于(大于、等于)给定键的元素的迭代器.</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>set<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token string">"aaa"</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">auto</span> a <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">lower_bound</span><span class="token punctuation">(</span><span class="token string">"bbb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>a <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// bbb</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="upper-bound"><a href="#upper-bound" class="headerlink" title="upper_bound"></a>upper_bound</h3><p><code>iterator upper_bound( const Key&amp; key );</code>, <code>const_iterator upper_bound( const Key&amp; key ) const;</code><br><code>template&lt; class K &gt; iterator upper_bound( const K&amp; x );</code><br><code>template&lt; class K &gt; const_iterator upper_bound( const K&amp; x ) const;</code></p><p>返回指向首个大于给定键的元素的迭代器.</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>set<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token string">"aaa"</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">auto</span> a <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">upper_bound</span><span class="token punctuation">(</span><span class="token string">"bbb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>a <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// ccc</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="观察器"><a href="#观察器" class="headerlink" title="观察器"></a>观察器</h2><h3 id="key-comp"><a href="#key-comp" class="headerlink" title="key_comp"></a>key_comp</h3><p><code>key_compare key_comp() const;</code></p><p>返回用于比较<code>key</code>的函数对象，它是此容器构造函数参数 <code>comp</code> 的副本，它与 <code>value_comp</code> 相同。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>set<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token string">"aaa"</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>set<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span><span class="token double-colon punctuation">::</span>key_compare func <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">key_comp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>boolalpha <span class="token operator">&lt;&lt;</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token string">"aaa"</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="value-comp"><a href="#value-comp" class="headerlink" title="value_comp"></a>value_comp</h3><p><code>std::set::value_compare value_comp() const;</code></p><p>返回用于在<code>value_type</code>类型的对象中比较键的函数。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>set<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token string">"aaa"</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> std<span class="token double-colon punctuation">::</span>set<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span><span class="token double-colon punctuation">::</span>value_compare func <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">value_comp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>boolalpha <span class="token operator">&lt;&lt;</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token string">"aaa"</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="非成员函数"><a href="#非成员函数" class="headerlink" title="非成员函数"></a>非成员函数</h2><h3 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h3><ol><li><code>operator==</code>  2.<code>operator!=</code>  3.<code>operator&lt;</code>  4.<code>operator&lt;=</code>  5.<code>operator&gt;</code>  6.<code>operator&gt;=</code>  7.<code>operator&lt;=&gt;</code></li></ol><h3 id="swap-1"><a href="#swap-1" class="headerlink" title="swap"></a>swap</h3><p><code>std::swap(std::set)</code>  特化 <code>std::swap</code> 算法</p><h3 id="擦除"><a href="#擦除" class="headerlink" title="擦除"></a>擦除</h3><p><code>erase(std::set)， erase_if(std::set)</code>  擦除所有满足特定判别标准的元素</p>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STL </tag>
            
            <tag> 关联容器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++ array API</title>
      <link href="/C-array-API.html"/>
      <url>/C-array-API.html</url>
      
        <content type="html"><![CDATA[<h2 id="C-std-array"><a href="#C-std-array" class="headerlink" title="C++ std::array"></a>C++ std::array</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">T</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>size_t N <span class="token operator">></span><span class="token keyword">struct</span> <span class="token class-name">array</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>std::array</code> 是封装固定大小数组的容器.</p><p>此容器是一个聚合类型，其语义等同于保有一个 C 风格数组 T[N] 作为其唯一非静态数据成员的结构体。不同于 C 风格数组，它不会自动退化成 T* 。它能作为聚合类型聚合初始化，只要有至多 <code>N</code> 个能转换成 <code>T</code> 的初始化器： std::array&lt;int, 3&gt; a = {1,2,3}; 。</p><p>该结构体结合了 C 风格数组的性能、可访问性与容器的优点，比如可获取大小、支持赋值、随机访问迭代器等。</p><p><code>std::array</code> 满足<em>容器</em> (Container) 和<em>可逆容器</em> (ReversibleContainer) 的要求，除了默认构造的 array 是非空的，以及进行交换的复杂度是线性，它满足连续容器 (ContiguousContainer) (cpp17 起)的要求并部分满足序列容器 (SequenceContainer) 的要求。</p><p>当其长度为零时 <code>array</code> （ <code>N == 0</code> ）有特殊情况。此时， array.begin() == array.end() ，并拥有某个唯一值。在零长 <code>array</code> 上调用 front() 或 back() 是未定义的。</p><p>亦可将 <code>array</code> 当做拥有 <code>N</code> 个同类型元素的元组。</p><h2 id="成员类型"><a href="#成员类型" class="headerlink" title="成员类型"></a>成员类型</h2><table><thead><tr><th>成员类型</th><th>定义</th></tr></thead><tbody><tr><td><code>value_type</code></td><td><code>T</code></td></tr><tr><td><code>size_type</code></td><td>无符号整数类型（通常是 <code>std::size_t</code> ）</td></tr><tr><td><code>difference_type</code></td><td>有符号整数类型（通常是 <code>std::ptrdiff_</code>t ）</td></tr><tr><td><code>reference</code></td><td><code>value_type&amp;</code></td></tr><tr><td><code>const_reference</code></td><td><code>const value_type&amp;</code></td></tr><tr><td><code>pointer</code></td><td><code>std::allocator_traits&lt;Allocator&gt;::pointer</code></td></tr><tr><td><code>const_pointer</code></td><td><code>std::allocator_traits&lt;Allocator&gt;::const_pointer</code></td></tr><tr><td><code>iterator</code></td><td>遗留随机访问迭代器 (LegacyRandomAccessIterator)</td></tr><tr><td><code>const_iterator</code></td><td>常随机访问迭代器</td></tr><tr><td><code>reverse_iterator</code></td><td><code>std::reverse_iterator&lt;iterator&gt;</code></td></tr><tr><td><code>const_reverse_iterator</code></td><td><code>std::reverse_iterator&lt;const_iterator&gt;</code></td></tr></tbody></table><h2 id="构造"><a href="#构造" class="headerlink" title="构造"></a>构造</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>array<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token operator">></span> arr<span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> arr<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// -136450104 32767 1431655360 21845 0 0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>array<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token operator">></span> arr<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> arr<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1 2 3 4 5 6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>array<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token operator">></span> arr <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> arr<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1 2 3 4 5 6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="operator"><a href="#operator" class="headerlink" title="operator="></a>operator=</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>array<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token operator">></span> arr2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>array<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token operator">></span> arr <span class="token operator">=</span> arr2<span class="token punctuation">;</span> <span class="token comment">// 大小不同时，不能重写。</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> arr<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1 2 3 4 5 6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="元素访问"><a href="#元素访问" class="headerlink" title="元素访问"></a>元素访问</h2><p>除了data其余元素访问函数返回的都是元素的reference或const reference。</p><h3 id="at"><a href="#at" class="headerlink" title="at"></a>at</h3><p><code>constexpr reference at( size_type pos );</code>  <code>constexpr const_reference at( size_type pos ) const;</code></p><p>返回位于指定位置 <code>pos</code> 的元素的引用，有边界检查。若 <code>pos</code> 不在容器范围内，则抛出 <code>std::out_of_range</code> 类型的异常。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>array<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token operator">></span> arr <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> arr<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// read</span>arr<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">88</span><span class="token punctuation">;</span><span class="token comment">// set</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="operator-1"><a href="#operator-1" class="headerlink" title="operator[]"></a>operator[]</h3><p><code>constexpr reference operator[]( size_type pos );</code><br><code>constexpr const_reference operator[]( size_type pos ) const;</code></p><p>返回位于指定位置 <code>pos</code> 的元素的引用。不进行边界检查。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>array<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token operator">></span> arr <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// 1</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">88</span><span class="token punctuation">;</span> <span class="token comment">// set</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> arr<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 88 2 3 4 5 6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="front"><a href="#front" class="headerlink" title="front"></a>front</h3><p><code>constexpr reference front();</code>  <code>constexpr const_reference front() const;</code></p><p>返回第一个元素的引用.在空容器上对 <code>front</code> 的调用是未定义的</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>array<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token operator">></span> arr <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> arr<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// 1</span>arr<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">88</span><span class="token punctuation">;</span> <span class="token comment">// set</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> arr<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 88 2 3 4 5 6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="back"><a href="#back" class="headerlink" title="back"></a>back</h3><p><code>constexpr reference back();</code>  <code>constexpr const_reference back() const;</code></p><p>返回最后一个元素的引用.在空容器上调用 <code>back</code> 导致未定义行为。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>array<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token operator">></span> arr <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> arr<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// 6</span>arr<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">88</span><span class="token punctuation">;</span> <span class="token comment">// set</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> arr<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1 2 3 4 5 88</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="data"><a href="#data" class="headerlink" title="data"></a>data</h3><p><code>constexpr T* data() noexcept;</code>  <code>constexpr const T* data() const noexcept;</code></p><p>返回指向作为元素存储工作的底层数组的指针。指针满足范围 <code>[data(); data() + size())</code> 始终是合法范围，即使容器为空（该情况下 <code>data()</code> 不可解引用）。对于非空容器，返回的指针与首元素地址比较相等。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>array<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token operator">></span> arr <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>arr<span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// 1</span><span class="token operator">*</span>arr<span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">88</span><span class="token punctuation">;</span> <span class="token comment">// set</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> arr<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 88 2 3 4 5 6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h2><h3 id="begin-end"><a href="#begin-end" class="headerlink" title="begin - end"></a>begin - end</h3><p><code>constexpr iterator begin() noexcept;</code> <code>constexpr const_iterator begin() const noexcept;</code><br><code>constexpr iterator end() noexcept;</code>  <code>constexpr const_iterator end() const noexcept;</code></p><p>返回指向容器开头和结尾的迭代器。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>array<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>array<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator i <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">!=</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>i <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span><span class="token comment">// 1 3 4 5 6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="cbegin-cend"><a href="#cbegin-cend" class="headerlink" title="cbegin - cend"></a>cbegin - cend</h3><p><code>constexpr const_iterator cbegin() const noexcept;</code> <code>constexpr const_iterator cend() const noexcept;</code></p><p>返回指向容器开头和结尾的常量迭代器。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>array<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>array<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token operator">></span><span class="token double-colon punctuation">::</span>const_iterator i <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">!=</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>i <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span><span class="token comment">// 1 3 4 5 6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="rbegin-rend"><a href="#rbegin-rend" class="headerlink" title="rbegin - rend"></a>rbegin - rend</h3><p><code>constexpr reverse_iterator rbegin() noexcept;</code>  <code>constexpr const_reverse_iterator  rbegin() const noexcept;</code><br><code>constexpr reverse_iterator rend() noexcept;</code>  <code>constexpr const_reverse_iterator rend() const noexcept;</code></p><p>返回指向容器开头和结尾的反向迭代器。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>array<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>array<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token operator">></span><span class="token double-colon punctuation">::</span>reverse_iterator i <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">rbegin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">!=</span> v<span class="token punctuation">.</span><span class="token function">rend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>i <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span><span class="token comment">// 6 5 4 3 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="crbegin-crend"><a href="#crbegin-crend" class="headerlink" title="crbegin - crend"></a>crbegin - crend</h3><p><code>constexpr const_reverse_iterator crbegin() const noexcept;</code><br><code>constexpr const_reverse_iterator crend() const noexcept;</code></p><p>返回指向容器开头和结尾的反向常量迭代器。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>array<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>array<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token operator">></span><span class="token double-colon punctuation">::</span>const_reverse_iterator i <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">rbegin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">!=</span> v<span class="token punctuation">.</span><span class="token function">rend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>i <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span><span class="token comment">// 6 5 4 3 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="容量"><a href="#容量" class="headerlink" title="容量"></a>容量</h2><h3 id="empty"><a href="#empty" class="headerlink" title="empty"></a>empty</h3><p>判断容器是否为空，空则为true. <code>[[nodiscard]] constexpr bool empty() const noexcept;</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>array<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token operator">></span> arr <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>boolalpha <span class="token operator">&lt;&lt;</span> arr<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="size"><a href="#size" class="headerlink" title="size"></a>size</h3><p>返回容器中的元素数. <code>constexpr size_type size() const noexcept;</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>array<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token operator">></span> arr <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> arr<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// 6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="max-size"><a href="#max-size" class="headerlink" title="max_size"></a>max_size</h3><p>返回容器可保有的元素最大数量. <code>constexpr size_type max_size() const noexcept;</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>array<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token operator">></span> arr <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> arr<span class="token punctuation">.</span><span class="token function">max_size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// 6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><h3 id="fill"><a href="#fill" class="headerlink" title="fill"></a>fill</h3><p>以指定值填充容器，无返回值。<code>constexpr void fill( const T&amp; value );</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>array<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token operator">></span> arr <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> arr<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 9 9 9 9 9 9</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="swap"><a href="#swap" class="headerlink" title="swap"></a>swap</h3><p><code>constexpr void swap( array&amp; other ) noexcept</code></p><p>将内容与其他容器交换。将容器内容与 <code>other</code> 的内容交换。不导致迭代器和引用关联到别的容器无返回值。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>array<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token operator">></span> arr <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>array<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token operator">></span> arr2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">swap</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> arr<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 9 9 9 9 9 9</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="非成员函数"><a href="#非成员函数" class="headerlink" title="非成员函数"></a>非成员函数</h2><h4 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h4><ol><li>operator==  2.operator!=  3.operator&lt;  4.operator&lt;=  5.operator&gt;  6.operator&gt;=  7.operator&lt;=&gt;</li></ol><h4 id="get"><a href="#get" class="headerlink" title="get"></a>get</h4><p><code>std::get(std::array)</code>: 访问array的元素引用</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>array<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token operator">></span> arr <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">get</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// read</span>std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">get</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">99</span><span class="token punctuation">;</span> <span class="token comment">// set</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> arr<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 99 2 3 4 5 6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="swap-1"><a href="#swap-1" class="headerlink" title="swap"></a>swap</h4><p><code>std::swap(std::array)</code>:特化 std::swap 算法</p><h4 id="to-array"><a href="#to-array" class="headerlink" title="to_array"></a>to_array</h4><p><code>to_array(cpp20)</code>:从内建数组创建 <code>std::array</code> 对象</p><h4 id="tuple-size"><a href="#tuple-size" class="headerlink" title="tuple_size"></a>tuple_size</h4><p><code>std::tuple_size</code>:获得 <code>array</code> 的大小,提供作为编译时常量表达式访问 <code>std::array</code> 中元素数量的方法</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>array<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token operator">></span> arr <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>tuple_size<span class="token operator">&lt;</span><span class="token keyword">decltype</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token operator">></span><span class="token double-colon punctuation">::</span>value<span class="token punctuation">;</span> <span class="token comment">// 6</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">tuple_size</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">decltype</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="tuple-element"><a href="#tuple-element" class="headerlink" title="tuple_element"></a>tuple_element</h4><p>获得 <code>array</code> 元素的类型</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>array<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token operator">></span> arr <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">using</span> T <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>tuple_element<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">decltype</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token operator">></span><span class="token double-colon punctuation">::</span>type<span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token keyword">typeid</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p>本文大部分内容来自<a href="https://zh.cppreference.com/w/cpp/container/array">cppreference</a></p>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STL </tag>
            
            <tag> 顺序容器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++ deque API</title>
      <link href="/C-deque-API.html"/>
      <url>/C-deque-API.html</url>
      
        <content type="html"><![CDATA[<h2 id="C-std-deque"><a href="#C-std-deque" class="headerlink" title="C++ std::deque"></a>C++ std::deque</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">Allocator</span> <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>allocator<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token operator">></span><span class="token keyword">class</span> <span class="token class-name">deque</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> pmr <span class="token punctuation">&#123;</span>    <span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">></span>    <span class="token keyword">using</span> deque <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>deque<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>pmr<span class="token double-colon punctuation">::</span>polymorphic_allocator<span class="token operator">&lt;</span>T<span class="token operator">>></span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>std::deque</code> （ double-ended queue ，双端队列）是有下标顺序容器，它允许在其首尾两段快速插入及删除。另外，在 deque 任一端插入或删除不会非法化指向其余元素的指针或引用。</p><p>与 <code>std::vector</code> 相反， <code>deque</code> 的元素不是相接存储的：典型实现用单独分配的固定大小数组的序列，外加额外的登记，这表示下标访问必须进行二次指针解引用，与之相比 <code>vector</code> 的下标访问只进行一次。</p><p><code>deque</code> 的存储按需自动扩展及收缩。扩张 <code>deque</code> 比扩张 <code>std::vector</code> 更优，因为它不涉及到复制既存元素到新内存位置。另一方面， <code>deque</code> 典型地拥有较大的最小内存开销；只保有一个元素的 <code>deque</code> 必须分配其整个内部数组（例如 64 位 libstdcpp 上为对象大小 8 倍； 64 位 libcpp 上为对象大小 16 倍或 4096 字节的较大者）。</p><p><code>deque</code> 上常见操作的复杂度（效率）如下：</p><ul><li>随机访问——常数 O(1)</li><li>在结尾或起始插入或移除元素——常数 O(1)</li><li>插入或移除元素——线性 O(n)</li></ul><h2 id="成员类型"><a href="#成员类型" class="headerlink" title="成员类型"></a>成员类型</h2><table><thead><tr><th>成员类型</th><th>定义</th></tr></thead><tbody><tr><td><code>value_type</code></td><td><code>T</code></td></tr><tr><td><code>allocator_type</code></td><td><code>Allocator</code></td></tr><tr><td><code>size_type</code></td><td>无符号整数类型（通常是 <code>std::size_t</code> ）</td></tr><tr><td><code>difference_type</code></td><td>有符号整数类型（通常是 <code>std::ptrdiff_</code>t ）</td></tr><tr><td><code>reference</code></td><td><code>value_type&amp;</code></td></tr><tr><td><code>const_reference</code></td><td><code>const value_type&amp;</code></td></tr><tr><td><code>pointer</code></td><td><code>std::allocator_traits&lt;Allocator&gt;::pointer</code></td></tr><tr><td><code>const_pointer</code></td><td><code>std::allocator_traits&lt;Allocator&gt;::const_pointer</code></td></tr><tr><td><code>iterator</code></td><td>遗留随机访问迭代器 (LegacyRandomAccessIterator)</td></tr><tr><td><code>const_iterator</code></td><td>常随机访问迭代器</td></tr><tr><td><code>reverse_iterator</code></td><td><code>std::reverse_iterator&lt;iterator&gt;</code></td></tr><tr><td><code>const_reverse_iterator</code></td><td><code>std::reverse_iterator&lt;const_iterator&gt;</code></td></tr></tbody></table><h2 id="构造"><a href="#构造" class="headerlink" title="构造"></a>构造</h2><h4 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h4><ol><li><p>创建一个空deque,</p><p><code>deque();</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>deque<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>创建count个值为value的容器</p><p><code>deque( size_type count, const T&amp; value,  const Allocator&amp; alloc = Allocator());</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>deque<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">v</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 1 1 1 1 1 1 1 1 1 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>创建大小的count的容器, 默认元素值为0。</p><p><code>explicit deque( size_type count, const Allocator&amp; alloc = Allocator() );</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>deque<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">v</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 0 0 0 0 0 0 0 0 0 0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>初始化列表</p><p><code>deque( std::initializer_list&lt;T&gt; init, const Allocator&amp; alloc = Allocator() );</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>deque<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 1 2 4 5 6 7</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>以一对迭代器创建</p><p><code>template&lt; class InputIt &gt; deque( InputIt first, InputIt last, const Allocator&amp; alloc = Allocator() )</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>deque<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v1<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>deque<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">v</span><span class="token punctuation">(</span>v1<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v1<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 1 2 4 5 6 7</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>以其他的deque容器创建</p><p><code>deque( const deque&amp; other );</code>  <code>deque( const deque&amp; other, const Allocator&amp; alloc );</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>deque<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v1<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>deque<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">v</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 1 2 4 5 6 7</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>还可以使用移动语义</p><p><code>deque( deque&amp;&amp; other );</code>  <code>deque( deque&amp;&amp; other, const Allocator&amp; alloc );</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>deque<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v1<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>deque<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">v</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 1 2 4 5 6 7</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>指定内存分配器</p><p><code>explicit deque( const Allocator&amp; alloc )</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>allocator<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> al<span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>deque<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">v</span><span class="token punctuation">(</span>al<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><h3 id="operator"><a href="#operator" class="headerlink" title="operator="></a>operator=</h3><p>替换容器内容。</p><p><code>deque&amp; operator=( const deque&amp; other );</code><br><code>deque&amp; operator=( deque&amp;&amp; other ) noexcept</code><br><code>deque&amp; operator=( std::initializer_list&lt;T&gt; ilist );</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>deque<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>deque<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v1 <span class="token operator">=</span> v<span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>deque<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v2 <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>deque<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v3 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>v1<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v1<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="assign"><a href="#assign" class="headerlink" title="assign"></a>assign</h3><p>替换容器的内容。</p><p><code>void assign( size_type count, const T&amp; value );</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>deque<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 1 1 1 1 1 1 1 1 1 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><code>template&lt; class InputIt &gt; void assign( InputIt first, InputIt last );</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>deque<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>deque<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v1<span class="token punctuation">;</span>v1<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 1 2 3 4 5 6 7 8 9</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>void assign( std::initializer_list&lt;T&gt; ilist );</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>deque<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 1 2 3 4 5 6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="get-allocator"><a href="#get-allocator" class="headerlink" title="get_allocator"></a>get_allocator</h3><p><code>allocator_type get_allocator() const noexcept;</code></p><p>返回与容器关联的分配器。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>deque<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>deque<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token double-colon punctuation">::</span>allocator_type alloc_type <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">get_allocator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="元素访问"><a href="#元素访问" class="headerlink" title="元素访问"></a>元素访问</h2><p>除了data其余元素访问函数返回的都是元素的reference或const reference。</p><h3 id="at"><a href="#at" class="headerlink" title="at"></a>at</h3><p>返回位于指定位置 <code>pos</code> 的元素的引用，有边界检查。若 <code>pos</code> 不在容器范围内，则抛出 <code>std::out_of_range</code> 类型的异常。</p><p><code>reference at( size_type pos );</code>   <code>const_reference at( size_type pos ) const;</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>deque<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">88</span><span class="token punctuation">;</span> <span class="token comment">// set</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> v<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 88</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="operator-1"><a href="#operator-1" class="headerlink" title="operator[]"></a>operator[]</h3><p>返回位于指定位置 <code>pos</code> 的元素的引用。不进行边界检查。</p><p><code>reference operator[]( size_type pos );</code>    <code>const_reference operator[]( size_type pos ) const;</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>deque<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>v<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">88</span><span class="token punctuation">;</span><span class="token comment">// set</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> v<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 88</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="front"><a href="#front" class="headerlink" title="front"></a>front</h3><p><code>reference front()</code>    <code>const_reference front() const;</code></p><p>返回到容器首元素的引用。在空容器上对 <code>front</code> 的调用是未定义的。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>deque<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> v<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="back"><a href="#back" class="headerlink" title="back"></a>back</h3><p><code>reference back();</code>    <code>const_reference back() const;</code></p><p>返回到容器中最后一个元素的引用。在空容器上调用 <code>back</code> 导致未定义行为。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>deque<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> v<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">//6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h2><h3 id="begin-end"><a href="#begin-end" class="headerlink" title="begin - end"></a>begin - end</h3><p><code>iterator begin() noexcept;</code>  <code>const_iterator begin() const noexcept;</code><br><code>iterator end() noexcept;</code>  <code>const_iterator end() const noexcept;</code></p><p>返回指向容器开头和结尾的迭代器。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>deque<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>deque<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator i <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">!=</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>i <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span><span class="token comment">// 1 3 4 5 6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="cbegin-cend"><a href="#cbegin-cend" class="headerlink" title="cbegin - cend"></a>cbegin - cend</h3><p><code>const_iterator cbegin() const noexcept;</code>  <code>const_iterator cend() const noexcept;</code></p><p>返回指向容器开头和结尾的常量迭代器。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>deque<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>deque<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token double-colon punctuation">::</span>const_iterator i <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">!=</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>i <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span><span class="token comment">// 1 3 4 5 6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="rbegin-rend"><a href="#rbegin-rend" class="headerlink" title="rbegin - rend"></a>rbegin - rend</h3><p><code>reverse_iterator rbegin() noexcept;</code>  <code>const_reverse_iterator rbegin() const noexcept</code><br><code>reverse_iterator rend() noexcept;</code>  <code>const_reverse_iterator rend() const noexcept;</code></p><p>返回指向容器开头和结尾的反向迭代器。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>deque<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>deque<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token double-colon punctuation">::</span>reverse_iterator i <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">rbegin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">!=</span> v<span class="token punctuation">.</span><span class="token function">rend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>i <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span><span class="token comment">// 6 5 4 3 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="crbegin-crend"><a href="#crbegin-crend" class="headerlink" title="crbegin - crend"></a>crbegin - crend</h3><p><code>const_reverse_iterator crbegin() const noexcept;</code>   <code>const_reverse_iterator crend() const noexcept;</code></p><p>返回指向容器开头和结尾的反向常量迭代器。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>deque<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>deque<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token double-colon punctuation">::</span>const_reverse_iterator i <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">rbegin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">!=</span> v<span class="token punctuation">.</span><span class="token function">rend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>i <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span><span class="token comment">// 6 5 4 3 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="容量"><a href="#容量" class="headerlink" title="容量"></a>容量</h2><h3 id="empty"><a href="#empty" class="headerlink" title="empty"></a>empty</h3><p><code>[[nodiscard]] bool empty() const noexcept;</code></p><p>判断容器是否为空，空则为true.即是否 <code>begin() == end()</code> 。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>deque<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>boolalpha <span class="token operator">&lt;&lt;</span> v<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="size"><a href="#size" class="headerlink" title="size"></a>size</h3><p><code>size_type size() const noexcept;</code></p><p>返回容器中的元素数，即 <code>std::distance(begin(), end())</code> 。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>deque<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> v<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// 5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="max-size"><a href="#max-size" class="headerlink" title="max_size"></a>max_size</h3><p><code>size_type max_size() const noexcept;</code></p><p>返回根据系统或库实现限制的容器可保有的元素最大数量</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>deque<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> v<span class="token punctuation">.</span><span class="token function">max_size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// 2305843009213693951</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="shrink-to-fit"><a href="#shrink-to-fit" class="headerlink" title="shrink_to_fit"></a>shrink_to_fit</h3><p><code>void shrink_to_fit();</code></p><p>请求移除未使用的容量。它是减少 <code>capacity()</code> 到 <code>size()</code>非强制性请求。请求是否达成依赖于实现。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>deque<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">shrink_to_fit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> v<span class="token punctuation">.</span><span class="token function">capacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// 6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="修改器"><a href="#修改器" class="headerlink" title="修改器"></a>修改器</h2><h3 id="clear"><a href="#clear" class="headerlink" title="clear"></a>clear</h3><p><code>void clear() noexcept;</code></p><p>擦除所有元素。此调用后 <code>size()</code> 返回零。非法化任何指代所含元素的引用、指针或迭代器。任何尾后迭代器亦被非法化。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>deque<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> v<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// 0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="insert"><a href="#insert" class="headerlink" title="insert"></a>insert</h3><p>1.在pos前插入value, 返回指向插入元素的迭代器。支持移动语义。</p><p><code>iterator insert( const_iterator pos, const T&amp; value );</code><br><code>iterator insert( const_iterator pos, T&amp;&amp; value );</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>deque<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>deque<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator it <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// std::deque&lt;int>::iterator it = v.insert(v.end(), std::move(99));</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>it <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// 99</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1 2 3 4 5 6 99</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.在 <code>pos</code> 前插入 <code>value</code> 的 <code>count</code> 个副本。返回指向插入的第一个元素的迭代器。</p><p><code>iterator insert( const_iterator pos, size_type count, const T&amp; value );</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>deque<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>deque<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator it <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>it <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// 1</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1 2 3 4 5 6 1 1 1 1 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>3.在 <code>pos</code> 前插入来自范围 <code>[first, last)</code> 的元素。返回指向插入的第一个元素的迭代器。</p><p><code>iterator insert( const_iterator pos, InputIt first, InputIt last );</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>deque<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>deque<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v1<span class="token punctuation">&#123;</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>deque<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator it <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v1<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v1<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>it <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// 9</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1 2 3 4 5 6 9 9 9 9 9</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4.在 <code>pos</code> 前插入来自 initializer_list 的元素。返回指向插入的第一个元素的迭代器。</p><p><code>iterator insert( const_iterator pos, std::initializer_list&lt;T&gt; ilist );</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>deque<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>deque<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator it <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>it <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// 9</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1 2 3 4 5 6 9 9 9 9</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="emplace"><a href="#emplace" class="headerlink" title="emplace"></a>emplace</h3><p><code>template&lt; class... Args &gt; iterator emplace( const_iterator pos, Args&amp;&amp;... args );</code></p><p>直接于 <code>pos</code> 前插入原位构造元素到容器中。返回值指向被构造的元素的迭代器。然而若要求的位置已被既存的元素占据，则首先在另一位置构造被插入的元素，然后再将他移动赋值到要求的位置中。</p><p>所有迭代器，含尾后迭代器，都被非法化。引用亦被非法化，除非 pos == begin() 或 pos == end() ，该情况下它们不被非法化。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>deque<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>deque<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator it <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>it <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// 99</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1 2 3 4 5 6 99</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="emplace-back"><a href="#emplace-back" class="headerlink" title="emplace_back"></a>emplace_back</h3><p><code>template&lt; class... Args &gt; reference emplace_back( Args&amp;&amp;... args );</code></p><p>原位构造元素到容器尾部。返回被插入元素的引用。所有迭代器，包含尾后迭代器，都被非法化。没有引用被非法化。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>deque<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>deque<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token double-colon punctuation">::</span>reference it <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span><span class="token number">88</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> it <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// 88</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="emplace-front"><a href="#emplace-front" class="headerlink" title="emplace_front"></a>emplace_front</h3><p><code>template&lt; class... Args &gt; reference emplace_front( Args&amp;&amp;... args );</code></p><p>在容器起始就地构造元素，返回指向出入元素的引用。所有迭代器，包含尾后迭代器，都被非法化。没有引用被非法化。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>deque<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> d <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>deque<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token double-colon punctuation">::</span>reference ref <span class="token operator">=</span> d<span class="token punctuation">.</span><span class="token function">emplace_front</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> it <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// 9</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> d<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 9 1 2 3 4 5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="erase"><a href="#erase" class="headerlink" title="erase"></a>erase</h3><p>1.移除位于pos的元素。返回指向下一个元素的迭代器。如一处的是最后一个，返回的是指向尾部的迭代器。</p><p><code>iterator erase( const_iterator pos );</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>deque<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>deque<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator it <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>it <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// 2</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2 3 4 5 6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>2.移除一定范围内的元素。返回指向下一个元素的迭代器。如一处的是最后一个，返回的是指向尾部的迭代器</p><p><code>iterator erase( const_iterator first, const_iterator last );</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>deque<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>deque<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator it <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> std<span class="token double-colon punctuation">::</span><span class="token function">distance</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>it <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// 4</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 4 5 6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="push-back"><a href="#push-back" class="headerlink" title="push_back"></a>push_back</h3><p><code>void push_back( const T&amp; value );</code>  <code>void push_back( T&amp;&amp; value );</code></p><p>添加元素到容器尾。支持移动语义。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>deque<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">99</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1 2 3 4 5 6 99</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="push-front"><a href="#push-front" class="headerlink" title="push_front"></a>push_front</h3><p><code>void push_front( T&amp;&amp; value );</code></p><p>插入元素到容器首. 所有迭代器，包含尾后迭代器，都被非法化。没有引用被非法化。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>deque<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> d <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>d<span class="token punctuation">.</span><span class="token function">push_front</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> d<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 9 1 2 3 4 5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="pop-back"><a href="#pop-back" class="headerlink" title="pop_back"></a>pop_back</h3><p><code>void pop_back();</code></p><p>移除容器的末元素。在空容器上调用 <code>pop_back</code> 导致未定义行为。指向被擦除元素的迭代器和引用被非法化。尾后迭代器亦被非法化。其他引用和迭代器不受影响</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>deque<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1 2 3 4 5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="pop-front"><a href="#pop-front" class="headerlink" title="pop_front"></a>pop_front</h3><p><code>void pop_front();</code></p><p>移除首元素. 若容器中无元素，则行为未定义。指向被擦除元素的迭代器和引用被非法化。若元素是容器的最后元素，则尾后迭代器亦被非法化。其他迭代器和引用不受影响。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>deque<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> d <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>d<span class="token punctuation">.</span><span class="token function">pop_front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> d<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2 3 4 5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="resize"><a href="#resize" class="headerlink" title="resize"></a>resize</h3><p>重设容器大小以容纳 <code>count</code> 个元素.若当前元素大于 <code>count</code> ，则减小容器为其首 <code>count</code> 个元素。若当前容量小于count则插入默认 元素或指定的value值。</p><p><code>void resize( size_type count );</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>deque<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1 2 3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>deque<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1 2 3 4 5 6 0 0 0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>void resize( size_type count, const value_type&amp; value )</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>deque<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1 2 3 4 5 6 1 1 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="swap"><a href="#swap" class="headerlink" title="swap"></a>swap</h3><p><code>void swap( deque&amp; other ) noexcept</code></p><p>将内容与 <code>other</code> 的交换。不在单独的元素上调用任何移动、复制或交换操作。所有迭代器和引用保持合法。尾后迭代器被非法化。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>deque<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>deque<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v1<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">swap</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1 1 1 1 1 1 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="非成员函数"><a href="#非成员函数" class="headerlink" title="非成员函数"></a>非成员函数</h2><h3 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h3><ol><li><code>operator==</code>  2.<code>operator!=</code>  3.<code>operator&lt;</code>  4.<code>operator&lt;=</code>  5.<code>operator&gt;</code>  6.<code>operator&gt;=</code>  7.<code>operator&lt;=&gt;</code></li></ol><h3 id="swap-1"><a href="#swap-1" class="headerlink" title="swap"></a>swap</h3><p><code>std::swap(std::deque)</code>  特化 <code>std::swap</code> 算法</p><h3 id="擦除"><a href="#擦除" class="headerlink" title="擦除"></a>擦除</h3><p><code>erase(std::deque)， erase_if(std::deque)</code>  擦除所有满足特定判别标准的元素</p><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p>本文大部分内容来自<a href="https://zh.cppreference.com/w/cpp/container/deque">cppreference</a></p>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STL </tag>
            
            <tag> 顺序容器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++ forward_list API</title>
      <link href="/C-forward-list-API.html"/>
      <url>/C-forward-list-API.html</url>
      
        <content type="html"><![CDATA[<h2 id="C-std-forward-list"><a href="#C-std-forward-list" class="headerlink" title="C++ std::forward_list"></a>C++ std::forward_list</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">Allocator</span> <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>allocator<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token operator">></span><span class="token keyword">class</span> <span class="token class-name">forward_list</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> pmr <span class="token punctuation">&#123;</span>    <span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">></span>    <span class="token keyword">using</span> forward_list <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>forward_list<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>pmr<span class="token double-colon punctuation">::</span>polymorphic_allocator<span class="token operator">&lt;</span>T<span class="token operator">>></span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>std::forward_list</code> 是支持从容器中的任何位置快速插入和移除元素的容器。不支持快速随机访问。它实现为单链表，且实质上与其在 C 中实现相比无任何开销。与 <code>std::list</code> 相比，此容器在不需要双向迭代时提供更有效地利用空间的存储。</p><h2 id="成员类型"><a href="#成员类型" class="headerlink" title="成员类型"></a>成员类型</h2><table><thead><tr><th>成员类型</th><th>定义</th></tr></thead><tbody><tr><td><code>value_type</code></td><td><code>T</code></td></tr><tr><td><code>allocator_type</code></td><td><code>Allocator</code></td></tr><tr><td><code>size_type</code></td><td>无符号整数类型（通常是 <code>std::size_t</code> ）</td></tr><tr><td><code>difference_type</code></td><td>有符号整数类型（通常是 <code>std::ptrdiff_</code>t ）</td></tr><tr><td><code>reference</code></td><td><code>value_type&amp;</code></td></tr><tr><td><code>const_reference</code></td><td><code>const value_type&amp;</code></td></tr><tr><td><code>pointer</code></td><td><code>std::allocator_traits&lt;Allocator&gt;::pointer</code></td></tr><tr><td><code>const_pointer</code></td><td><code>std::allocator_traits&lt;Allocator&gt;::const_pointer</code></td></tr><tr><td><code>iterator</code></td><td><em>遗留向前迭代器</em> <em>(LegacyRandomAccessIterator)</em></td></tr><tr><td><code>const_iterator</code></td><td>常向前迭代器</td></tr></tbody></table><h2 id="构造"><a href="#构造" class="headerlink" title="构造"></a>构造</h2><h4 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h4><ol><li><p>创建一个空容器</p><p><code>forward_list();</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>forward_list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>构造拥有给定分配器 <code>alloc</code> 的空容器。</p><p><code>explicit forward_list( const Allocator&amp; alloc );</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>allocator<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> al<span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>forward_list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">v</span><span class="token punctuation">(</span>al<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>创建count个值为value的容器</p><p><code>forward_list( size_type count, const T&amp; value, const Allocator&amp; alloc = Allocator());</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>forward_list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">v</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 1 1 1 1 1 1 1 1 1 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>创建大小的count的容器, 默认元素值为0。</p><p><code>explicit forward_list( size_type count, const Allocator&amp; alloc = Allocator() );</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>forward_list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">v</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 0 0 0 0 0 0 0 0 0 0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>初始化列表</p><p><code>forward_list( std::initializer_list&lt;T&gt; init, const Allocator&amp; alloc = Allocator() );</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>forward_list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 1 2 4 5 6 7</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>以一对迭代器创建</p><p><code>template&lt; class InputIt &gt; forward_list( InputIt first, InputIt last, const Allocator&amp; alloc = Allocator() );</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>forward_list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v1<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>forward_list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">v</span><span class="token punctuation">(</span>v1<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v1<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 1 2 4 5 6 7</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>以其他的`forward_list容器创建</p><p><code>forward_list( const forward_list&amp; other );</code></p><p> <code>forward_list( const forward_list&amp; other, const Allocator&amp; alloc );</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>forward_list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v1<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>forward_list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">v</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 1 2 4 5 6 7</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>还可以使用移动语义</p><p><code>forward_list( forward_list&amp;&amp; other );</code>  <code>forward_list( forward_list&amp;&amp; other, const Allocator&amp; alloc );</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>forward_list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v1<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>forward_list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">v</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 1 2 4 5 6 7</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="operator"><a href="#operator" class="headerlink" title="operator="></a>operator=</h3><p><code>forward_list&amp; operator=( const forward_list&amp; other );</code><br><code>forward_list&amp; operator=( forward_list&amp;&amp; other ) noexcept</code><br><code>forward_list&amp; operator=( std::initializer_list&lt;T&gt; ilist );</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>forward_list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>forward_list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v1 <span class="token operator">=</span> v<span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>forward_list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v2 <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>forward_list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v3 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>v1<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v1<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1 2 4 5 6 7</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="assign"><a href="#assign" class="headerlink" title="assign"></a>assign</h3><p>替换容器的内容，无返回值。</p><ol><li><p>以 <code>count</code> 份 <code>value</code> 的副本替换内容。</p><p><code>void assign( size_type count, const T&amp; value );</code></p></li></ol><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>forward_list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 1 1 1 1 1 1 1 1 1 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li><p>以范围 <code>[first, last)</code> 中元素的副本替换内容。若任一参数是指向 <code>*this</code> 中的迭代器则行为未定义。</p><p><code>template&lt; class InputIt &gt; void assign( InputIt first, InputIt last );</code></p></li></ol><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>forward_list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>forward_list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v1<span class="token punctuation">;</span>v1<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 1 2 3 4 5 6 7 8 9</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li><p>以来自 initializer_list <code>ilist</code> 的元素替换内容。</p><p><code>void assign( std::initializer_list&lt;T&gt; ilist );</code></p></li></ol><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>forward_list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 1 2 3 4 5 6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="get-allocator"><a href="#get-allocator" class="headerlink" title="get_allocator"></a>get_allocator</h3><p><code>allocator_type get_allocator() const noexcept;</code></p><p>返回与容器关联的分配器。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>forward_list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>forward_list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token double-colon punctuation">::</span>allocator_type alloc_type <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">get_allocator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="元素访问"><a href="#元素访问" class="headerlink" title="元素访问"></a>元素访问</h2><h3 id="front"><a href="#front" class="headerlink" title="front"></a>front</h3><p><code>reference front();</code>  <code>const_reference front() const;</code></p><p>访问第一个元素，返回第一个元素的（常量）引用。在空容器上对 <code>front</code> 的调用是未定义的。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>forward_list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> v<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h2><h3 id="begin-end"><a href="#begin-end" class="headerlink" title="begin - end"></a>begin - end</h3><p><code>iterator begin() noexcept;</code> <code>const_iterator begin() const noexcept;</code><br><code>iterator end() noexcept;</code>  <code>const_iterator end() const noexcept;</code></p><p>返回指向容器开头和结尾的迭代器。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>forward_list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>forward_list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator i <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">!=</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>i <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span><span class="token comment">// 1 3 4 5 6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="cbegin-cend"><a href="#cbegin-cend" class="headerlink" title="cbegin - cend"></a>cbegin - cend</h3><p><code>const_iterator cbegin() const noexcept;</code> <code>const_iterator cend() const noexcept;</code></p><p>返回指向容器开头和结尾的常量迭代器。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>forward_list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>forward_list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token double-colon punctuation">::</span>const_iterator i <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">!=</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>i <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span><span class="token comment">// 1 3 4 5 6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="before-begin-cbefore-begin"><a href="#before-begin-cbefore-begin" class="headerlink" title="before_begin - cbefore_begin"></a>before_begin - cbefore_begin</h3><p><code>iterator before_begin() noexcept;</code>  <code>const_iterator before_begin() const noexcept;</code><br><code>const_iterator cbefore_begin() const noexcept;</code></p><p>返回指向首元素前一元素的（常量）迭代器。此元素表现为占位符，试图访问它会导致未定义行为。仅有的使用情况是在函数 insert_after() 、 emplace_after() 、 erase_after() 、 splice_after() 和迭代器自增中：自增始前迭代器准确地给出与从 begin()/cbegin() 获得者相同的迭代器。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>forward_list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>forward_list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator it <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">before_begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">++</span>it<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>forward_list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>forward_list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token double-colon punctuation">::</span>const_iterator it <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">before_begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">++</span>it<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="容量"><a href="#容量" class="headerlink" title="容量"></a>容量</h2><h3 id="empty"><a href="#empty" class="headerlink" title="empty"></a>empty</h3><p>判断容器是否为空，空则为true.</p><p><code>[[nodiscard]] bool empty() const noexcept;</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>forward_list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>boolalpha <span class="token operator">&lt;&lt;</span> v<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="max-size"><a href="#max-size" class="headerlink" title="max_size"></a>max_size</h3><p>返回根据系统或库实现限制的容器可保有的元素最大数量，返回值类型为size_type.</p><p><code>size_type max_size() const noexcept;</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>forward_list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> v<span class="token punctuation">.</span><span class="token function">max_size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// 576460752303423487</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="修改器"><a href="#修改器" class="headerlink" title="修改器"></a>修改器</h2><h3 id="clear"><a href="#clear" class="headerlink" title="clear"></a>clear</h3><p><code>void clear() noexcept;</code></p><p>擦除所有元素。此调用后 size() 返回零。非法化任何指代所含元素的引用、指针或迭代器。任何尾后迭代器保持合法。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>forward_list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> v<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// 0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="insert-after"><a href="#insert-after" class="headerlink" title="insert_after"></a>insert_after</h3><p>在容器中的指定位置后插入元素。</p><ol><li>在pos后插入value</li></ol><p><code>iterator insert_after( const_iterator pos, const T&amp; value );</code><br> <code>iterator insert_after( const_iterator pos, T&amp;&amp; value );</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>forward_list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>forward_list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator it <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">insert_after</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">before_begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// std::forward_list&lt;int>::iterator it = v.insert_after(v.before_begin(), std::move(99));</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>it <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// 99</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 99 1 2 3 4 5 6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>在pos后插入value的count个副本</li></ol><p><code>iterator insert_after( const_iterator pos, size_type count, const T&amp; value );</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>forward_list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>forward_list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator it <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">insert_after</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">before_begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>it <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// 1</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1 1 1 1 1 1 2 3 4 5 6 </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>在 <code>pos</code> 所指向的元素后插入来自范围 <code>[first, last)</code> 的元素。 若 <code>first</code> 与 <code>last</code> 是指向 *this 中的迭代器则行为未定义。</li></ol><p><code>template&lt; class InputIt &gt; iterator insert_after( const_iterator pos, InputIt first, InputIt last );</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>forward_list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>forward_list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v1<span class="token punctuation">&#123;</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>forward_list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator it <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">insert_after</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">before_begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v1<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v1<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>it <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// 9</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//  9 9 9 9 9 1 2 3 4 5 6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>在 <code>pos</code> 后插入来自 initializer_list <code>ilist</code> 的元素。</li></ol><p><code>iterator insert_after( const_iterator pos, std::initializer_list&lt;T&gt; ilist );</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>forward_list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>forward_list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator it <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">insert_after</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">before_begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>it <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// 9</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 9 9 9 9 1 2 3 4 5 6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="emplace-after"><a href="#emplace-after" class="headerlink" title="emplace_after"></a>emplace_after</h3><p><code>template&lt; class... Args &gt; iterator emplace_after( const_iterator pos, Args&amp;&amp;... args );</code></p><p>在容器中的指定位置后插入新元素。原位构造元素，即不进行复制或移动操作。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>forward_list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>forward_list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator it <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">emplace_after</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">before_begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>it <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// 99</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 99 1 2 3 4 5 6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="erase-after"><a href="#erase-after" class="headerlink" title="erase_after"></a>erase_after</h3><ol><li>移除 <code>pos</code> 后的元素。  指向后随被擦除元素的迭代器，或若不存在这种元素则为 end() 。</li></ol><p><code>iterator erase_after( const_iterator pos );</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>forward_list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>forward_list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator it <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">erase_after</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>it <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// 3</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1 3 4 5 6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li> 移除 <code>first</code>后 且于 <code>last</code> 之前的元素。返回值指向last.</li></ol><p><code>iterator erase_after( const_iterator first, const_iterator last );</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>forward_list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>forward_list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator it <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">erase_after</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="push-front"><a href="#push-front" class="headerlink" title="push_front"></a>push_front</h3><p><code>void push_front( const T&amp; value );</code>, <code>void push_front( T&amp;&amp; value );</code></p><p>插入元素到容器起始，无返回值。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>forward_list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">emplace_front</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 9 1 2 3 4 5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="emplace-front"><a href="#emplace-front" class="headerlink" title="emplace_front"></a>emplace_front</h3><p><code>template&lt; class... Args &gt; reference emplace_front( Args&amp;&amp;... args );</code></p><p>插入新元素到容器起始。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>forward_list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>forward_list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token double-colon punctuation">::</span>reference ref <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">emplace_front</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> ref <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// 9</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> d<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 9 1 2 3 4 5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="pop-front"><a href="#pop-front" class="headerlink" title="pop_front"></a>pop_front</h3><p><code>void pop_front();</code></p><p>移除容器首元素。若容器中无元素，则行为未定义。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>forward_list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2 3 4 5 6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="resize"><a href="#resize" class="headerlink" title="resize"></a>resize</h3><p><code>void resize( size_type count );</code>, <code>void resize( size_type count, const value_type&amp; value );</code></p><p>重设容器大小以容纳 <code>count</code> 个元素.若当前元素大于 <code>count</code> ，则减小容器为其首 <code>count</code> 个元素。若当前容量小于count则插入默认 元素或指定的value值。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>forward_list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1 2 3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>forward_list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1 2 3 4 5 6 0 0 0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>forward_list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1 2 3 4 5 6 1 1 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="swap"><a href="#swap" class="headerlink" title="swap"></a>swap</h3><p><code>void swap( forward_list&amp; other ) noexcept</code></p><p>将内容与其他容器交换。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>forward_list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>forward_list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v1<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">swap</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1 1 1 1 1 1 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><h3 id="merge"><a href="#merge" class="headerlink" title="merge"></a>merge</h3><p>合并二个已排序列表</p><p><code>void merge( forward_list&amp;&amp; other );</code>, <code>void merge( forward_list&amp; other );</code>  </p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>forward_list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>forward_list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v1<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">merge</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><code>template &lt;class Compare&gt; void merge( forward_list&amp; other, Compare comp )</code><br><code>template &lt;class Compare&gt; void merge( forward_list&amp;&amp; other, Compare comp );</code>  </p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>forward_list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>forward_list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v1<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">merge</span><span class="token punctuation">(</span>v1<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span><span class="token operator">&amp;</span> a<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span><span class="token operator">&amp;</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token keyword">return</span> a <span class="token operator">></span> b<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="splice-after"><a href="#splice-after" class="headerlink" title="splice_after"></a>splice_after</h3><p>从另一 <code>forward_list</code> 移动元素到 *this 。不复制元素.<code>pos</code> 必须是指向 *this 中的可解引用迭代器或 before_begin() 迭代器（特别是 end() 不是 <code>pos</code> 的合法参数值）。若 get_allocator() != other.get_allocator() 则行为未定义。没有迭代器或引用被非法化，指向被移动的元素的迭代器现在指代到 *this 中，而非 <code>other</code> 中。</p><ol><li>从 <code>other</code> 移动所有元素到 *this 。元素被插入到 <code>pos</code> 所指向的元素后。操作后 <code>other</code> 变为空。若 <code>other</code> 与 *this 指代同一对象则行为未定义。</li></ol><p><code>void splice_after( const_iterator pos, forward_list&amp; other );</code><br><code>void splice_after( const_iterator pos, forward_list&amp;&amp; other );</code>  </p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>forward_list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>forward_list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v1<span class="token punctuation">&#123;</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">splice_after</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// v.splice_after(v.begin(), std::move(v1));</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1 9 9 9 9 9 2 3 4 5 6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>从 <code>other</code> 移动后随 <code>it</code> 的迭代器所指向的元素到 *this 。元素被插入到 <code>pos</code> 所指向的元素后，若 <code>pos == it</code> 或若 <code>pos == ++it</code> 则无效果。</li></ol><p><code>void splice_after( const_iterator pos, forward_list&amp; other, const_iterator it );</code><br><code>void splice_after( const_iterator pos, forward_list&amp;&amp; other, const_iterator it );</code>  </p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>forward_list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>forward_list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v1<span class="token punctuation">&#123;</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">splice_after</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v1<span class="token punctuation">,</span> v1<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// v.splice_after(v.begin(), std::move(v1), v1.begin());</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1 8 2 3 4 5 6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>从 <code>other</code> 移动范围 <code>(first, last)</code> 中的元素到 *this 。元素被插入到 <code>pos</code> 所指向的元素后。不移动 <code>first</code> 所指向的元素。若 <code>pos</code> 是范围 <code>(first,last)</code> 中的元素则行为未定义。</li></ol><p><code>void splice_after( const_iterator pos, forward_list&amp; other, const_iterator first, const_iterator last );</code><br><code>void splice_after( const_iterator pos, forward_list&amp;&amp; other, const_iterator first, const_iterator last );</code>  </p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>forward_list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>forward_list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v1<span class="token punctuation">&#123;</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">splice_after</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v1<span class="token punctuation">,</span> v1<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v1<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1 8 9 9 9 2 3 4 5 6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="remove-remove-if"><a href="#remove-remove-if" class="headerlink" title="remove, remove_if"></a>remove, remove_if</h3><p>移除满足特定标准的元素. 返回移除的元素数。</p><ol><li><p>移除所有等于 <code>value</code> 的元素</p><p><code>size_type remove( const T&amp; value ); // cpp20有返回值，cpp20前无返回值 </code> </p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>forward_list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1 2 4 5 6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>移除所有谓词 <code>p</code> 对它返回 true 的元素。</p><p><code>template&lt; class UnaryPredicate &gt; size_type remove_if( UnaryPredicate p ); //cpp20有返回值,cpp20前无返回值 </code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>forward_list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">remove_if</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">&amp;</span> i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token keyword">return</span> i<span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2 4 6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="reverse"><a href="#reverse" class="headerlink" title="reverse"></a>reverse</h3><p><code>void reverse() noexcept;</code></p><p>将该链表的所有元素的顺序反转.不非法化任何引用或迭代器。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>forward_list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 6 5 4 3 2 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="unique"><a href="#unique" class="headerlink" title="unique"></a>unique</h3><p>删除连续的重复元素</p><p>返回移除的元素数。<code>size_type unique(); // cpp20有返回值，cpp20前无返回值 </code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>forward_list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">unique</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1 3 6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>返回移除的元素数。 <code>template&lt; class BinaryPredicate &gt; size_type unique( BinaryPredicate p ); // cpp20有返回值，cpp20前无返回值 </code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>forward_list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">unique</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span><span class="token operator">&amp;</span> a<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span><span class="token operator">&amp;</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> a<span class="token operator">&lt;</span>b<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h3><p>对元素进行排序</p><p><code>void sort();</code>以升序排序元素。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>forward_list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1 1 2 2 3 3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>template&lt; class Compare &gt; void sort( Compare comp );</code>, 用给定的比较函数 <code>comp</code>来排序。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>forward_list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span><span class="token operator">&amp;</span> a<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span><span class="token operator">&amp;</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token keyword">return</span> a <span class="token operator">></span> b<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3 3 2 2 1 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="非成员函数"><a href="#非成员函数" class="headerlink" title="非成员函数"></a>非成员函数</h2><h3 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h3><ol><li><code>operator==</code>  2.<code>operator!=</code>  3.<code>operator&lt;</code>  4.<code>operator&lt;=</code>  5.<code>operator&gt;</code>  6.<code>operator&gt;=</code>  7.<code>operator&lt;=&gt;</code></li></ol><h3 id="swap-1"><a href="#swap-1" class="headerlink" title="swap"></a>swap</h3><p><code>std::swap(std::forward_list)</code>  特化 <code>std::swap</code> 算法</p><h3 id="擦除"><a href="#擦除" class="headerlink" title="擦除"></a>擦除</h3><p><code>erase(std::forward_list)， erase_if(std::forward_list)</code>  擦除所有满足特定判别标准的元素</p><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p>本文大部分内容来自<a href="https://zh.cppreference.com/w/cpp/container/forward_list">cppreference</a></p>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STL </tag>
            
            <tag> 顺序容器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++ list API</title>
      <link href="/C-list-API.html"/>
      <url>/C-list-API.html</url>
      
        <content type="html"><![CDATA[<h2 id="C-std-list"><a href="#C-std-list" class="headerlink" title="C++ std::list"></a>C++ std::list</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">Allocator</span> <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>allocator<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token operator">></span><span class="token keyword">class</span> <span class="token class-name">list</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> pmr <span class="token punctuation">&#123;</span>    <span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">></span>    <span class="token keyword">using</span> list <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>list<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>pmr<span class="token double-colon punctuation">::</span>polymorphic_allocator<span class="token operator">&lt;</span>T<span class="token operator">>></span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>std::list</code> 是支持常数时间从容器任何位置插入和移除元素的容器。不支持快速随机访问。它通常实现为双向链表。与 <code>std::forward_list</code> 相比，此容器提供双向迭代但在空间上效率稍低。</p><p>在 <code>list</code> 内或在数个 <code>list</code> 间添加、移除和移动元素不会非法化迭代器或引用。迭代器仅在对应元素被删除时非法化。</p><h2 id="成员类型"><a href="#成员类型" class="headerlink" title="成员类型"></a>成员类型</h2><table><thead><tr><th>成员类型</th><th>定义</th></tr></thead><tbody><tr><td><code>value_type</code></td><td><code>T</code></td></tr><tr><td><code>allocator_type</code></td><td><code>Allocator</code></td></tr><tr><td><code>size_type</code></td><td>无符号整数类型（通常是 <code>std::size_t</code> ）</td></tr><tr><td><code>difference_type</code></td><td>有符号整数类型（通常是 <code>std::ptrdiff_</code>t ）</td></tr><tr><td><code>reference</code></td><td><code>value_type&amp;</code></td></tr><tr><td><code>const_reference</code></td><td><code>const value_type&amp;</code></td></tr><tr><td><code>pointer</code></td><td><code>std::allocator_traits&lt;Allocator&gt;::pointer</code></td></tr><tr><td><code>const_pointer</code></td><td><code>std::allocator_traits&lt;Allocator&gt;::const_pointer</code></td></tr><tr><td><code>iterator</code></td><td>遗留双向迭代器 (LegacyRandomAccessIterator)</td></tr><tr><td><code>const_iterator</code></td><td>常双向迭代器</td></tr><tr><td><code>reverse_iterator</code></td><td><code>std::reverse_iterator&lt;iterator&gt;</code></td></tr><tr><td><code>const_reverse_iterator</code></td><td><code>std::reverse_iterator&lt;const_iterator&gt;</code></td></tr></tbody></table><h2 id="构造"><a href="#构造" class="headerlink" title="构造"></a>构造</h2><h4 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h4><ol><li><p>创建一个空容器</p><p><code>list();</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>构造拥有给定分配器 <code>alloc</code> 的空容器。</p><p><code>explicit list( const Allocator&amp; alloc );</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>allocator<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> al<span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">v</span><span class="token punctuation">(</span>al<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>创建count个值为value的容器</p><p><code>list( size_type count, const T&amp; value, const Allocator&amp; alloc = Allocator());</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">v</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1 1 1 1 1 1 1 1 1 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>创建大小的count的容器, 默认元素值为0。</p><p><code>explicit list( size_type count, const Allocator&amp; alloc = Allocator() );</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">v</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0 0 0 0 0 0 0 0 0 0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>初始化列表</p><p><code>list( std::initializer_list&lt;T&gt; init, const Allocator&amp; alloc = Allocator() );</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1 2 4 5 6 7</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>以一对迭代器创建</p><p><code>template&lt; class InputIt &gt; list( InputIt first, InputIt last, const Allocator&amp; alloc = Allocator() );</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v1<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">v</span><span class="token punctuation">(</span>v1<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v1<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1 2 4 5 6 7</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>以其他的`forward_list容器创建</p><p><code>list( const list&amp; other );</code></p><p><code>list( const list&amp; other, const Allocator&amp; alloc );</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v1<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">v</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1 2 4 5 6 7</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>还可以使用移动语义</p><p><code>list( forward_list&amp;&amp; other );</code>  list( list&amp;&amp; other, const Allocator&amp; alloc );`</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v1<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">v</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1 2 4 5 6 7</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="operator"><a href="#operator" class="headerlink" title="operator="></a>operator=</h3><p><code>list&amp; operator=( const list&amp; other );</code></p><p><code>list&amp; operator=( list&amp;&amp; other ) noexcept</code></p><p><code>list&amp; operator=( std::initializer_list&lt;T&gt; ilist );</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v1 <span class="token operator">=</span> v<span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v2 <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v3 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>v1<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v1<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1 2 4 5 6 7</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="assign"><a href="#assign" class="headerlink" title="assign"></a>assign</h3><p>替换容器的内容，无返回值。</p><ol><li><p>以 <code>count</code> 份 <code>value</code> 的副本替换内容。</p><p><code>void assign( size_type count, const T&amp; value );</code></p></li></ol><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1 1 1 1 1 1 1 1 1 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="2"><li><p>以范围 <code>[first, last)</code> 中元素的副本替换内容。若任一参数是指向 <code>*this</code> 中的迭代器则行为未定义。</p><p><code>template&lt; class InputIt &gt; void assign( InputIt first, InputIt last );</code></p></li></ol><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v1<span class="token punctuation">;</span>v1<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1 2 3 4 5 6 7 8 9</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li><p>以来自 initializer_list 的元素替换内容。</p><p><code>void assign( std::initializer_list&lt;T&gt; ilist );</code></p></li></ol><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1 2 3 4 5 6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="get-allocator"><a href="#get-allocator" class="headerlink" title="get_allocator"></a>get_allocator</h3><p><code>allocator_type get_allocator() const noexcept;</code></p><p>返回与容器关联的分配器。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token double-colon punctuation">::</span>allocator_type alloc_type <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">get_allocator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="元素访问"><a href="#元素访问" class="headerlink" title="元素访问"></a>元素访问</h2><h3 id="front"><a href="#front" class="headerlink" title="front"></a>front</h3><p><code>reference front();</code>  <code>const_reference front() const;</code></p><p>访问第一个元素，返回第一个元素的（常量）引用。在空容器上对 <code>front</code> 的调用是未定义的。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> v<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="back"><a href="#back" class="headerlink" title="back"></a>back</h3><p><code>reference back();</code>  <code>const_reference back() const;</code></p><p>访问最后一个元素.在空容器上调用 <code>back</code> 导致<a href="https://zh.cppreference.com/w/cpp/language/ub">未定义行为</a>。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> v<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// 6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h2><h3 id="begin-end"><a href="#begin-end" class="headerlink" title="begin - end"></a>begin - end</h3><p><code>iterator begin() noexcept;</code> <code>const_iterator begin() const noexcept;</code></p><p><code>iterator end() noexcept;</code>  <code>const_iterator end() const noexcept;</code></p><p>返回指向容器开头和结尾的迭代器。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator i <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">!=</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>i <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span><span class="token comment">// 1 3 4 5 6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="cbegin-cend"><a href="#cbegin-cend" class="headerlink" title="cbegin - cend"></a>cbegin - cend</h3><p><code>const_iterator cbegin() const noexcept;</code> <code>const_iterator cend() const noexcept;</code></p><p>返回指向容器开头和结尾的常量迭代器。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token double-colon punctuation">::</span>const_iterator i <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">!=</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>i <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span><span class="token comment">// 1 3 4 5 6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="rbegin-rend"><a href="#rbegin-rend" class="headerlink" title="rbegin - rend"></a>rbegin - rend</h3><p>返回指向容器开头和结尾的反向迭代器。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token double-colon punctuation">::</span>reverse_iterator i <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">rbegin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">!=</span> v<span class="token punctuation">.</span><span class="token function">rend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>i <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span><span class="token comment">// 6 5 4 3 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="crbegin-crend"><a href="#crbegin-crend" class="headerlink" title="crbegin - crend"></a>crbegin - crend</h3><p>返回指向容器开头和结尾的反向常量迭代器。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token double-colon punctuation">::</span>const_reverse_iterator i <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">rbegin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">!=</span> v<span class="token punctuation">.</span><span class="token function">rend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>i <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span><span class="token comment">// 6 5 4 3 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="容量"><a href="#容量" class="headerlink" title="容量"></a>容量</h2><h3 id="empty"><a href="#empty" class="headerlink" title="empty"></a>empty</h3><p>判断容器是否为空，空则为true. <code>[[nodiscard]] bool empty() const noexcept;</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>boolalpha <span class="token operator">&lt;&lt;</span> v<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="max-size"><a href="#max-size" class="headerlink" title="max_size"></a>max_size</h3><p>返回根据系统或库实现限制的容器可保有的元素最大数量，返回值类型为size_type.</p><p><code>size_type max_size() const noexcept;</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> v<span class="token punctuation">.</span><span class="token function">max_size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// 576460752303423487</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="size"><a href="#size" class="headerlink" title="size"></a>size</h3><p>返回容纳的元素数.<code>size_type size() const noexcept;</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> v<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// 6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="修改器"><a href="#修改器" class="headerlink" title="修改器"></a>修改器</h2><h3 id="clear"><a href="#clear" class="headerlink" title="clear"></a>clear</h3><p>擦除所有元素。 <code>void clear() noexcept;</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> v<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// 0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="insert"><a href="#insert" class="headerlink" title="insert"></a>insert</h3><p>1.在pos前插入value, 返回指向插入元素的迭代器。支持移动语义。</p><p><code>iterator insert( const_iterator pos, const T&amp; value );</code><br><code>iterator insert( const_iterator pos, T&amp;&amp; value );</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator it <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// std::deque&lt;int>::iterator it = v.insert(v.end(), std::move(99));</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>it <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// 99</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1 2 3 4 5 6 99</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.在 <code>pos</code> 前插入 <code>value</code> 的 <code>count</code> 个副本。返回指向插入的第一个元素的迭代器。</p><p><code>iterator insert( const_iterator pos, size_type count, const T&amp; value );</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator it <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>it <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// 1</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1 2 3 4 5 6 1 1 1 1 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>3.在 <code>pos</code> 前插入来自范围 <code>[first, last)</code> 的元素。返回指向插入的第一个元素的迭代器。</p><p><code>template&lt; class InputIt &gt; iterator insert( const_iterator pos, InputIt first, InputIt last );</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v1<span class="token punctuation">&#123;</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator it <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v1<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v1<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>it <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// 9</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1 2 3 4 5 6 9 9 9 9 9</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4.在 <code>pos</code> 前插入来自 initializer_list <code>ilist</code> 的元素。返回指向插入的第一个元素的迭代器。</p><p><code>iterator insert( const_iterator pos, std::initializer_list&lt;T&gt; ilist );</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator it <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>it <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// 9</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1 2 3 4 5 6 9 9 9 9</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="emplace"><a href="#emplace" class="headerlink" title="emplace"></a>emplace</h3><p><code>template&lt; class... Args &gt; iterator emplace( const_iterator pos, Args&amp;&amp;... args );</code></p><p>直接于 <code>pos</code> 前插入原位构造元素到容器中。返回值指向被构造的元素的迭代器。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator it <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>it <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// 99</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1 2 3 4 5 6 99</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="emplace-back"><a href="#emplace-back" class="headerlink" title="emplace_back"></a>emplace_back</h3><p><code>template&lt; class... Args &gt; reference emplace_back( Args&amp;&amp;... args );</code></p><p>原位构造元素到容器尾部。返回被插入元素的引用。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token double-colon punctuation">::</span>reference it <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span><span class="token number">88</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> it <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// 88</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="emplace-front"><a href="#emplace-front" class="headerlink" title="emplace_front"></a>emplace_front</h3><p><code>template&lt; class... Args &gt; reference emplace_front( Args&amp;&amp;... args );</code></p><p>在容器起始就地构造元素，返回指向出入元素的引用。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> d <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token double-colon punctuation">::</span>reference ref <span class="token operator">=</span> d<span class="token punctuation">.</span><span class="token function">emplace_front</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> it <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// 9</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> d<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 9 1 2 3 4 5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="erase"><a href="#erase" class="headerlink" title="erase"></a>erase</h3><p>1.移除位于pos的元素。返回指向下一个元素的迭代器。如一处的是最后一个，返回的是指向尾部的迭代器。</p><p><code>iterator erase( const_iterator pos );</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator it <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>it <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// 2</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2 3 4 5 6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>2.移除一定范围内的元素。返回指向下一个元素的迭代器。如一处的是最后一个，返回的是指向尾部的迭代器</p><p><code>iterator erase( const_iterator first, const_iterator last );</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator it <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> std<span class="token double-colon punctuation">::</span><span class="token function">distance</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>it <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// 4</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 4 5 6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="push-back"><a href="#push-back" class="headerlink" title="push_back"></a>push_back</h3><p><code>void push_back( const T&amp; value );</code>  <code>void push_back( T&amp;&amp; value );</code></p><p>添加元素到容器尾。支持移动语义。无返回值。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">99</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1 2 3 4 5 6 99</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="push-front"><a href="#push-front" class="headerlink" title="push_front"></a>push_front</h3><p><code>void push_front( const T&amp; value );</code>  <code>void push_front( T&amp;&amp; value );</code></p><p>插入元素到容器首，无返回值。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> d <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>d<span class="token punctuation">.</span><span class="token function">push_front</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> d<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 9 1 2 3 4 5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="pop-back"><a href="#pop-back" class="headerlink" title="pop_back"></a>pop_back</h3><p><code>void pop_back();</code> 移除容器的末元素。在空容器上调用 <code>pop_back</code> 导致未定义行为。函数无返回值。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1 2 3 4 5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="pop-front"><a href="#pop-front" class="headerlink" title="pop_front"></a>pop_front</h3><p><code>void pop_front();</code> 移除首元素，无返回值。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> d <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>d<span class="token punctuation">.</span><span class="token function">pop_front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> d<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2 3 4 5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="resize"><a href="#resize" class="headerlink" title="resize"></a>resize</h3><p>重设容器大小以容纳 <code>count</code> 个元素.若当前元素大于 <code>count</code> ，则减小容器为其首 <code>count</code> 个元素。若当前容量小于count则插入默认 元素或指定的value值。无返回值。</p><p><code>void resize( size_type count );</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1 2 3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>void resize( size_type count, T value = T() );</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1 2 3 4 5 6 0 0 0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>void resize( size_type count, const value_type&amp; value );</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1 2 3 4 5 6 1 1 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="swap"><a href="#swap" class="headerlink" title="swap"></a>swap</h3><p><code>void swap( list&amp; other ) noexcept</code>. 将内容与其他容器交换。无返回值。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v1<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">swap</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1 1 1 1 1 1 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><h3 id="merge"><a href="#merge" class="headerlink" title="merge"></a>merge</h3><p>合并二个已排序列表</p><p><code>void merge( list&amp;&amp; other );</code>, <code>void merge( list&amp; other );</code>  </p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v1<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">merge</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1 1 1 1 1 2 3 4 5 6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><code>template &lt;class Compare&gt; void merge( list&amp; other, Compare comp )</code><br><code>template &lt;class Compare&gt; void merge( list&amp;&amp; other, Compare comp );</code>  </p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v1<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">merge</span><span class="token punctuation">(</span>v1<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span><span class="token operator">&amp;</span> a<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span><span class="token operator">&amp;</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token keyword">return</span> a <span class="token operator">></span> b<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1 2 3 4 5 6 1 1 1 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="splice"><a href="#splice" class="headerlink" title="splice"></a>splice</h3><p>从另一 <code>list</code> 移动元素到 *this 。若 get_allocator() != other.get_allocator() 则行为未定义。没有迭代器或引用被非法化，指向被移动的元素的迭代器现在指代到 *this 中，而非 <code>other</code> 中。</p><ol><li>从 <code>other</code> 移动所有元素到 *this 。元素被插入到 <code>pos</code> 所指向的元素之前。操作后 <code>other</code> 变为空。若 <code>other</code> 与 *this 指代同一对象则行为未定义。</li></ol><p><code>void splice( const_iterator pos, list&amp; other );</code>   <code>void splice( const_iterator pos, list&amp;&amp; other );</code>  </p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v1<span class="token punctuation">&#123;</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// v.splice_after(v.begin(), std::move(v1));</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 9 9 9 9 9 1 2 3 4 5 6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>从 <code>other</code> 移动后随 <code>it</code> 的迭代器所指向的元素到 *this 。元素被插入到 <code>pos</code> 所指向的元素前，若 <code>pos == it</code> 或若 <code>pos == ++it</code> 则无效果。</li></ol><p><code>void splice( const_iterator pos, list&amp; other, const_iterator it );</code><br><code>void splice( const_iterator pos, list&amp;&amp; other, const_iterator it );</code>  </p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v1<span class="token punctuation">&#123;</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v1<span class="token punctuation">,</span> v1<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// v.splice(v.begin(), std::move(v1), v1.begin());</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 7 1 2 3 4 5 6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>从 <code>other</code> 移动范围 <code>(first, last)</code> 中的元素到 *this 。元素被插入到 <code>pos</code> 所指向的元素前。不移动 <code>first</code> 所指向的元素。若 <code>pos</code> 是范围 <code>(first,last)</code> 中的元素则行为未定义。</li></ol><p><code>void splice( const_iterator pos, list&amp; other, const_iterator first, const_iterator last );</code><br><code>void splice( const_iterator pos, list&amp;&amp; other, const_iterator first, const_iterator last );</code>  </p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v1<span class="token punctuation">&#123;</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v1<span class="token punctuation">,</span> v1<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v1<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 7 8 9 9 9 1 2 3 4 5 6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="remove-remove-if"><a href="#remove-remove-if" class="headerlink" title="remove, remove_if"></a>remove, remove_if</h3><p>移除满足特定标准的元素. 返回移除的元素数。</p><ol><li><p>移除所有等于 <code>value</code> 的元素</p><p><code>size_type remove( const T&amp; value ); // cpp20有返回值，cpp20前无返回值 </code> </p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1 2 4 5 6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>移除所有谓词 <code>p</code> 对它返回 true 的元素。</p><p><code>template&lt; class UnaryPredicate &gt; size_type remove_if( UnaryPredicate p ); //cpp20有返回值,cpp20前无返回值 </code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">remove_if</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">&amp;</span> i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token keyword">return</span> i<span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2 4 6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="reverse"><a href="#reverse" class="headerlink" title="reverse"></a>reverse</h3><p><code>void reverse() noexcept;</code></p><p>将该链表的所有元素的顺序反转.不非法化任何引用或迭代器。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 6 5 4 3 2 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="unique"><a href="#unique" class="headerlink" title="unique"></a>unique</h3><p>删除连续的重复元素</p><p><code>size_type unique(); // cpp20有返回值，cpp20前无返回值 </code>, 返回移除的元素数。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">unique</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1 3 6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>template&lt; class BinaryPredicate &gt; size_type unique( BinaryPredicate p ); cpp20有返回值，cpp20前无返回值 </code>, 返回移除的元素数。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">unique</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span><span class="token operator">&amp;</span> a<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span><span class="token operator">&amp;</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> a<span class="token operator">&lt;</span>b<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h3><p>对元素进行排序</p><p><code>void sort();</code>以升序排序元素。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1 1 2 2 3 3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>template&lt; class Compare &gt; void sort( Compare comp );</code>, 用给定的比较函数 <code>comp</code>来排序。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span><span class="token operator">&amp;</span> a<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span><span class="token operator">&amp;</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token keyword">return</span> a <span class="token operator">></span> b<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3 3 2 2 1 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="非成员函数"><a href="#非成员函数" class="headerlink" title="非成员函数"></a>非成员函数</h2><h3 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h3><ol><li>operator==  2.operator!=  3.operator&lt;  4.operator&lt;=  5.operator&gt;  6.operator&gt;=  7.operator&lt;=&gt;</li></ol><h3 id="swap-1"><a href="#swap-1" class="headerlink" title="swap"></a>swap</h3><p><code>std::swap(std::list)</code>  特化 <code>std::swap</code> 算法</p><h3 id="擦除"><a href="#擦除" class="headerlink" title="擦除"></a>擦除</h3><p><code>erase(std::list)</code>， <code>erase_if(std::list)</code>  擦除所有满足特定判别标准的元素</p><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p>本文大部分内容来自<a href="https://zh.cppreference.com/w/cpp/container/list">cppreference</a></p>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STL </tag>
            
            <tag> 顺序容器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++ vector API</title>
      <link href="/C-vector-API.html"/>
      <url>/C-vector-API.html</url>
      
        <content type="html"><![CDATA[<h2 id="C-std-vector"><a href="#C-std-vector" class="headerlink" title="C++ std::vector"></a>C++ std::vector</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">Allocator</span> <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>allocator<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token operator">></span><span class="token keyword">class</span> <span class="token class-name">vector</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> pmr <span class="token punctuation">&#123;</span>    <span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">></span>    <span class="token keyword">using</span> vector <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>pmr<span class="token double-colon punctuation">::</span>polymorphic_allocator<span class="token operator">&lt;</span>T<span class="token operator">>></span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>vector</code>应该是cpp中最常用的容器类型了，其底层使用数组实现，所以内存是连续的。容量再分配时会移动所有元素到新的地方。</p><p><code>vector</code> 的存储是自动管理的，按需扩张收缩。 <code>vector</code> 通常占用多于静态数组的空间，因为要分配更多内存以管理将来的增长。 <code>vector</code> 所用的方式不在每次插入元素时，而只在额外内存耗尽时重分配。分配的内存总量可用 <code>capacity()</code> 函数查询。额外内存可通过对 <code>shrink_to_fit()</code> 的调用返回给系统。</p><p>重分配通常是性能上有开销的操作。若元素数量已知，则 <code>reserve()</code> 函数可用于消除重分配。vector 上的常见操作复杂度（效率）如下：</p><ul><li>随机访问——常数 𝓞(1)</li><li>在末尾插入或移除元素——均摊常数 𝓞(1)</li><li>插入或移除元素——与到 vector 结尾的距离成线性 𝓞(n)</li></ul><h2 id="成员类型"><a href="#成员类型" class="headerlink" title="成员类型"></a>成员类型</h2><table><thead><tr><th>成员类型</th><th>定义</th></tr></thead><tbody><tr><td><code>value_type</code></td><td><code>T</code></td></tr><tr><td><code>allocator_type</code></td><td><code>Allocator</code></td></tr><tr><td><code>size_type</code></td><td>无符号整数类型（通常是 <code>std::size_t</code> ）</td></tr><tr><td><code>difference_type</code></td><td>有符号整数类型（通常是 <code>std::ptrdiff_</code>t ）</td></tr><tr><td><code>reference</code></td><td><code>value_type&amp;</code></td></tr><tr><td><code>const_reference</code></td><td><code>const value_type&amp;</code></td></tr><tr><td><code>pointer</code></td><td><code>std::allocator_traits&lt;Allocator&gt;::pointer</code></td></tr><tr><td><code>const_pointer</code></td><td><code>std::allocator_traits&lt;Allocator&gt;::const_pointer</code></td></tr><tr><td><code>iterator</code></td><td><em>遗留随机访问迭代器</em> <em>(LegacyRandomAccessIterator)</em></td></tr><tr><td><code>const_iterator</code></td><td>常随机访问迭代器</td></tr><tr><td><code>reverse_iterator</code></td><td><code>std::reverse_iterator&lt;iterator&gt;</code></td></tr><tr><td><code>const_reverse_iterator</code></td><td><code>std::reverse_iterator&lt;const_iterator&gt;</code></td></tr></tbody></table><h2 id="构造"><a href="#构造" class="headerlink" title="构造"></a>构造</h2><h4 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h4><ol><li><p>创建一个空vector. </p><p><code>constexpr vector() noexcept(noexcept(Allocator()));</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>创建count个值为value的容器</p><p><code>constexpr vector( size_type count, const T&amp; value, const Allocator&amp; alloc = Allocator());</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">v</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 1 1 1 1 1 1 1 1 1 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>创建大小的count的容器, 默认元素值为0。</p><p><code>constexpr explicit vector( size_type count, const Allocator&amp; alloc = Allocator() );</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">v</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 0 0 0 0 0 0 0 0 0 0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>初始化列表</p><p><code>constexpr vector( std::initializer_list&lt;T&gt; init, const Allocator&amp; alloc = Allocator() );</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 1 2 4 5 6 7</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>以一对迭代器创建</p><p><code>template&lt; class InputIt &gt; constexpr vector( InputIt first, InputIt last, const Allocator&amp; alloc = Allocator() );</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v1<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">v</span><span class="token punctuation">(</span>v1<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v1<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 1 2 4 5 6 7</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>以其他的vector容器创建</p><p><code>constexpr vector( const vector&amp; other );</code><br><code>constexpr vector( const vector&amp; other, const Allocator&amp; alloc );</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v1<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">v</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 1 2 4 5 6 7</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>还可以使用移动语义</p><p><code>constexpr vector( vector&amp;&amp; other ) noexcept;</code><br><code>constexpr vector( vector&amp;&amp; other, const Allocator&amp; alloc );</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v1<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">v</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 1 2 4 5 6 7</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>指定内存分配器</p><p><code>constexpr explicit vector( const Allocator&amp; alloc ) noexcept;</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>allocator<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> al<span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">v</span><span class="token punctuation">(</span>al<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><h3 id="operator"><a href="#operator" class="headerlink" title="operator="></a>operator=</h3><p><code>constexpr vector&amp; operator=( const vector&amp; other );</code><br><code>constexpr vector&amp; operator=( vector&amp;&amp; other ) noexcept</code><br><code>constexpr vector&amp; operator=( std::initializer_list&lt;T&gt; ilist );</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v1 <span class="token operator">=</span> v<span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v2 <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v3 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>v1<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v1<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="assign"><a href="#assign" class="headerlink" title="assign"></a>assign</h3><p>替换容器的内容。</p><p><code>constexpr void assign( size_type count, const T&amp; value );</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 1 1 1 1 1 1 1 1 1 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><code>constexpr void assign( InputIt first, InputIt last );</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v1<span class="token punctuation">;</span>v1<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 1 2 3 4 5 6 7 8 9</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>constexpr void assign( std::initializer_list&lt;T&gt; ilist );</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 1 2 3 4 5 6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="get-allocator"><a href="#get-allocator" class="headerlink" title="get_allocator"></a>get_allocator</h3><p>返回与容器关联的分配器。<code>constexpr allocator_type get_allocator() const noexcept;</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token double-colon punctuation">::</span>allocator_type alloc_type <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">get_allocator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="元素访问"><a href="#元素访问" class="headerlink" title="元素访问"></a>元素访问</h2><p>除了data其余元素访问函数返回的都是元素的reference或const reference。</p><h3 id="at"><a href="#at" class="headerlink" title="at"></a>at</h3><p><code>constexpr reference at( size_type pos );</code> <code>constexpr const_reference at( size_type pos ) const;</code></p><p>返回位于指定位置 <code>pos</code> 的元素的引用，有边界检查。若 <code>pos</code> 不在容器范围内，则抛出 std::out_of_range 类型的异常。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">88</span><span class="token punctuation">;</span> <span class="token comment">// set</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> v<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 88</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="operator-1"><a href="#operator-1" class="headerlink" title="operator[]"></a>operator[]</h3><p><code>constexpr reference operator[]( size_type pos );</code><br><code>constexpr const_reference operator[]( size_type pos ) const;</code></p><p>返回位于指定位置 <code>pos</code> 的元素的引用。不进行边界检查。通过此运算符访问不存在的元素是未定义行为。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>v<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">88</span><span class="token punctuation">;</span><span class="token comment">// set</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> v<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 88</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="front"><a href="#front" class="headerlink" title="front"></a>front</h3><p><code>constexpr reference front();</code>  <code>constexpr const_reference front() const;</code></p><p>返回到容器首元素的引用。在空容器上对 <code>front</code> 的调用是未定义的。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> v<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="back"><a href="#back" class="headerlink" title="back"></a>back</h3><p><code>constexpr reference back();</code>  <code>constexpr const_reference back() const;</code></p><p>返回到容器中最后一个元素的引用。在空容器上调用 <code>back</code> 导致未定义行为。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> v<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">//6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="data"><a href="#data" class="headerlink" title="data"></a>data</h3><p><code>constexpr T* data() noexcept;</code>  <code>constexpr const T* data() const noexcept;</code></p><p>返回指向作为元素存储工作的底层数组的指针。对于非空容器，返回的指针与首元素地址比较相等。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token operator">*</span>i <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>i <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h2><h3 id="begin-end"><a href="#begin-end" class="headerlink" title="begin - end"></a>begin - end</h3><p><code>constexpr iterator begin() noexcept;</code>  <code>constexpr const_iterator begin() const noexcept;</code><br><code>constexpr iterator end() noexcept;</code>  <code>constexpr const_iterator end() const noexcept;</code></p><p>返回指向容器开头和结尾的迭代器。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator i <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">!=</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>i <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span><span class="token comment">// 1 3 4 5 6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="cbegin-cend"><a href="#cbegin-cend" class="headerlink" title="cbegin - cend"></a>cbegin - cend</h3><p><code>constexpr const_iterator cbegin() const noexcept;</code>  <code>constexpr const_iterator cend() const noexcept;</code></p><p>返回指向容器开头和结尾的常量迭代器。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token double-colon punctuation">::</span>const_iterator i <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">!=</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>i <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span><span class="token comment">// 1 3 4 5 6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="rbegin-rend"><a href="#rbegin-rend" class="headerlink" title="rbegin - rend"></a>rbegin - rend</h3><p><code>constexpr reverse_iterator rbegin() noexcept;</code><br><code>constexpr const_reverse_iterator rbegin() const noexcept;</code><br><code>constexpr reverse_iterator rend() noexcept;</code><br><code>constexpr const_reverse_iterator rend() const noexcept;</code></p><p>返回指向容器开头和结尾的反向迭代器。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token double-colon punctuation">::</span>reverse_iterator i <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">rbegin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">!=</span> v<span class="token punctuation">.</span><span class="token function">rend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>i <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span><span class="token comment">// 6 5 4 3 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="crbegin-crend"><a href="#crbegin-crend" class="headerlink" title="crbegin - crend"></a>crbegin - crend</h3><p><code>constexpr const_reverse_iterator crbegin() const noexcept;</code><br><code>constexpr const_reverse_iterator crend() const noexcept;</code></p><p>返回指向容器开头和结尾的反向常量迭代器。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token double-colon punctuation">::</span>const_reverse_iterator i <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">rbegin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">!=</span> v<span class="token punctuation">.</span><span class="token function">rend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>i <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span><span class="token comment">// 6 5 4 3 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="容量"><a href="#容量" class="headerlink" title="容量"></a>容量</h2><h3 id="empty"><a href="#empty" class="headerlink" title="empty"></a>empty</h3><p><code>[[nodiscard]] constexpr bool empty() const noexcept;</code></p><p>判断容器是否为空，空则为true</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>boolalpha <span class="token operator">&lt;&lt;</span> v<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="size"><a href="#size" class="headerlink" title="size"></a>size</h3><p><code>constexpr size_type size() const noexcept;</code></p><p>返回容器中的元素数, 即 std::distance(begin(), end()) 。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> v<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// 5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="max-size"><a href="#max-size" class="headerlink" title="max_size"></a>max_size</h3><p><code>constexpr size_type max_size() const noexcept;</code></p><p>返回根据系统或库实现限制的容器可保有的元素最大数量</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> v<span class="token punctuation">.</span><span class="token function">max_size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// 2305843009213693951</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="reserve"><a href="#reserve" class="headerlink" title="reserve"></a>reserve</h3><p><code>constexpr void reserve( size_type new_cap );</code></p><p>增加 <code>vector</code> 的容量到大于或等于 <code>new_cap</code> 的值。若 <code>new_cap</code> 大于当前的 capacity() ，则分配新存储.函数无返回值。不可用于减少容量。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">reserve</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> v<span class="token punctuation">.</span><span class="token function">capacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>  <span class="token comment">// 9</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="capacity"><a href="#capacity" class="headerlink" title="capacity"></a>capacity</h3><p><code>constexpr size_type capacity() const noexcept;</code></p><p>返回容器当前已为之分配空间的元素数。取决于实现。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> v<span class="token punctuation">.</span><span class="token function">capacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// 6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="shrink-to-fit"><a href="#shrink-to-fit" class="headerlink" title="shrink_to_fit"></a>shrink_to_fit</h3><p><code>constexpr void shrink_to_fit();</code></p><p>请求移除未使用的容量。它是减少 <code>capacity()</code> 到 <code>size()</code>非强制性请求。请求是否达成依赖于实现。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">shrink_to_fit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> v<span class="token punctuation">.</span><span class="token function">capacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// 6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="修改器"><a href="#修改器" class="headerlink" title="修改器"></a>修改器</h2><h3 id="clear"><a href="#clear" class="headerlink" title="clear"></a>clear</h3><p><code>constexpr void clear() noexcept;</code></p><p>擦除所有元素。此调用后 <code>size()</code> 返回零。非法化任何指代所含元素的引用、指针或迭代器。任何尾后迭代器亦被非法化</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> v<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// 0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="insert"><a href="#insert" class="headerlink" title="insert"></a>insert</h3><p>插入元素到容器中的指定位置。</p><p>1.在pos前插入value, 返回指向插入元素的迭代器。支持移动语义。</p><p><code>constexpr iterator insert( const_iterator pos, const T&amp; value );</code><br><code>constexpr iterator insert( const_iterator pos, T&amp;&amp; value );</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator it <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// std::vector&lt;int>::iterator it = v.insert(v.end(), std::move(99));</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>it <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// 99</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1 2 3 4 5 6 99</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.在 <code>pos</code> 前插入 <code>value</code> 的 <code>count</code> 个副本。返回指向插入的第一个元素的迭代器。</p><p><code>constexpr iterator insert( const_iterator pos, size_type count, const T&amp; value );</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator it <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>it <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// 1</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1 2 3 4 5 6 1 1 1 1 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>3.在 <code>pos</code> 前插入来自范围 <code>[first, last)</code> 的元素。返回指向插入的第一个元素的迭代器。</p><p><code>template&lt; class InputIt &gt; constexpr iterator insert( const_iterator pos, InputIt first, InputIt last );</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v1<span class="token punctuation">&#123;</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator it <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v1<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v1<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>it <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// 9</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1 2 3 4 5 6 9 9 9 9 9</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4.在 <code>pos</code> 前插入来自 initializer_list <code>ilist</code> 的元素。返回指向插入的第一个元素的迭代器。</p><p><code>constexpr iterator insert( const_iterator pos, std::initializer_list&lt;T&gt; ilist );</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator it <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>it <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// 9</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1 2 3 4 5 6 9 9 9 9</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="emplace"><a href="#emplace" class="headerlink" title="emplace"></a>emplace</h3><p><code>template&lt; class... Args &gt; constexpr iterator emplace( const_iterator pos, Args&amp;&amp;... args );</code></p><p>直接于 <code>pos</code> 前插入原位构造元素到容器中。返回值指向被构造的元素的迭代器。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator it <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>it <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// 99</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1 2 3 4 5 6 99</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="emplace-back"><a href="#emplace-back" class="headerlink" title="emplace_back"></a>emplace_back</h3><p><code>template&lt; class... Args &gt; constexpr reference emplace_back( Args&amp;&amp;... args );</code></p><p>元素通过 std::allocator_traits::construct 构造，它典型地用 place new 于容器所提供的位置原位构造元素。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token double-colon punctuation">::</span>reference it <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span><span class="token number">88</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> it <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// 88</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="erase"><a href="#erase" class="headerlink" title="erase"></a>erase</h3><p>从容器擦除指定的元素。</p><p>1.移除位于pos的元素。返回指向下一个元素的迭代器。如一处的是最后一个，返回的是指向尾部的迭代器。</p><p><code>constexpr iterator erase( const_iterator pos );</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator it <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>it <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// 2</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2 3 4 5 6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>2.移除一定范围内的元素。返回指向下一个元素的迭代器。如一处的是最后一个，返回的是指向尾部的迭代器.</p><p><code>constexpr iterator erase( const_iterator first, const_iterator last );</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator it <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> std<span class="token double-colon punctuation">::</span><span class="token function">distance</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>it <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// 4</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 4 5 6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="push-back"><a href="#push-back" class="headerlink" title="push_back"></a>push_back</h3><p><code>constexpr void push_back( const T&amp; value );</code>  <code>constexpr void push_back( T&amp;&amp; value );</code></p><p>添加元素到容器尾。支持移动语义。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">99</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1 2 3 4 5 6 99</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="pop-back"><a href="#pop-back" class="headerlink" title="pop_back"></a>pop_back</h3><p><code>constexpr void pop_back();</code></p><p>移除容器的末元素。在空容器上调用 <code>pop_back</code> 导致未定义行为。非法化指向末元素的迭代器和引用，以及 <code>end()</code> 迭代器。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1 2 3 4 5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="resize"><a href="#resize" class="headerlink" title="resize"></a>resize</h3><p>重设容器大小以容纳 <code>count</code> 个元素.若当前元素大于 <code>count</code> ，则减小容器为其首 <code>count</code> 个元素。若当前容量小于count则插入默认 元素或指定的value值。</p><p><code>constexpr void resize( size_type count );</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1 2 3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1 2 3 4 5 6 0 0 0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>constexpr void resize( size_type count, const value_type&amp; value );</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1 2 3 4 5 6 1 1 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="swap"><a href="#swap" class="headerlink" title="swap"></a>swap</h3><p><code>constexpr void swap( vector&amp; other ) noexcept</code></p><p>将内容与其他容器交换。不在单独的元素上调用任何移动、复制或交换操作。所有迭代器和引用保持合法。尾后迭代器被非法化。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v1<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">swap</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1 1 1 1 1 1 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="非成员函数"><a href="#非成员函数" class="headerlink" title="非成员函数"></a>非成员函数</h2><h3 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h3><ol><li><code>operator==</code>  2.<code>operator!=</code>  3.<code>operator&lt;</code>  4.<code>operator&lt;=</code>  5.<code>operator&gt;</code>  6.<code>operator&gt;=</code>  7.<code>operator&lt;=&gt;</code></li></ol><h3 id="swap-1"><a href="#swap-1" class="headerlink" title="swap"></a>swap</h3><p><code>std::swap(std::vector)</code>  特化 <code>std::swap</code> 算法</p><h3 id="擦除"><a href="#擦除" class="headerlink" title="擦除"></a>擦除</h3><p><code>erase(std::vector)， erase_if(std::vector)</code>  擦除所有满足特定判别标准的元素</p><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p>本文大部分内容来自<a href="https://zh.cppreference.com/w/cpp/container/vector">cppreference</a></p>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STL </tag>
            
            <tag> 顺序容器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GCC11的C++-module示例</title>
      <link href="/GCC11%E7%9A%84C-module%E7%A4%BA%E4%BE%8B.html"/>
      <url>/GCC11%E7%9A%84C-module%E7%A4%BA%E4%BE%8B.html</url>
      
        <content type="html"><![CDATA[<h2 id="0-前言"><a href="#0-前言" class="headerlink" title="0. 前言"></a>0. 前言</h2><p>一直想尝试一下C++20新的特性–module，但是最新的GCC稳定版10.2好像还没有支持，查看官网得知，GCC11的dev/module分支会对此有较好的支持。那只能从源码编译GCC11了。此文就此做个记录。</p><p>编译环境：Ubuntu 2004，GCC10.2，x86_64.</p><h2 id="1-安装依赖"><a href="#1-安装依赖" class="headerlink" title="1. 安装依赖"></a>1. 安装依赖</h2><p>先安装一些编译GCC11需要使用的依赖，可能不全。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> <span class="token function">curl</span> <span class="token function">bzip2</span> build-essential flex bison zlib1g-dev<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="2-下载源码"><a href="#2-下载源码" class="headerlink" title="2. 下载源码"></a>2. 下载源码</h2><p>下载源码，我选择从国内的gitee镜像源下载，可以大幅加快下载速度。gitee源每天与官方源同步一次，基本可以保证和官方保持同步。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> clone --depth<span class="token operator">=</span><span class="token number">1</span> https://gitee.com/mirrors/gcc.git -b devel/c++-modules<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="3-进入源码目录，下载依赖。"><a href="#3-进入源码目录，下载依赖。" class="headerlink" title="3. 进入源码目录，下载依赖。"></a>3. 进入源码目录，下载依赖。</h2><p>下载完成后，进入源码目录，执行<code>download_prerequisites</code>自动下载解压GCC需要的依赖。创建一个<code>bulid</code>目录用来安装GCC。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token builtin class-name">cd</span> gcc/$ ./contrib/download_prerequisites$ <span class="token function">mkdir</span> build<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="4-配置"><a href="#4-配置" class="headerlink" title="4. 配置"></a>4. 配置</h2><p>进行编译前的环境配置，我选择安装在刚才创建的build目录中，如果不设置的话，将会默认安装到系统目录。然后因为只用来写C和C++，所以只使能C和C++。</p><p>如果配置的过程中出现错误，可以根据错误提示安装相应的依赖或执行相应的动作。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ ./configure --prefix<span class="token operator">=</span>/home/ngx/workspace/gcc/build --enable-threads<span class="token operator">=</span>posix --enable--long-long --with-system-zlib --enable-languages<span class="token operator">=</span>c,c++<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="5-编译"><a href="#5-编译" class="headerlink" title="5. 编译"></a>5. 编译</h2><p>配置完成后，就可以直接执行<code>make</code>进行编译。在这里可以根据需要使用多线程编译，在我的笔记本电脑上，<code>I7 6700HQ</code>开启16个线程编译，大概需要25分钟。</p><p>如果编译的过程出错，大概率还是依赖问题，直接安装相关的依赖就可以了。需要注意的是，有时可能需要重新执行上一步的配置才能应用下载的依赖。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">make</span> -j16<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="6-安装"><a href="#6-安装" class="headerlink" title="6. 安装"></a>6. 安装</h2><p>编译完成后执行<code>make install</code>安装在指定的目录。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">make</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="7-安装完成"><a href="#7-安装完成" class="headerlink" title="7. 安装完成"></a>7. 安装完成</h2><p>执行进入安装目录下的GCC，可以看见输出信息如下所示：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gcc/build/bin$ ./gcc -vUsing built-in specs.<span class="token assign-left variable">COLLECT_GCC</span><span class="token operator">=</span>./gcc<span class="token assign-left variable">COLLECT_LTO_WRAPPER</span><span class="token operator">=</span>/home/ngx/workspace/gcc/build/libexec/gcc/x86_64-pc-linux-gnu/11.0.0/lto-wrapperTarget: x86_64-pc-linux-gnuConfigured with: ./configure --prefix<span class="token operator">=</span>/home/ngx/workspace/gcc/build --enable-threads<span class="token operator">=</span>posix --enable--long-long --with-system-zlib --enable-languages<span class="token operator">=</span>c,c++ --disable-multilibThread model: posixSupported LTO compression algorithms: zlibgcc version <span class="token number">11.0</span>.0 <span class="token number">20210104</span> <span class="token punctuation">(</span>experimental<span class="token punctuation">)</span> <span class="token punctuation">[</span>c++-modules revision <span class="token number">20210117</span>-1750<span class="token punctuation">]</span> <span class="token punctuation">(</span>GCC<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是因为我们没有安装到系统目录，想要方便使用，还需要将相关的目录添加到环境变量；包括二进制文件和GCC11的库文件。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token builtin class-name">echo</span> <span class="token string">'PATH=/home/ngx/workspace/gcc/build/bin:$PATH'</span> <span class="token operator">>></span> ~/.bashrc$ <span class="token builtin class-name">source</span> ~/.bashrc$ <span class="token function">sudo</span> <span class="token builtin class-name">echo</span> <span class="token string">'/home/ngx/workspace/gcc/build/lib64'</span> <span class="token operator">>></span> /etc/ld.so.conf$ ldconfig<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>将新版本的GCC程序链接到<code>/usr/bin</code>下代替原来的。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">ln</span> -s ~/workspace/gcc/build/bin/gcc /usr/bin/gcc$ <span class="token function">sudo</span> <span class="token function">ln</span> -s ~/workspace/gcc/build/bin/g++ /usr/bin/g++<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="8-例子"><a href="#8-例子" class="headerlink" title="8. 例子"></a>8. 例子</h2><p>以下是一个很简单的例子。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; hello.ccmodule;#include &lt;iostream&gt;export module helloworld;export void hello() &#123;    std::cout &lt;&lt; &quot;Hello world!\n&quot;;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; main.ccimport helloworld; int main() &#123;    hello();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编译的时候需要添加<code>-fmodules-ts</code>编译选项。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ g++ hello.cc main.cc -fmodules-ts$ ./a.out Hello world<span class="token operator">!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="9-另一个例子"><a href="#9-另一个例子" class="headerlink" title="9. 另一个例子"></a>9. 另一个例子</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// sum.cpp</span><span class="token keyword">module</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">module</span> <span class="token module">Sum</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> Args<span class="token operator">></span><span class="token keyword">auto</span> <span class="token function">sum</span><span class="token punctuation">(</span>Args<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">+</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token operator">+</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// math.cpp</span><span class="token keyword">module</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token module">Sum</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">module</span> <span class="token module">Math</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span><span class="token keyword">auto</span> <span class="token function">add</span><span class="token punctuation">(</span>T a<span class="token punctuation">,</span> T b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">sum</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// main.cpp</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">import</span> <span class="token module">Math</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token keyword">const</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编译输出:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ g++ -std<span class="token operator">=</span>c++20 -fmodules-ts sum.cpp math.cpp main.cc$ ./a.out <span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="10-参考链接"><a href="#10-参考链接" class="headerlink" title="10. 参考链接"></a>10. 参考链接</h2><p><a href="https://gcc.gnu.org/wiki/cxx-modules">https://gcc.gnu.org/wiki/cxx-modules</a></p><p><a href="https://gcc.gnu.org/projects/cxx-status.html#cxx20">https://gcc.gnu.org/projects/cxx-status.html#cxx20</a></p>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GCC </tag>
            
            <tag> GCC11 </tag>
            
            <tag> module </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c语言多线程示例</title>
      <link href="/C%E8%AF%AD%E8%A8%80%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%A4%BA%E4%BE%8B.html"/>
      <url>/C%E8%AF%AD%E8%A8%80%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%A4%BA%E4%BE%8B.html</url>
      
        <content type="html"><![CDATA[<h2 id="0-简介"><a href="#0-简介" class="headerlink" title="0. 简介"></a>0. 简介</h2><p>当程序的性能到达瓶颈时，常用的解决方法是使用多线程，将任务或数据分割，使用不同的线程分别来处理，充分利用处理器的多核特性。</p><p><code>pthread</code>（<code>POSIX thread</code>）是<code>Linux</code>提供的一套兼容<code>POSIX</code>接口的线程库，是常用的线程库。</p><h2 id="1-线程创建"><a href="#1-线程创建" class="headerlink" title="1. 线程创建"></a>1. 线程创建</h2><p>线程创建接口：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;pthread.h></span></span><span class="token keyword">int</span> <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token class-name">pthread_t</span> <span class="token operator">*</span>thread<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token class-name">pthread_attr_t</span> <span class="token operator">*</span>attr<span class="token punctuation">,</span>                   <span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span>start_routine<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>arg<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>pthread_create</code>是<code>pthread</code>库的线程创建接口，使用这个接口需要包含<code>pthread.h</code>头文件。线程创建成功时返回0，失败时返回相应错误码。</p><p>各个参数的含义如下：</p><ul><li>thread 创建的线程的线程ID，用来唯一区别一个线程。</li><li>attr 线程属性</li><li>start_routine 线程执行函数</li><li>arg 要传递的参数</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">const</span> <span class="token class-name">size_t</span> threads <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token class-name">pthread_t</span> thread_arr<span class="token punctuation">[</span>threads<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">memset</span><span class="token punctuation">(</span>thread_arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> threads<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> retval <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">size_t</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> threads<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    retval <span class="token operator">=</span> <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>thread_arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> thread_handle<span class="token punctuation">,</span> <span class="token operator">&amp;</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>retval<span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"thread_arr i=%ld create failed.\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">usleep</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里我们创建10个线程，并使用一个数组<code>thread_arr</code>储存创建的好的线程的ID，用于后续的线程合并。</p><p><code>pthread_create</code>的第二个参数一般情况下设置为<code>NULL</code>,<code>thread_handle</code>就是要执行的线程函数，最后一个参数中传入<code>i</code>作为参数，若要传入多个参数可以使用结构体。</p><p>休眠5000微秒是为了完成线程中参数的复制，不然如果在参数完成复制前参数被改变，将会导致传入的参数错误。</p><h2 id="2-线程函数"><a href="#2-线程函数" class="headerlink" title="2. 线程函数"></a>2. 线程函数</h2><p>线程函数的函数签名需为<code>void* func(void* arg)</code>，即参数和返回值的类型都是void指针。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">thread_handle</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>arg<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i          <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span>arg<span class="token punctuation">;</span>    <span class="token class-name">pthread_t</span> <span class="token operator">*</span>pid <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">pthread_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token class-name">pthread_t</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">*</span>pid           <span class="token operator">=</span> <span class="token function">pthread_self</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"run thread id=%ld, i=%d\n"</span><span class="token punctuation">,</span> <span class="token operator">*</span>pid<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">pthread_exit</span><span class="token punctuation">(</span>pid<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在线程函数中，我们先复制了传入的参数；因为参数是指针，为了防止参数被改变，应先在参数在main中被改变前拷贝一份到当前线程。</p><p>函数中分配了一份内存来存放线程的ID。因为要返回的是一个指针，如果返回的是一个指向栈对象的指针，线程退出后临时对象会被释放，当我们获取时，获取到的就是一个错误或不存在的值。当然也可以使用全局变量传递返回值。</p><p>在这里我们使用<code>pthread_exit</code>来退出线程并返回相应的值。<code>pthread_exit</code>的定义如下：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;pthread.h></span></span><span class="token keyword">void</span> <span class="token function">pthread_exit</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>retval<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>除了使用上述函数来退出外，还可以使用<code>return</code>语句，或<code>exit</code>，<code>pthread_cancel</code>。</p><h2 id="3-线程合并"><a href="#3-线程合并" class="headerlink" title="3. 线程合并"></a>3. 线程合并</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token operator">*</span>thret<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> threads<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>thread_arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">pthread_join</span><span class="token punctuation">(</span>thread_arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>thret<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"thread_arr[%d] return %ld.\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token class-name">pthread_t</span> <span class="token operator">*</span><span class="token punctuation">)</span>thret<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">free</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">pthread_t</span> <span class="token operator">*</span><span class="token punctuation">)</span>thret<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们使用<code>pthread_join</code>接口等待线程执行完毕，并获取返回值。函数的定义如下：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;pthread.h></span></span><span class="token keyword">int</span> <span class="token function">pthread_join</span><span class="token punctuation">(</span><span class="token class-name">pthread_t</span> thread<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span><span class="token operator">*</span>retval<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>第一个参数为要等待的线程ID，第二个参数为线程的返回值。还要注意释放在线程中分配的用来储存返回值的内存。</p><h2 id="4-完整示例"><a href="#4-完整示例" class="headerlink" title="4. 完整示例"></a>4. 完整示例</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;pthread.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">thread_handle</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>arg<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span>arg<span class="token punctuation">;</span>    <span class="token class-name">pthread_t</span><span class="token operator">*</span> pid <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token class-name">pthread_t</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">*</span>pid <span class="token operator">=</span> <span class="token function">pthread_self</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"run thread id=%ld, i=%d\n"</span><span class="token punctuation">,</span> <span class="token operator">*</span>pid<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">pthread_exit</span><span class="token punctuation">(</span>pid<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token keyword">const</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> <span class="token class-name">size_t</span> threads <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token class-name">pthread_t</span> thread_arr<span class="token punctuation">[</span>threads<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>thread_arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> threads<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> retval <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">size_t</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> threads<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        retval <span class="token operator">=</span> <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>thread_arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> thread_handle<span class="token punctuation">,</span> <span class="token operator">&amp;</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>retval<span class="token punctuation">)</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"thread_arr i=%ld create failed.\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">usleep</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">void</span><span class="token operator">*</span> thret<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> threads<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>thread_arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">pthread_join</span><span class="token punctuation">(</span>thread_arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>thret<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"thread_arr[%d] return %ld.\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token class-name">pthread_t</span><span class="token operator">*</span><span class="token punctuation">)</span>thret<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">free</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">pthread_t</span><span class="token operator">*</span><span class="token punctuation">)</span>thret<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"main exit.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编译执行：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ gcc pthread2.c -lpthread$ ./a.out run thread <span class="token assign-left variable">id</span><span class="token operator">=</span><span class="token number">140000393443072</span>, <span class="token assign-left variable">i</span><span class="token operator">=</span><span class="token number">0</span>run thread <span class="token assign-left variable">id</span><span class="token operator">=</span><span class="token number">140000384939776</span>, <span class="token assign-left variable">i</span><span class="token operator">=</span><span class="token number">1</span>run thread <span class="token assign-left variable">id</span><span class="token operator">=</span><span class="token number">140000376547072</span>, <span class="token assign-left variable">i</span><span class="token operator">=</span><span class="token number">2</span>run thread <span class="token assign-left variable">id</span><span class="token operator">=</span><span class="token number">140000297481984</span>, <span class="token assign-left variable">i</span><span class="token operator">=</span><span class="token number">3</span>run thread <span class="token assign-left variable">id</span><span class="token operator">=</span><span class="token number">140000289089280</span>, <span class="token assign-left variable">i</span><span class="token operator">=</span><span class="token number">4</span>run thread <span class="token assign-left variable">id</span><span class="token operator">=</span><span class="token number">140000280696576</span>, <span class="token assign-left variable">i</span><span class="token operator">=</span><span class="token number">5</span>run thread <span class="token assign-left variable">id</span><span class="token operator">=</span><span class="token number">140000272303872</span>, <span class="token assign-left variable">i</span><span class="token operator">=</span><span class="token number">6</span>run thread <span class="token assign-left variable">id</span><span class="token operator">=</span><span class="token number">140000263911168</span>, <span class="token assign-left variable">i</span><span class="token operator">=</span><span class="token number">7</span>run thread <span class="token assign-left variable">id</span><span class="token operator">=</span><span class="token number">140000255518464</span>, <span class="token assign-left variable">i</span><span class="token operator">=</span><span class="token number">8</span>run thread <span class="token assign-left variable">id</span><span class="token operator">=</span><span class="token number">140000247125760</span>, <span class="token assign-left variable">i</span><span class="token operator">=</span><span class="token number">9</span>thread_arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token builtin class-name">return</span> <span class="token number">140000393443072</span>.thread_arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token builtin class-name">return</span> <span class="token number">140000384939776</span>.thread_arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token builtin class-name">return</span> <span class="token number">140000376547072</span>.thread_arr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token builtin class-name">return</span> <span class="token number">140000297481984</span>.thread_arr<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token builtin class-name">return</span> <span class="token number">140000289089280</span>.thread_arr<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token builtin class-name">return</span> <span class="token number">140000280696576</span>.thread_arr<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token builtin class-name">return</span> <span class="token number">140000272303872</span>.thread_arr<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token builtin class-name">return</span> <span class="token number">140000263911168</span>.thread_arr<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token builtin class-name">return</span> <span class="token number">140000255518464</span>.thread_arr<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span> <span class="token builtin class-name">return</span> <span class="token number">140000247125760</span>.main exit.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编译的时候注意需要链接<code>pthread</code>库。否则不能使用相关的接口。可以看到，线程的ID和传入的参数都被线程正确打印出来了，返回的线程ID也获取并打印。</p><h2 id="5-后话"><a href="#5-后话" class="headerlink" title="5. 后话"></a>5. 后话</h2><p>关于多线程有很多的内容，比如线程分离，线程属性，线程同步等。这里只是一个简单的多线程示例。</p><p>实力有限，代码仅供参考，如有错误或不合适的地方欢迎提出讨论。</p>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pthread </tag>
            
            <tag> Multithreading </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>top命令输出简介</title>
      <link href="/top%E5%91%BD%E4%BB%A4%E8%BE%93%E5%87%BA%E7%AE%80%E4%BB%8B.html"/>
      <url>/top%E5%91%BD%E4%BB%A4%E8%BE%93%E5%87%BA%E7%AE%80%E4%BB%8B.html</url>
      
        <content type="html"><![CDATA[<h4 id="top命令输出"><a href="#top命令输出" class="headerlink" title="top命令输出"></a>top命令输出</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">top</span> - 09:14:21 up <span class="token number">26</span> min,  <span class="token number">1</span> user,  load average: <span class="token number">0.45</span>, <span class="token number">0.50</span>, <span class="token number">0.64</span>任务: <span class="token number">267</span> total,   <span class="token number">2</span> running, <span class="token number">264</span> sleeping,   <span class="token number">0</span> stopped,   <span class="token number">1</span> zombie%Cpu<span class="token punctuation">(</span>s<span class="token punctuation">)</span>:  <span class="token number">4.0</span> us,  <span class="token number">1.9</span> sy,  <span class="token number">0.0</span> ni, <span class="token number">93.7</span> id,  <span class="token number">0.1</span> wa,  <span class="token number">0.0</span> hi,  <span class="token number">0.3</span> si,  <span class="token number">0.0</span> stMiB Mem <span class="token builtin class-name">:</span>  <span class="token number">15849.1</span> total,  <span class="token number">10277.2</span> free,   <span class="token number">1976.5</span> used,   <span class="token number">3595.5</span> buff/cacheMiB Swap:   <span class="token number">2048.0</span> total,   <span class="token number">2048.0</span> free,      <span class="token number">0.0</span> used.  <span class="token number">13266.3</span> avail Mem  进程号 <span class="token environment constant">USER</span>      PR  NI    VIRT    RES    SHR    %CPU  %MEM     TIME+ COMMAND                          <span class="token number">2479</span> ngx       <span class="token number">20</span>   <span class="token number">0</span> <span class="token number">5246028</span> <span class="token number">317628</span> <span class="token number">123120</span> S   <span class="token number">5.0</span>   <span class="token number">2.0</span>   <span class="token number">0</span>:55.14 gnome-shell                      <span class="token number">2318</span> ngx       <span class="token number">20</span>   <span class="token number">0</span>  <span class="token number">912536</span> <span class="token number">123160</span>  <span class="token number">89152</span> S   <span class="token number">4.7</span>   <span class="token number">0.8</span>   <span class="token number">0</span>:29.59 Xorg<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="第一行"><a href="#第一行" class="headerlink" title="第一行"></a>第一行</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">top</span> - 09:14:21 up <span class="token number">26</span> min,  <span class="token number">1</span> user,  load average: <span class="token number">0.45</span>, <span class="token number">0.50</span>, <span class="token number">0.64</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>top：当前时间</li><li>up：机器运行了多少时间</li><li>users：当前有多少用户</li><li>load average：分别是过去1分钟，5分钟，15分钟的负载</li></ul><p>一个CPU在一个时间片里面只能运行一个进程，CPU核数的多少直接影响到这台机器在同时间能运行的进程数。所以一般来说Load Average的数值别超过这台机器的总核数，就基本没啥问题。</p><h4 id="第二行"><a href="#第二行" class="headerlink" title="第二行"></a>第二行</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">任务: <span class="token number">267</span> total,   <span class="token number">2</span> running, <span class="token number">264</span> sleeping,   <span class="token number">0</span> stopped,   <span class="token number">1</span> zombie<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>Tasks：当前有多少进程</li><li>running：正在运行的进程</li><li>sleeping：正在休眠的进程</li><li>stopped：停止的进程</li><li>zombie：僵尸进程</li></ul><p>running越多，服务器自然压力越大。</p><h4 id="第三行"><a href="#第三行" class="headerlink" title="第三行"></a>第三行</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">%Cpu<span class="token punctuation">(</span>s<span class="token punctuation">)</span>:  <span class="token number">4.0</span> us,  <span class="token number">1.9</span> sy,  <span class="token number">0.0</span> ni, <span class="token number">93.7</span> id,  <span class="token number">0.1</span> wa,  <span class="token number">0.0</span> hi,  <span class="token number">0.3</span> si,  <span class="token number">0.0</span> st<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>us: 用户进程占用的CPU时间百分比</li><li>sy: 系统进程占用的CPU时间百分比</li><li>ni: 运行niced用户进程的时间百分比</li><li>id: 空闲CPU时间百分比</li><li>wa: 等待输入输出的CPU时间百分比</li><li>hi: 硬件的中断请求时间百分比</li><li>si: 软件的中断请求时间百分比</li><li>st: hypervisor从当前vm偷取的CPU时间百分比</li></ul><h4 id="第四行"><a href="#第四行" class="headerlink" title="第四行"></a>第四行</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">MiB Mem <span class="token builtin class-name">:</span>  <span class="token number">15849.1</span> total,  <span class="token number">10277.2</span> free,   <span class="token number">1976.5</span> used,   <span class="token number">3595.5</span> buff/cache<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>total：内存总量</li><li>free：空闲内存</li><li>used：使用的</li><li>buffer/cache：写缓存/读缓存</li></ul><p>第四第五行分别是内存信息和swap信息。所有程序的运行都是在内存中进行的，所以内存的性能对与服务器来说非常重要。不过当内存的free变少的时候，其实我们并不需要太紧张。真正需要看的是Swap中的used信息。Swap分区是由硬盘提供的交换区，当物理内存不够用的时候，操作系统才会把暂时不用的数据放到Swap中。所以当这个数值变高的时候，说明内存是真的不够用了。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">PID <span class="token environment constant">USER</span>      PR  NI    VIRT    RES    SHR    %CPU  %MEM     TIME+ COMMAND<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>PR - 优先级</p><p>RES - 驻留内存大小（KiB）</p><p>NI - nice value</p><p>SHR - 共享内存大小（KiB）</p><p>S - 进程状态</p><ul><li>D 不间断睡眠</li><li>I 空闲</li><li>R 运行</li><li>S 睡眠</li><li>T 由控制信息引起的停止</li><li>t 因调试引起的停止</li><li>Z 僵尸进程</li></ul><p>VIRT - 进程使用的全部的虚拟内存大小。</p>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> top </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NC(netcat的使用)</title>
      <link href="/NC-netcat%E7%9A%84%E4%BD%BF%E7%94%A8.html"/>
      <url>/NC-netcat%E7%9A%84%E4%BD%BF%E7%94%A8.html</url>
      
        <content type="html"><![CDATA[<h3 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h3><p>网络工具中的瑞士军刀。</p><p>需要注意的是nc有两个版本，全功能版有-c和-e参数，而阉割版没有。</p><p>安装：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># apt install netcat</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看帮助：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">nc</span> -h<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-Telenet（远程登录服务）功能"><a href="#2-Telenet（远程登录服务）功能" class="headerlink" title="2.Telenet（远程登录服务）功能"></a>2.Telenet（远程登录服务）功能</h3><p>nc可以检测相应的IP和端口上有没有开启某项服务。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># nc -nv 172.30.18.253 22</span>Connection to <span class="token number">172.30</span>.18.253 <span class="token number">22</span> port <span class="token punctuation">[</span>tcp/*<span class="token punctuation">]</span> succeeded<span class="token operator">!</span>SSH-2.0-OpenSSH<span class="token comment"># nc -nv 172.17.0.3 22</span>nc: connect to <span class="token number">172.17</span>.0.3 port <span class="token number">22</span> <span class="token punctuation">(</span>tcp<span class="token punctuation">)</span> failed: Connection refused<span class="token comment"># nc -nv 172.30.18.253 80</span>nc: connect to <span class="token number">172.30</span>.18.253 port <span class="token number">80</span> <span class="token punctuation">(</span>tcp<span class="token punctuation">)</span> failed: Connection refused<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过以上操作，可以检测对应主机有没有在22端口开启ssh或开启80端口。</p><ul><li>-n 跟IP地址</li><li>-v 显示详细信息</li></ul><h3 id="3-文本传输功能"><a href="#3-文本传输功能" class="headerlink" title="3.文本传输功能"></a>3.文本传输功能</h3><p>host1充当服务器：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># nc -l -p 8888</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>-l 进入监听模式</li><li>-p 指定监听端口</li></ul><p>host2充当客户端进行连接，并发送消息：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># nc -nv 172.17.0.3 8888</span>Connection to <span class="token number">172.17</span>.0.3 <span class="token number">8888</span> port <span class="token punctuation">[</span>tcp/*<span class="token punctuation">]</span> succeeded<span class="token operator">!</span><span class="token number">123</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>host1接收到消息：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># nc -l -p 8888</span><span class="token number">123</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>host1发送消息<code>456</code>:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># nc -l -p 8888</span><span class="token number">123</span><span class="token number">456</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>host2接受到信息：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># nc -nv 172.17.0.3 8888</span>Connection to <span class="token number">172.17</span>.0.3 <span class="token number">8888</span> port <span class="token punctuation">[</span>tcp/*<span class="token punctuation">]</span> succeeded<span class="token operator">!</span><span class="token number">123</span><span class="token number">456</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>host2可以向服务器端发送任意文本信息：</p><pre class="line-numbers language-none"><code class="language-none">$ cat xxx.txt | nc -nv 172.17.0.3 8888<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>UDP端口：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># nc -lu 8888    // server</span><span class="token comment"># nc -nvu 172.17.0.2 8888// client</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="4-文件传输功能"><a href="#4-文件传输功能" class="headerlink" title="4.文件传输功能"></a>4.文件传输功能</h3><p>（1）客户端向服务端传输</p><p>服务器端将监听内容保存为1.txt</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># nc -l -p 8888 > 1.txt</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>客户端传输文件，如xxx.txt</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># nc -nv 172.17.0.2 8888 &lt; xxx.txt -q 1</span>Connection to <span class="token number">172.17</span>.0.2 <span class="token number">8888</span> port <span class="token punctuation">[</span>tcp/*<span class="token punctuation">]</span> succeeded<span class="token operator">!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>-q 1 传递结束后1s退出</li></ul><p>可以传输其他类型的文件，不一定是文本文件。</p><p>（2）服务器端向客户端传输文件</p><p>服务器端传输任意文件：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># nc -l -p 8888 &lt; 1.txt</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>客户端接收文件：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># nc -nv 172.17.0.2 8888 > 2.txt             </span>Connection to <span class="token number">172.17</span>.0.2 <span class="token number">8888</span> port <span class="token punctuation">[</span>tcp/*<span class="token punctuation">]</span> succeeded<span class="token operator">!</span>^Croot@84ce80b48c2a:~<span class="token comment"># cat 2.txt </span>asndkasadsado<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>(3)传输目录</p><p>传输目录和传输文件一样，只需要先将文件用tar打包即可。</p><h3 id="5-端口扫描"><a href="#5-端口扫描" class="headerlink" title="5.端口扫描"></a>5.端口扫描</h3><p>NC还可以对目标主机进行端口扫描</p><p>（1）扫描tcp端口</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># nc -vz 172.17.0.2 1-1024</span>nc: connect to <span class="token number">172.17</span>.0.2 port <span class="token number">21</span> <span class="token punctuation">(</span>tcp<span class="token punctuation">)</span> failed: Connection refusedConnection to <span class="token number">172.17</span>.0.2 <span class="token number">22</span> port <span class="token punctuation">[</span>tcp/*<span class="token punctuation">]</span> succeeded<span class="token operator">!</span>nc: connect to <span class="token number">172.17</span>.0.2 port <span class="token number">79</span> <span class="token punctuation">(</span>tcp<span class="token punctuation">)</span> failed: Connection refusedConnection to <span class="token number">172.17</span>.0.2 <span class="token number">80</span> port <span class="token punctuation">[</span>tcp/*<span class="token punctuation">]</span> succeeded<span class="token operator">!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>-z 使用扫描模式</li></ul><p>（2）扫描UDP端口</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># nc -vzu 172.17.0.2 1-1024</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="6-克隆硬盘"><a href="#6-克隆硬盘" class="headerlink" title="6.克隆硬盘"></a>6.克隆硬盘</h3><p>接收端先监听，并设置克隆硬盘：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># nc -l -p 8888 | dd of=/dev/sdc</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>目标服务器，克隆本地sda硬盘：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># dd if=/dev/sda | nc -nv 172.17.0.2 8888 -q 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="7-远程控制"><a href="#7-远程控制" class="headerlink" title="7.远程控制"></a>7.远程控制</h3><p>服务器端：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># mkfifo /tmp/f</span><span class="token comment"># cat /tmp/f | /bin/bash -i 2>&amp;1 | nc -l 8888 > /tmp/f</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>客户端连接之后可以直接输入shell指令,效果类似ssh：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@84ce80b48c2a:~<span class="token comment"># nc 172.17.0.2 8888</span>root@be06bac03f87:/<span class="token comment"># ls</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="8-请求网站"><a href="#8-请求网站" class="headerlink" title="8.请求网站"></a>8.请求网站</h3><p>手动使用HTTP协议请求百度。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># printf "GET / HTTP/1.0\r\n\r\n" | nc baidu.com 80</span>HTTP/1.1 <span class="token number">200</span> OKDate: Wed, 06 Jan <span class="token number">2021</span> 05:51:36 GMTServer: ApacheLast-Modified: Tue, <span class="token number">12</span> Jan <span class="token number">2010</span> <span class="token number">13</span>:48:00 GMTETag: <span class="token string">"51-47cf7e6ee8400"</span>Accept-Ranges: bytesContent-Length: <span class="token number">81</span>Cache-Control: max-age<span class="token operator">=</span><span class="token number">86400</span>Expires: Thu, 07 Jan <span class="token number">2021</span> 05:51:36 GMTConnection: CloseContent-Type: text/html<span class="token operator">&lt;</span>html<span class="token operator">></span><span class="token operator">&lt;</span>meta http-equiv<span class="token operator">=</span><span class="token string">"refresh"</span> <span class="token assign-left variable">content</span><span class="token operator">=</span><span class="token string">"0;url=http://www.baidu.com/"</span><span class="token operator">></span><span class="token operator">&lt;</span>/html<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NC </tag>
            
            <tag> netcat </tag>
            
            <tag> network </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>杂七杂八</title>
      <link href="/%E6%9D%82%E4%B8%83%E6%9D%82%E5%85%AB.html"/>
      <url>/%E6%9D%82%E4%B8%83%E6%9D%82%E5%85%AB.html</url>
      
        <content type="html"><![CDATA[<h2 id="strcpy-和-strncpy"><a href="#strcpy-和-strncpy" class="headerlink" title="strcpy 和 strncpy"></a>strcpy 和 strncpy</h2><p><code>strcpy</code> 和 <code>strncpy</code> 复制字符串时，如果字符串中间有’\0’， 将会使字符串复制提前终止，<br>这种情况下，最好使用<code>memcpy</code>代替.</p><h2 id="指针数组和数组指针"><a href="#指针数组和数组指针" class="headerlink" title="指针数组和数组指针"></a>指针数组和数组指针</h2><p><code>[]</code> 的优先级高于<code>*</code><br>指针数组：int *p[8]     – 数组元素为指针的数组，本质为数组。<br>数组指针：int (*p)[8]   – 指向数组首元素的地址的指针，本质为指针。</p><h2 id="npm-加速"><a href="#npm-加速" class="headerlink" title="npm 加速"></a>npm 加速</h2><p>设置源为国内的淘宝源</p><pre class="line-numbers language-none"><code class="language-none"># npm config set registry https:&#x2F;&#x2F;registry.npm.taobao.org<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="内核并发管理"><a href="#内核并发管理" class="headerlink" title="内核并发管理"></a>内核并发管理</h2><pre><code>信号量：asm/semaphore.h struct semaphore读写信号量：linux/rwsem.h struct rw_semaphore条件变量：linux/completion.h struct completion自旋锁：linux/spinlock.h spinlock_t读写自旋锁：linux/spinlock.h rwlock_t原子变量：asm/atomic.h atomic_t原子位操作：asm/bitops.h seqlock 锁：linux/seqlock.hRCU：linux/rcupdate.h内存屏障：linux/kernel.h void barrier(void) asm/system.h void rmb(void);</code></pre><h2 id="阻塞-非阻塞，同步-异步"><a href="#阻塞-非阻塞，同步-异步" class="headerlink" title="阻塞/非阻塞，同步/异步"></a>阻塞/非阻塞，同步/异步</h2><p>阻塞和非阻塞的主体是被调函数。<br>    阻塞：调用我（函数），我（函数）没有接受完收据或着没有得到结果之前，我不会返回。<br>    非阻塞：调用我（函数），我立即返回，通过select通知调用者。</p><p>同步和异步的主体是主调函数。<br>    同步：我调用一个函数，该函数没有结束前，我死等结果。<br>    异步：我调用一个函数，现在不需要知道函数的结果，函数有结果后通知我。</p><h2 id="输出C-类结构"><a href="#输出C-类结构" class="headerlink" title="输出C++类结构"></a>输出C++类结构</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">$ g<span class="token operator">++</span> <span class="token operator">-</span>fdump<span class="token operator">-</span>lang<span class="token operator">-</span><span class="token keyword">class</span> <span class="token class-name">main</span><span class="token punctuation">.</span>cc <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="查看编译器所支持的全部指令集"><a href="#查看编译器所支持的全部指令集" class="headerlink" title="查看编译器所支持的全部指令集"></a>查看编译器所支持的全部指令集</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ gcc -c -Q -march<span class="token operator">=</span>native --help<span class="token operator">=</span>target<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中 -march=native 选项将使用 CPUID 指令获取编译机器的 CPU 信息。</p><h2 id="UBUNTU添加测试仓库"><a href="#UBUNTU添加测试仓库" class="headerlink" title="UBUNTU添加测试仓库"></a>UBUNTU添加测试仓库</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">sudo</span> add-apt-repository ppa:ubuntu-toolchain-r/test<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">apt 签名验证失败无法update等，gpg不可用时：source.list deb后加上：[trusted&#x3D;yes]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>Windows 语言包 ttf-mscorefonts-installer</p><h2 id="tmux色彩支持"><a href="#tmux色彩支持" class="headerlink" title="tmux色彩支持"></a>tmux色彩支持</h2><p>将以下配置信息添加到<code>~/.tmux.conf</code>文件</p><pre class="line-numbers language-none"><code class="language-none">setw -g mouse onset -g default-terminal &quot;screen-256color&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="根据PID获取用户名"><a href="#根据PID获取用户名" class="headerlink" title="根据PID获取用户名"></a>根据PID获取用户名</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;pwd.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/stat.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token keyword">static</span> <span class="token keyword">int</span> pid <span class="token operator">=</span> <span class="token number">3549</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> path<span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">snprintf</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">,</span> <span class="token string">"/proc/%d"</span><span class="token punctuation">,</span> pid<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">stat</span> stat_buf<span class="token punctuation">;</span>    <span class="token function">stat</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token operator">&amp;</span>stat_buf<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">passwd</span><span class="token operator">*</span> pwd<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pwd <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"aaaa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    pwd <span class="token operator">=</span> <span class="token function">getpwuid</span><span class="token punctuation">(</span>stat_buf<span class="token punctuation">.</span>st_uid<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> username<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">strncpy</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span> pwd<span class="token operator">-></span>pw_name<span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> username<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="网页跳转"><a href="#网页跳转" class="headerlink" title="网页跳转"></a>网页跳转</h2><pre class="line-numbers language-h5" data-language="h5"><code class="language-h5">&lt;!-- index.html --&gt;&lt;iframe src&#x3D;&quot;https:&#x2F;&#x2F;nongguangxin.gitee.io&quot; frameborder&#x3D;&quot;0&quot; height&#x3D;&quot;100%&quot; width&#x3D;&quot;100%&quot;&gt;&lt;&#x2F;iframe&gt;&lt;style&gt;    body &#123;        margin: 0;    &#125;&lt;&#x2F;style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="MD转PDF"><a href="#MD转PDF" class="headerlink" title="MD转PDF"></a>MD转PDF</h2><ol><li>安装工具</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> pandoc texlive-xetex<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>将windows中后缀为ttf的中文字体复制到Linux</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">cp</span> *.ttf /usr/share/fonts/windows/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>更新字体缓存</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ fc-cache -fv<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="4"><li>查看支持的字体</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ fc-list :lang<span class="token operator">=</span>zh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="5"><li>转换<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ pandoc apreface-chinese.md --pdf-engine<span class="token operator">=</span>xelatex -o out.pdf -V <span class="token assign-left variable">CJKmainfont</span><span class="token operator">=</span><span class="token string">"SimHei"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h2 id="dpkg"><a href="#dpkg" class="headerlink" title="dpkg"></a>dpkg</h2><p> 删除已卸载软件的配置文件：sudo dpkg -l | grep “^rc” | awk ‘{print $2}’ | xargs sudo apt -y purge</p><h2 id="Asan-代码分析-gcc错误高亮-预定于宏"><a href="#Asan-代码分析-gcc错误高亮-预定于宏" class="headerlink" title="Asan 代码分析, gcc错误高亮, 预定于宏"></a>Asan 代码分析, gcc错误高亮, 预定于宏</h2><p>使用ASan时，只需gcc选项加上-fsanitize=address选项</p><p>gcc错误高亮：-fdiagnostics-color</p><p>输出预定义宏：gcc -dM -E - &lt; /dev/null  </p><h2 id="PySide6-in-WSLg"><a href="#PySide6-in-WSLg" class="headerlink" title="PySide6 in WSLg"></a>PySide6 in WSLg</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> libopengl0 libegl1 libxkbcommon0 libwayland-dev<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker日常操作</title>
      <link href="/docker%E6%97%A5%E5%B8%B8%E6%93%8D%E4%BD%9C.html"/>
      <url>/docker%E6%97%A5%E5%B8%B8%E6%93%8D%E4%BD%9C.html</url>
      
        <content type="html"><![CDATA[<h3 id="1-从阿里云源安装docker"><a href="#1-从阿里云源安装docker" class="headerlink" title="-1. 从阿里云源安装docker"></a>-1. 从阿里云源安装docker</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># step 1: 安装必要的一些系统工具</span><span class="token function">sudo</span> <span class="token function">apt-get</span> update<span class="token function">sudo</span> <span class="token function">apt-get</span> -y <span class="token function">install</span> apt-transport-https ca-certificates <span class="token function">curl</span> software-properties-common<span class="token comment"># step 2: 安装GPG证书</span><span class="token function">curl</span> -fsSL https://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg <span class="token operator">|</span> <span class="token function">sudo</span> apt-key <span class="token function">add</span> -<span class="token comment"># Step 3: 写入软件源信息</span><span class="token function">sudo</span> add-apt-repository <span class="token string">"deb [arch=amd64] https://mirrors.aliyun.com/docker-ce/linux/ubuntu <span class="token variable"><span class="token variable">$(</span>lsb_release -cs<span class="token variable">)</span></span> stable"</span><span class="token comment"># Step 4: 更新并安装Docker-CE</span><span class="token function">sudo</span> <span class="token function">apt-get</span> -y update<span class="token function">sudo</span> <span class="token function">apt-get</span> -y <span class="token function">install</span> docker-ce<span class="token comment"># 加入并更新用户组</span><span class="token function">sudo</span> gpasswd -a <span class="token environment constant">$USER</span> <span class="token function">docker</span>newgrp <span class="token function">docker</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="0-设置aliyun镜像加速"><a href="#0-设置aliyun镜像加速" class="headerlink" title="0. 设置aliyun镜像加速"></a>0. 设置aliyun镜像加速</h3><p>没有此文件则创建。输入从阿里云注册的自己的<a href="https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors">镜像加速器</a>。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">mkdir</span> -p /etc/docker$ <span class="token function">sudo</span> <span class="token function">tee</span> /etc/docker/daemon.json <span class="token operator">&lt;&lt;-</span><span class="token string">'EOF'&#123;  "registry-mirrors": ["https://xxxxxxxx.mirror.aliyuncs.com"]&#125;EOF</span>$ <span class="token function">sudo</span> systemctl daemon-reload$ <span class="token function">sudo</span> systemctl restart <span class="token function">docker</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-根据Dockerfile构建镜像"><a href="#1-根据Dockerfile构建镜像" class="headerlink" title="1. 根据Dockerfile构建镜像"></a>1. 根据Dockerfile构建镜像</h3><p>在Dockerfile所在目录执行， 建议为空目录。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> build -t <span class="token operator">&lt;</span>image name<span class="token operator">></span> <span class="token builtin class-name">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-创建-运行容器"><a href="#2-创建-运行容器" class="headerlink" title="2. 创建/运行容器"></a>2. 创建/运行容器</h3><p>创建使用<code>docker create</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> run -d --name <span class="token operator">&lt;</span>container name<span class="token operator">></span> <span class="token operator">&lt;</span>image name<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> run -itd -p <span class="token operator">&lt;</span>host port<span class="token operator">></span>:<span class="token operator">&lt;</span>docker port<span class="token operator">></span> --name<span class="token operator">=</span><span class="token operator">&lt;</span>name<span class="token operator">></span> <span class="token operator">&lt;</span>image name<span class="token operator">></span> /bin/bash<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-登录容器"><a href="#3-登录容器" class="headerlink" title="3. 登录容器"></a>3. 登录容器</h3><p>登录运行中的容器。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> <span class="token builtin class-name">exec</span> -it <span class="token operator">&lt;</span>container name<span class="token operator">></span> <span class="token function">bash</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-查看容器的信息信息"><a href="#4-查看容器的信息信息" class="headerlink" title="4. 查看容器的信息信息"></a>4. 查看容器的信息信息</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> inspect <span class="token operator">&lt;</span>container name<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="5-删除不在运行的容器和不用的镜像"><a href="#5-删除不在运行的容器和不用的镜像" class="headerlink" title="5. 删除不在运行的容器和不用的镜像"></a>5. 删除不在运行的容器和不用的镜像</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> system prune<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="6-网络"><a href="#6-网络" class="headerlink" title="6. 网络"></a>6. 网络</h3><p>查看网络模式</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> network list<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>创建网桥</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> network create --subnet<span class="token operator">=</span>x.x.x.0/24 <span class="token operator">&lt;</span>Bridge Name<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>删除网桥</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> network <span class="token function">rm</span> <span class="token operator">&lt;</span>Bridge Name<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>指定IP</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> run -itd --network<span class="token operator">=</span><span class="token operator">&lt;</span>Bridge Name<span class="token operator">></span> --ip <span class="token operator">&lt;</span>IP<span class="token operator">></span> --name <span class="token operator">&lt;</span>dockerName<span class="token operator">></span> <span class="token operator">&lt;</span>imageName<span class="token operator">></span> <span class="token function">bash</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>值得注意的是：网络段不要和主机网络段冲突，要不然会影响宿主机.</p><h3 id="7-一个自用Dockerfile"><a href="#7-一个自用Dockerfile" class="headerlink" title="7. 一个自用Dockerfile"></a>7. 一个自用Dockerfile</h3><p>实现的主要需求有：</p><ul><li>能比较简单地设置操作系统版本</li><li>比较简单地设置国内源</li><li>可以安装ssh并进行设置，开启容器后就可以直接ssh连上</li><li>添加了一个普通用户</li></ul><pre class="line-numbers language-dockerfile" data-language="dockerfile"><code class="language-dockerfile">FROM ubuntu:21.04ARG VERSION&#x3D;hirsuteARG MIRRORS&#x3D;http:&#x2F;&#x2F;mirrors.163.comRUN cp &#x2F;etc&#x2F;apt&#x2F;sources.list &#x2F;etc&#x2F;apt&#x2F;sources.list.bak \&amp;&amp; echo &quot;deb $MIRRORS&#x2F;ubuntu&#x2F; $VERSION main restricted universe multiverse&quot; &gt;&#x2F;etc&#x2F;apt&#x2F;sources.list \&amp;&amp; echo &quot;deb $MIRRORS&#x2F;ubuntu&#x2F; $VERSION-security main restricted universe multiverse&quot; &gt;&gt; &#x2F;etc&#x2F;apt&#x2F;sources.list \&amp;&amp; echo &quot;deb $MIRRORS&#x2F;ubuntu&#x2F; $VERSION-updates main restricted universe multiverse&quot; &gt;&gt; &#x2F;etc&#x2F;apt&#x2F;sources.list \&amp;&amp; apt-get update &amp;&amp; apt-get upgrade -y &gt; &#x2F;dev&#x2F;null \&amp;&amp; apt-get install -y sudo vim openssh-server &gt; &#x2F;dev&#x2F;null \\&amp;&amp; mkdir -p &#x2F;var&#x2F;run&#x2F;sshd \&amp;&amp; mkdir -p &#x2F;root&#x2F;.ssh \&amp;&amp; sed -ri &#39;s&#x2F;^#?PermitRootLogin\s+.*&#x2F;PermitRootLogin yes&#x2F;&#39; &#x2F;etc&#x2F;ssh&#x2F;sshd_config \&amp;&amp; sed -ri &#39;s&#x2F;UsePAM yes&#x2F;UsePAM no&#x2F;&#39; &#x2F;etc&#x2F;ssh&#x2F;sshd_config \&amp;&amp; &#x2F;etc&#x2F;init.d&#x2F;ssh start \\&amp;&amp; apt-get autoclean &amp;&amp; apt-get autoremove &amp;&amp; apt-get clean &gt; &#x2F;dev&#x2F;null \&amp;&amp; rm -rf &#x2F;var&#x2F;lib&#x2F;apt&#x2F;lists&#x2F;* &#x2F;tmp&#x2F;* &#x2F;var&#x2F;tmp&#x2F;* \&amp;&amp; mkdir -p &#x2F;root&#x2F;code \&amp;&amp; echo &#39;root:root&#39; | chpasswd \\&amp;&amp; useradd --create-home --no-log-init --shell &#x2F;bin&#x2F;bash ngx \&amp;&amp; adduser ngx sudo \&amp;&amp; echo &#39;ngx:1&#39; | chpasswd# USER ngx# WORKDIR &#x2F;home&#x2F;ngxEXPOSE 22CMD [ &quot;&#x2F;usr&#x2F;sbin&#x2F;sshd&quot;, &quot;-D&quot; ]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果使用的是HTTPS的源，则需要在换源前提前安装<code>apt-transport-https</code>和<code>ca-certificates</code></p><h3 id="8-docker设置镜像存储路径"><a href="#8-docker设置镜像存储路径" class="headerlink" title="8.docker设置镜像存储路径"></a>8.docker设置镜像存储路径</h3><p>编辑文件<code>/lib/systemd/system/docker.service</code>，编辑以<code>ExecStart</code>开头的行，加入<code>--data-root /path</code>, 其中path为自定义的路径。修改如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">..</span>. <span class="token punctuation">..</span>.<span class="token assign-left variable">ExecStart</span><span class="token operator">=</span>/usr/bin/dockerd -H fd:// --containerd<span class="token operator">=</span>/run/containerd/containerd.sock --data-root /path<span class="token punctuation">..</span>. <span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>然后关闭docker守护进程，将相关文件移动到设置好的位置，再重启docker守护进程：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># systemctl stop docker</span><span class="token comment"># cp -r /var/lib/docker /path</span><span class="token comment"># systemctl daemon-reload</span><span class="token comment"># systemctl restart docker</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="9-设置vscode连接服务器中的容器"><a href="#9-设置vscode连接服务器中的容器" class="headerlink" title="9.设置vscode连接服务器中的容器"></a>9.设置vscode连接服务器中的容器</h3><p>编辑文件<code>/lib/systemd/system/docker.service</code>，编辑以<code>ExecStart</code>开头的行，加上<code>-H tcp://0.0.0.0:8888</code>,端口号可以设置为不冲突的其他值。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">ExecStart</span><span class="token operator">=</span>/usr/bin/dockerd -H fd:// --containerd<span class="token operator">=</span>/run/containerd/containerd.sock -H tcp://0.0.0.0:8888<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改保存后重启dockerd服务：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ systemctl daemon-reload$ <span class="token function">service</span> <span class="token function">docker</span> restart<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>vscode中安装Docker与Remote-Container插件，然后在设置中搜索<code>docker:host</code>，将上面设置(<code>tcp://0.0.0.0:8888</code>)的填入设置项。</p><p>重启vscode，点击左面板上的docker图标，就可以显示服务器上的docker镜像和容器，并进行相应的操作。</p><h3 id="10-导出和导入镜像"><a href="#10-导出和导入镜像" class="headerlink" title="10. 导出和导入镜像"></a>10. 导出和导入镜像</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 导出，导入镜像</span><span class="token function">docker</span> save -o save-name.tar image-name:tag<span class="token function">docker</span> load -i save-name.tar<span class="token comment"># 导出，导入容器</span><span class="token function">docker</span> <span class="token builtin class-name">export</span> -o save-name.tar container-name<span class="token function">docker</span> <span class="token function">import</span> save-name.tar name:tag<span class="token comment"># 提升为镜像</span><span class="token function">docker</span> commit -m<span class="token operator">=</span><span class="token string">"描述信息"</span> -a<span class="token operator">=</span><span class="token string">"作者"</span> 容器id 目标镜像名:<span class="token punctuation">[</span>TAG<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="12-其他"><a href="#12-其他" class="headerlink" title="12. 其他"></a>12. 其他</h3><p><strong>note</strong>：以上操作匀在Ubuntu2004上进行。</p><p>ssh相关操作</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">ssh</span> ngx@172.17.0.2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ ssh-keygen -t rsa -C <span class="token string">"your_email@example.com"</span>$ ssh-copy-id -i <span class="token operator">&lt;</span>identity_file<span class="token operator">></span> <span class="token punctuation">[</span>-p <span class="token operator">&lt;</span>port<span class="token operator">></span><span class="token punctuation">]</span> user@ip<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> Dockerfile </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>国密SM2 OpenSSL EVP接口例子</title>
      <link href="/%E5%9B%BD%E5%AF%86SM2-OpenSSL-EVP%E6%8E%A5%E5%8F%A3%E4%BE%8B%E5%AD%90.html"/>
      <url>/%E5%9B%BD%E5%AF%86SM2-OpenSSL-EVP%E6%8E%A5%E5%8F%A3%E4%BE%8B%E5%AD%90.html</url>
      
        <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>SM2是一个非对称加密算法。主要用于加解密，数字签名，秘钥协商。私钥长度为256位，公钥是SM2椭圆曲线上的一个点，由<code>（x, y）</code>两个分量表示，每个分量长度为256位。</p><h3 id="SM2加解密"><a href="#SM2加解密" class="headerlink" title="SM2加解密"></a>SM2加解密</h3><p>SM2加解密是由公钥进行加密，私钥进行解密。由于SM2加解密运算速度较慢，一般不用SM2进行大数据两加解密，而是由SM4来进行。而且OpenSSL也没有提供相关的EVP接口。</p><p>OpenSSL提供了简单易用的非对称加解密接口：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">EVP_PKEY_encrypt_init</span><span class="token punctuation">(</span>EVP_PKEY_CTX <span class="token operator">*</span>ctx<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">EVP_PKEY_encrypt</span><span class="token punctuation">(</span>EVP_PKEY_CTX <span class="token operator">*</span>ctx<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>out<span class="token punctuation">,</span> <span class="token class-name">size_t</span> <span class="token operator">*</span>outlen<span class="token punctuation">,</span>                     <span class="token keyword">const</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>in<span class="token punctuation">,</span> <span class="token class-name">size_t</span> inlen<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">EVP_PKEY_decrypt_init</span><span class="token punctuation">(</span>EVP_PKEY_CTX <span class="token operator">*</span>ctx<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">EVP_PKEY_decrypt</span><span class="token punctuation">(</span>EVP_PKEY_CTX <span class="token operator">*</span>ctx<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>out<span class="token punctuation">,</span> <span class="token class-name">size_t</span> <span class="token operator">*</span>outlen<span class="token punctuation">,</span>                     <span class="token keyword">const</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>in<span class="token punctuation">,</span> <span class="token class-name">size_t</span> inlen<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一个简单的使用例子：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// sm2_enc.c</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;openssl/evp.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;openssl/pem.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token comment">/** * @brief 生成SM2公钥和私钥文件 * * @param pri_file 私钥文件名 * @param pub_file 公钥文件名 * @return int 成功返回0，否则返回-1 */</span><span class="token keyword">int</span> <span class="token function">gen_key</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> pri_file<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> pub_file<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/** * @brief 从文件中读取秘钥。 * * @param key_file 公钥或私钥文件名 * @param type 0读取公钥，1读取私钥 * @return EVP_PKEY* 成功返回相应的秘钥，失败返回NULL */</span>EVP_PKEY<span class="token operator">*</span> <span class="token function">read_key_bio</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> key_file<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> type<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/** * @brief 加密数据 * * @param key 加密公钥 * @param out 加密密文 * @param in 要加密的数据 * @param inlen 数据长度 * @return size_t 密文长度 */</span><span class="token class-name">size_t</span> <span class="token function">do_encrypt</span><span class="token punctuation">(</span>EVP_PKEY<span class="token operator">*</span> key<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token operator">*</span> out<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token operator">*</span> in<span class="token punctuation">,</span>                  <span class="token class-name">size_t</span> inlen<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/** * @brief 解密数据 * * @param key 解密私钥 * @param out 解密后的数据 * @param in 要解密的数据 * @param inlen 数据长度 * @return size_t 解密后的数据长度 */</span><span class="token class-name">size_t</span> <span class="token function">do_decrypt</span><span class="token punctuation">(</span>EVP_PKEY<span class="token operator">*</span> key<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token operator">*</span> out<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token operator">*</span> in<span class="token punctuation">,</span>                  <span class="token class-name">size_t</span> inlen<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token keyword">const</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">size_t</span> ret<span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> pub_file <span class="token operator">=</span> <span class="token string">"/tmp/pub_key.pem"</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> pri_file <span class="token operator">=</span> <span class="token string">"/tmp/pri_key.pem"</span><span class="token punctuation">;</span>    <span class="token comment">// 生成公钥和私钥并写入文件中</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">gen_key</span><span class="token punctuation">(</span>pri_file<span class="token punctuation">,</span> pub_file<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"gen key failed."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 读取公钥和私钥</span>    EVP_PKEY<span class="token operator">*</span> pub_key <span class="token operator">=</span> <span class="token function">read_key_bio</span><span class="token punctuation">(</span>pub_file<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    EVP_PKEY<span class="token operator">*</span> pri_key <span class="token operator">=</span> <span class="token function">read_key_bio</span><span class="token punctuation">(</span>pri_file<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> data<span class="token punctuation">[</span><span class="token punctuation">]</span>          <span class="token operator">=</span> <span class="token string">"hello world !"</span><span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> enc_txt<span class="token punctuation">[</span>BUFSIZ<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> dec_txt<span class="token punctuation">[</span>BUFSIZ<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"data= %s\n"</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 公钥加密</span>    ret <span class="token operator">=</span> <span class="token function">do_encrypt</span><span class="token punctuation">(</span>pub_key<span class="token punctuation">,</span> enc_txt<span class="token punctuation">,</span> data<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"ret=%ld, enc= "</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">size_t</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> ret<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%2X"</span><span class="token punctuation">,</span> enc_txt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token comment">// 私钥解密</span>    ret <span class="token operator">=</span> <span class="token function">do_decrypt</span><span class="token punctuation">(</span>pri_key<span class="token punctuation">,</span> dec_txt<span class="token punctuation">,</span> enc_txt<span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>    dec_txt<span class="token punctuation">[</span>ret<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nret=%ld, dec= %s\n"</span><span class="token punctuation">,</span> ret<span class="token punctuation">,</span> dec_txt<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">EVP_PKEY_free</span><span class="token punctuation">(</span>pub_key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">EVP_PKEY_free</span><span class="token punctuation">(</span>pri_key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">gen_key</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> pri_file<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> pub_file<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    EC_KEY<span class="token operator">*</span> eckey <span class="token operator">=</span> <span class="token function">EC_KEY_new_by_curve_name</span><span class="token punctuation">(</span>NID_sm2<span class="token punctuation">)</span><span class="token punctuation">;</span>    EC_GROUP<span class="token operator">*</span> group <span class="token operator">=</span> <span class="token function">EC_GROUP_new_by_curve_name</span><span class="token punctuation">(</span>NID_sm2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">EC_KEY_set_group</span><span class="token punctuation">(</span>eckey<span class="token punctuation">,</span> group<span class="token punctuation">)</span><span class="token punctuation">;</span>    BIO<span class="token operator">*</span> param <span class="token operator">=</span> <span class="token function">BIO_new_file</span><span class="token punctuation">(</span><span class="token string">"/tmp/param.cache"</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">PEM_write_bio_ECPKParameters</span><span class="token punctuation">(</span>param<span class="token punctuation">,</span> group<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">EC_KEY_generate_key</span><span class="token punctuation">(</span>eckey<span class="token punctuation">)</span><span class="token punctuation">;</span>    BIO<span class="token operator">*</span> prikey <span class="token operator">=</span> <span class="token function">BIO_new_file</span><span class="token punctuation">(</span>pri_file<span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    BIO<span class="token operator">*</span> pubkey <span class="token operator">=</span> <span class="token function">BIO_new_file</span><span class="token punctuation">(</span>pub_file<span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">PEM_write_bio_ECPrivateKey</span><span class="token punctuation">(</span>prikey<span class="token punctuation">,</span> eckey<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">PEM_write_bio_EC_PUBKEY</span><span class="token punctuation">(</span>pubkey<span class="token punctuation">,</span> eckey<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">BIO_free</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">BIO_free</span><span class="token punctuation">(</span>prikey<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">BIO_free</span><span class="token punctuation">(</span>pubkey<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>EVP_PKEY<span class="token operator">*</span> <span class="token function">read_key_bio</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> key_file<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> type<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    BIO<span class="token operator">*</span> bio <span class="token operator">=</span> <span class="token function">BIO_new_file</span><span class="token punctuation">(</span>key_file<span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    EVP_PKEY<span class="token operator">*</span> key <span class="token operator">=</span> <span class="token function">EVP_PKEY_new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">==</span> type<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        key <span class="token operator">=</span> <span class="token function">PEM_read_bio_PUBKEY</span><span class="token punctuation">(</span>bio<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        key <span class="token operator">=</span> <span class="token function">PEM_read_bio_PrivateKey</span><span class="token punctuation">(</span>bio<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">EVP_PKEY_set_alias_type</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> EVP_PKEY_SM2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">BIO_free</span><span class="token punctuation">(</span>bio<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> key<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">size_t</span> <span class="token function">do_encrypt</span><span class="token punctuation">(</span>EVP_PKEY<span class="token operator">*</span> key<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token operator">*</span> out<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token operator">*</span> in<span class="token punctuation">,</span>                  <span class="token class-name">size_t</span> inlen<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">size_t</span> ret        <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    EVP_PKEY_CTX<span class="token operator">*</span> ctx <span class="token operator">=</span> <span class="token function">EVP_PKEY_CTX_new</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">EVP_PKEY_encrypt_init</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">EVP_PKEY_encrypt</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> out<span class="token punctuation">,</span> <span class="token operator">&amp;</span>ret<span class="token punctuation">,</span> in<span class="token punctuation">,</span> inlen<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">EVP_PKEY_CTX_free</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">size_t</span> <span class="token function">do_decrypt</span><span class="token punctuation">(</span>EVP_PKEY<span class="token operator">*</span> key<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token operator">*</span> out<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token operator">*</span> in<span class="token punctuation">,</span>                  <span class="token class-name">size_t</span> inlen<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">size_t</span> ret        <span class="token operator">=</span> inlen<span class="token punctuation">;</span>    EVP_PKEY_CTX<span class="token operator">*</span> ctx <span class="token operator">=</span> <span class="token function">EVP_PKEY_CTX_new</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">EVP_PKEY_decrypt_init</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">EVP_PKEY_decrypt</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> out<span class="token punctuation">,</span> <span class="token operator">&amp;</span>ret<span class="token punctuation">,</span> in<span class="token punctuation">,</span> inlen<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">EVP_PKEY_CTX_free</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编译运行：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ gcc -g -Wall sm2_enc.c -lcrypto -std<span class="token operator">=</span>c11 -o sm2_enc$ ./sm2_enc <span class="token assign-left variable">data</span><span class="token operator">=</span> hello world <span class="token operator">!</span><span class="token assign-left variable">ret</span><span class="token operator">=</span><span class="token number">119</span>, <span class="token assign-left variable">enc</span><span class="token operator">=</span> <span class="token number">3075</span> 2205A65B5F2 0DD12FE82 22F1D67EE488B675A593292F48964 0CC54D4BF4086F3 <span class="token number">220</span> 0ABF7B25F3E583C 6CC7FDB E6615F5B81D1A7C 1254FEDC520D177D9175E E 42057F9D8333C47DA 71A869F4C9191 46088E9BF9F2F <span class="token number">1</span> 8B3E85E8E6C1E6161AD <span class="token number">4</span> DA91DBF551184C1F8465D 1469D<span class="token assign-left variable">ret</span><span class="token operator">=</span><span class="token number">13</span>, <span class="token assign-left variable">dec</span><span class="token operator">=</span> hello world <span class="token operator">!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="SM2数据签名1"><a href="#SM2数据签名1" class="headerlink" title="SM2数据签名1"></a>SM2数据签名1</h3><p>SM2主要的作用就是保证不可抵赖性，使用私钥进行签名，公钥进行验证。</p><p>OpenSSL提供了简单易用的数据签名和验证接口：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">EVP_DigestSignInit</span><span class="token punctuation">(</span>EVP_MD_CTX <span class="token operator">*</span>ctx<span class="token punctuation">,</span> EVP_PKEY_CTX <span class="token operator">*</span><span class="token operator">*</span>pctx<span class="token punctuation">,</span> <span class="token keyword">const</span> EVP_MD <span class="token operator">*</span>type<span class="token punctuation">,</span>                       ENGINE <span class="token operator">*</span>e<span class="token punctuation">,</span> EVP_PKEY <span class="token operator">*</span>pkey<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">EVP_DigestSignFinal</span><span class="token punctuation">(</span>EVP_MD_CTX <span class="token operator">*</span>ctx<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>sigret<span class="token punctuation">,</span> <span class="token class-name">size_t</span> <span class="token operator">*</span>siglen<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">EVP_DigestVerifyInit</span><span class="token punctuation">(</span>EVP_MD_CTX <span class="token operator">*</span>ctx<span class="token punctuation">,</span> EVP_PKEY_CTX <span class="token operator">*</span><span class="token operator">*</span>pctx<span class="token punctuation">,</span> <span class="token keyword">const</span> EVP_MD <span class="token operator">*</span>type<span class="token punctuation">,</span>                         ENGINE <span class="token operator">*</span>e<span class="token punctuation">,</span> EVP_PKEY <span class="token operator">*</span>pkey<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">EVP_DigestVerify</span><span class="token punctuation">(</span>EVP_MD_CTX <span class="token operator">*</span>ctx<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>sigret<span class="token punctuation">,</span> <span class="token class-name">size_t</span> siglen<span class="token punctuation">,</span>                     <span class="token keyword">const</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>tbs<span class="token punctuation">,</span> <span class="token class-name">size_t</span> tbslen<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一个简单的例子：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// sm2_ds_str.c</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;openssl/evp.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;openssl/pem.h></span></span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> sm2_id<span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token operator">=</span> <span class="token string">"614837785@qq.com"</span><span class="token punctuation">;</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> sm2_id_len <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>sm2_id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/** * @brief 生成SM2公钥和私钥文件 * * @param pri_file 私钥文件名 * @param pub_file 公钥文件名 * @return int 成功返回0，否则返回-1 */</span><span class="token keyword">int</span> <span class="token function">gen_key</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> pri_file<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> pub_file<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/** * @brief 从文件中读取秘钥。 * * @param key_file 公钥或私钥文件名 * @param type 0读取公钥，1读取私钥 * @return EVP_PKEY* 成功返回相应的秘钥，失败返回NULL */</span>EVP_PKEY<span class="token operator">*</span> <span class="token function">read_key_bio</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> key_file<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> type<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">ds_sign</span><span class="token punctuation">(</span>EVP_PKEY<span class="token operator">*</span> pkey<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token operator">*</span> message<span class="token punctuation">,</span>            <span class="token keyword">const</span> <span class="token class-name">size_t</span> message_len<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token operator">*</span> sig<span class="token punctuation">,</span> <span class="token class-name">size_t</span><span class="token operator">*</span> sig_len<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">ds_verify</span><span class="token punctuation">(</span>EVP_PKEY<span class="token operator">*</span> pkey<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token operator">*</span> message<span class="token punctuation">,</span>              <span class="token keyword">const</span> <span class="token class-name">size_t</span> message_len<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token operator">*</span> sig<span class="token punctuation">,</span> <span class="token class-name">size_t</span> sig_len<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token keyword">const</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> message<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"hello world !"</span><span class="token punctuation">;</span>    <span class="token class-name">size_t</span> message_len      <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token operator">*</span> sig      <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span>BUFSIZ<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">size_t</span> sig_len          <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> pub_file <span class="token operator">=</span> <span class="token string">"/tmp/pub-key_sm2.pem"</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> pri_file <span class="token operator">=</span> <span class="token string">"/tmp/pri-key_sm2.pem"</span><span class="token punctuation">;</span>    <span class="token comment">// 生成密钥对</span>    <span class="token function">gen_key</span><span class="token punctuation">(</span>pri_file<span class="token punctuation">,</span> pub_file<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 读取公钥和私钥</span>    EVP_PKEY<span class="token operator">*</span> pub_key <span class="token operator">=</span> <span class="token function">read_key_bio</span><span class="token punctuation">(</span>pub_file<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    EVP_PKEY<span class="token operator">*</span> pri_key <span class="token operator">=</span> <span class="token function">read_key_bio</span><span class="token punctuation">(</span>pri_file<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">ds_sign</span><span class="token punctuation">(</span>pri_key<span class="token punctuation">,</span> message<span class="token punctuation">,</span> message_len<span class="token punctuation">,</span> sig<span class="token punctuation">,</span> <span class="token operator">&amp;</span>sig_len<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">ds_verify</span><span class="token punctuation">(</span>pub_key<span class="token punctuation">,</span> message<span class="token punctuation">,</span> message_len<span class="token punctuation">,</span> sig<span class="token punctuation">,</span> sig_len<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">EVP_PKEY_free</span><span class="token punctuation">(</span>pri_key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">EVP_PKEY_free</span><span class="token punctuation">(</span>pub_key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>sig<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">ds_sign</span><span class="token punctuation">(</span>EVP_PKEY<span class="token operator">*</span> pkey<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token operator">*</span> message<span class="token punctuation">,</span>            <span class="token keyword">const</span> <span class="token class-name">size_t</span> message_len<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token operator">*</span> sig<span class="token punctuation">,</span> <span class="token class-name">size_t</span><span class="token operator">*</span> sig_len<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    EVP_MD_CTX<span class="token operator">*</span> md_ctx <span class="token operator">=</span> <span class="token function">EVP_MD_CTX_new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    EVP_PKEY_CTX<span class="token operator">*</span> sctx <span class="token operator">=</span> <span class="token function">EVP_PKEY_CTX_new</span><span class="token punctuation">(</span>pkey<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">EVP_PKEY_CTX_set1_id</span><span class="token punctuation">(</span>sctx<span class="token punctuation">,</span> sm2_id<span class="token punctuation">,</span> sm2_id_len<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">EVP_MD_CTX_set_pkey_ctx</span><span class="token punctuation">(</span>md_ctx<span class="token punctuation">,</span> sctx<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">EVP_DigestSignInit</span><span class="token punctuation">(</span>md_ctx<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token function">EVP_sm3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> pkey<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">EVP_DigestSign</span><span class="token punctuation">(</span>md_ctx<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> sig_len<span class="token punctuation">,</span> message<span class="token punctuation">,</span> message_len<span class="token punctuation">)</span><span class="token punctuation">;</span>    sig <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">realloc</span><span class="token punctuation">(</span>sig<span class="token punctuation">,</span> <span class="token operator">*</span>sig_len<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">EVP_DigestSign</span><span class="token punctuation">(</span>md_ctx<span class="token punctuation">,</span> sig<span class="token punctuation">,</span> sig_len<span class="token punctuation">,</span> message<span class="token punctuation">,</span> message_len<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">EVP_MD_CTX_free</span><span class="token punctuation">(</span>md_ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">EVP_PKEY_CTX_free</span><span class="token punctuation">(</span>sctx<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">ds_verify</span><span class="token punctuation">(</span>EVP_PKEY<span class="token operator">*</span> pkey<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token operator">*</span> message<span class="token punctuation">,</span>              <span class="token keyword">const</span> <span class="token class-name">size_t</span> message_len<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token operator">*</span> sig<span class="token punctuation">,</span> <span class="token class-name">size_t</span> sig_len<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    EVP_MD_CTX<span class="token operator">*</span> md_ctx_verify <span class="token operator">=</span> <span class="token function">EVP_MD_CTX_new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    EVP_PKEY_CTX<span class="token operator">*</span> sctx        <span class="token operator">=</span> <span class="token function">EVP_PKEY_CTX_new</span><span class="token punctuation">(</span>pkey<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">EVP_PKEY_CTX_set1_id</span><span class="token punctuation">(</span>sctx<span class="token punctuation">,</span> sm2_id<span class="token punctuation">,</span> sm2_id_len<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">EVP_MD_CTX_set_pkey_ctx</span><span class="token punctuation">(</span>md_ctx_verify<span class="token punctuation">,</span> sctx<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">EVP_DigestVerifyInit</span><span class="token punctuation">(</span>md_ctx_verify<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token function">EVP_sm3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> pkey<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">EVP_DigestVerify</span><span class="token punctuation">(</span>md_ctx_verify<span class="token punctuation">,</span> sig<span class="token punctuation">,</span> sig_len<span class="token punctuation">,</span> message<span class="token punctuation">,</span> message_len<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span>        <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Verify SM2 signature failed!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Verify SM2 signature succeeded!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">EVP_PKEY_CTX_free</span><span class="token punctuation">(</span>sctx<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">EVP_MD_CTX_free</span><span class="token punctuation">(</span>md_ctx_verify<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">gen_key</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> pri_file<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> pub_file<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    EC_KEY<span class="token operator">*</span> eckey <span class="token operator">=</span> <span class="token function">EC_KEY_new_by_curve_name</span><span class="token punctuation">(</span>NID_sm2<span class="token punctuation">)</span><span class="token punctuation">;</span>    EC_GROUP<span class="token operator">*</span> group <span class="token operator">=</span> <span class="token function">EC_GROUP_new_by_curve_name</span><span class="token punctuation">(</span>NID_sm2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">EC_KEY_set_group</span><span class="token punctuation">(</span>eckey<span class="token punctuation">,</span> group<span class="token punctuation">)</span><span class="token punctuation">;</span>    BIO<span class="token operator">*</span> param <span class="token operator">=</span> <span class="token function">BIO_new_file</span><span class="token punctuation">(</span><span class="token string">"/tmp/param.cache"</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">PEM_write_bio_ECPKParameters</span><span class="token punctuation">(</span>param<span class="token punctuation">,</span> group<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">EC_KEY_generate_key</span><span class="token punctuation">(</span>eckey<span class="token punctuation">)</span><span class="token punctuation">;</span>    BIO<span class="token operator">*</span> prikey <span class="token operator">=</span> <span class="token function">BIO_new_file</span><span class="token punctuation">(</span>pri_file<span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    BIO<span class="token operator">*</span> pubkey <span class="token operator">=</span> <span class="token function">BIO_new_file</span><span class="token punctuation">(</span>pub_file<span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">PEM_write_bio_ECPrivateKey</span><span class="token punctuation">(</span>prikey<span class="token punctuation">,</span> eckey<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">PEM_write_bio_EC_PUBKEY</span><span class="token punctuation">(</span>pubkey<span class="token punctuation">,</span> eckey<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">BIO_free</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">BIO_free</span><span class="token punctuation">(</span>prikey<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">BIO_free</span><span class="token punctuation">(</span>pubkey<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>EVP_PKEY<span class="token operator">*</span> <span class="token function">read_key_bio</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> key_file<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> type<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    BIO<span class="token operator">*</span> bio <span class="token operator">=</span> <span class="token function">BIO_new_file</span><span class="token punctuation">(</span>key_file<span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    EVP_PKEY<span class="token operator">*</span> key <span class="token operator">=</span> <span class="token function">EVP_PKEY_new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">==</span> type<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        key <span class="token operator">=</span> <span class="token function">PEM_read_bio_PUBKEY</span><span class="token punctuation">(</span>bio<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        key <span class="token operator">=</span> <span class="token function">PEM_read_bio_PrivateKey</span><span class="token punctuation">(</span>bio<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">EVP_PKEY_set_alias_type</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> EVP_PKEY_SM2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">BIO_free</span><span class="token punctuation">(</span>bio<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> key<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编译运行：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ gcc -g -Wall sm2_ds_str.c -lcrypto -std<span class="token operator">=</span>c11 -o sm2_ds_str$ ./sm2_ds_strVerify SM2 signature succeeded<span class="token operator">!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="SM2数据签名2"><a href="#SM2数据签名2" class="headerlink" title="SM2数据签名2"></a>SM2数据签名2</h3><p>以下这种形式主要是对较大的数据进行签名，OpenSSL提供了简单易用的接口：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">EVP_DigestSignInit</span><span class="token punctuation">(</span>EVP_MD_CTX <span class="token operator">*</span>ctx<span class="token punctuation">,</span> EVP_PKEY_CTX <span class="token operator">*</span><span class="token operator">*</span>pctx<span class="token punctuation">,</span> <span class="token keyword">const</span> EVP_MD <span class="token operator">*</span>type<span class="token punctuation">,</span>                       ENGINE <span class="token operator">*</span>e<span class="token punctuation">,</span> EVP_PKEY <span class="token operator">*</span>pkey<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">define</span> <span class="token macro-name function">EVP_DigestSignUpdate</span><span class="token expression"><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">)</span>     <span class="token function">EVP_DigestUpdate</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">)</span></span></span><span class="token keyword">int</span> <span class="token function">EVP_DigestSignFinal</span><span class="token punctuation">(</span>EVP_MD_CTX <span class="token operator">*</span>ctx<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>sigret<span class="token punctuation">,</span> <span class="token class-name">size_t</span> <span class="token operator">*</span>siglen<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">EVP_DigestVerifyInit</span><span class="token punctuation">(</span>EVP_MD_CTX <span class="token operator">*</span>ctx<span class="token punctuation">,</span> EVP_PKEY_CTX <span class="token operator">*</span><span class="token operator">*</span>pctx<span class="token punctuation">,</span> <span class="token keyword">const</span> EVP_MD <span class="token operator">*</span>type<span class="token punctuation">,</span>                         ENGINE <span class="token operator">*</span>e<span class="token punctuation">,</span> EVP_PKEY <span class="token operator">*</span>pkey<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">define</span> <span class="token macro-name function">EVP_DigestVerifyUpdate</span><span class="token expression"><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">)</span>   <span class="token function">EVP_DigestUpdate</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">)</span></span></span><span class="token keyword">int</span> <span class="token function">EVP_DigestVerifyFinal</span><span class="token punctuation">(</span>EVP_MD_CTX <span class="token operator">*</span>ctx<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>sig<span class="token punctuation">,</span> <span class="token class-name">size_t</span> siglen<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，其中的update运算只是对摘要运算的一个定义，摘要运算相关的函数定义可以看上篇关于<a href="https://nongguangxin.cn/guo-mi-sm3-openssl-evp-jie-kou-li-zi.html">SM3的文章</a>。</p><p>一个简单的例子：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// sm2_ds_file.c</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;openssl/evp.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;openssl/pem.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> sm2_id<span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token operator">=</span> <span class="token string">"614837785@qq.com"</span><span class="token punctuation">;</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> sm2_id_len <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>sm2_id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/** * @brief 生成SM2公钥和私钥文件 * * @param pri_file 私钥文件名 * @param pub_file 公钥文件名 * @return int 成功返回0，否则返回-1 */</span><span class="token keyword">int</span> <span class="token function">gen_key</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> pri_file<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> pub_file<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/** * @brief 从文件中读取秘钥。 * * @param key_file 公钥或私钥文件名 * @param type 0读取公钥，1读取私钥 * @return EVP_PKEY* 成功返回相应的秘钥，失败返回NULL */</span>EVP_PKEY<span class="token operator">*</span> <span class="token function">read_key_bio</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> key_file<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> type<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/** * @brief 对数据进行签名 * * @param pkey 签名私钥 * @param message 数据 * @param message_len 数据长度 * @param sig 签名值 * @param sig_len 签名值长度 * @return int 0 */</span><span class="token keyword">int</span> <span class="token function">ds_sign</span><span class="token punctuation">(</span>EVP_PKEY<span class="token operator">*</span> pkey<span class="token punctuation">,</span> FILE<span class="token operator">*</span> fp<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token operator">*</span> sig<span class="token punctuation">,</span> <span class="token class-name">size_t</span><span class="token operator">*</span> sig_len<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/** * @brief 对签名数据进行验证 * * @param pkey 公钥验证 * @param message 签名数据 * @param message_len 签名数据长度 * @param sig 签名值 * @param sig_len 签名值 * @return int 0 */</span><span class="token keyword">int</span> <span class="token function">ds_verify</span><span class="token punctuation">(</span>EVP_PKEY<span class="token operator">*</span> pkey<span class="token punctuation">,</span> FILE<span class="token operator">*</span> fp<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token operator">*</span> sig<span class="token punctuation">,</span> <span class="token class-name">size_t</span> sig_len<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token keyword">const</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"usage: %s &lt;file name>\n"</span><span class="token punctuation">,</span> argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    FILE<span class="token operator">*</span> fp           <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token operator">*</span> sig <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span>BUFSIZ<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">size_t</span> sig_len     <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> pub_file <span class="token operator">=</span> <span class="token string">"/tmp/pub-key_sm2.pem"</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> pri_file <span class="token operator">=</span> <span class="token string">"/tmp/pri-key_sm2.pem"</span><span class="token punctuation">;</span>    <span class="token comment">// 生成密钥对</span>    <span class="token function">gen_key</span><span class="token punctuation">(</span>pri_file<span class="token punctuation">,</span> pub_file<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 读取公钥和私钥</span>    EVP_PKEY<span class="token operator">*</span> pub_key <span class="token operator">=</span> <span class="token function">read_key_bio</span><span class="token punctuation">(</span>pub_file<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    EVP_PKEY<span class="token operator">*</span> pri_key <span class="token operator">=</span> <span class="token function">read_key_bio</span><span class="token punctuation">(</span>pri_file<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">ds_sign</span><span class="token punctuation">(</span>pri_key<span class="token punctuation">,</span> fp<span class="token punctuation">,</span> sig<span class="token punctuation">,</span> <span class="token operator">&amp;</span>sig_len<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">ds_verify</span><span class="token punctuation">(</span>pub_key<span class="token punctuation">,</span> fp<span class="token punctuation">,</span> sig<span class="token punctuation">,</span> sig_len<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">EVP_PKEY_free</span><span class="token punctuation">(</span>pri_key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">EVP_PKEY_free</span><span class="token punctuation">(</span>pub_key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>sig<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">free</span><span class="token punctuation">(</span>sig<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">fclose</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">gen_key</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> pri_file<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> pub_file<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    EC_KEY<span class="token operator">*</span> eckey <span class="token operator">=</span> <span class="token function">EC_KEY_new_by_curve_name</span><span class="token punctuation">(</span>NID_sm2<span class="token punctuation">)</span><span class="token punctuation">;</span>    EC_GROUP<span class="token operator">*</span> group <span class="token operator">=</span> <span class="token function">EC_GROUP_new_by_curve_name</span><span class="token punctuation">(</span>NID_sm2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">EC_KEY_set_group</span><span class="token punctuation">(</span>eckey<span class="token punctuation">,</span> group<span class="token punctuation">)</span><span class="token punctuation">;</span>    BIO<span class="token operator">*</span> param <span class="token operator">=</span> <span class="token function">BIO_new_file</span><span class="token punctuation">(</span><span class="token string">"/tmp/param.cache"</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">PEM_write_bio_ECPKParameters</span><span class="token punctuation">(</span>param<span class="token punctuation">,</span> group<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">EC_KEY_generate_key</span><span class="token punctuation">(</span>eckey<span class="token punctuation">)</span><span class="token punctuation">;</span>    BIO<span class="token operator">*</span> prikey <span class="token operator">=</span> <span class="token function">BIO_new_file</span><span class="token punctuation">(</span>pri_file<span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    BIO<span class="token operator">*</span> pubkey <span class="token operator">=</span> <span class="token function">BIO_new_file</span><span class="token punctuation">(</span>pub_file<span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">PEM_write_bio_ECPrivateKey</span><span class="token punctuation">(</span>prikey<span class="token punctuation">,</span> eckey<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">PEM_write_bio_EC_PUBKEY</span><span class="token punctuation">(</span>pubkey<span class="token punctuation">,</span> eckey<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">BIO_free</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">BIO_free</span><span class="token punctuation">(</span>prikey<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">BIO_free</span><span class="token punctuation">(</span>pubkey<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>EVP_PKEY<span class="token operator">*</span> <span class="token function">read_key_bio</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> key_file<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> type<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    BIO<span class="token operator">*</span> bio <span class="token operator">=</span> <span class="token function">BIO_new_file</span><span class="token punctuation">(</span>key_file<span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    EVP_PKEY<span class="token operator">*</span> key <span class="token operator">=</span> <span class="token function">EVP_PKEY_new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">==</span> type<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        key <span class="token operator">=</span> <span class="token function">PEM_read_bio_PUBKEY</span><span class="token punctuation">(</span>bio<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        key <span class="token operator">=</span> <span class="token function">PEM_read_bio_PrivateKey</span><span class="token punctuation">(</span>bio<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">EVP_PKEY_set_alias_type</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> EVP_PKEY_SM2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">BIO_free</span><span class="token punctuation">(</span>bio<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> key<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">ds_sign</span><span class="token punctuation">(</span>EVP_PKEY<span class="token operator">*</span> pkey<span class="token punctuation">,</span> FILE<span class="token operator">*</span> fp<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token operator">*</span> sig<span class="token punctuation">,</span> <span class="token class-name">size_t</span><span class="token operator">*</span> sig_len<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    EVP_MD_CTX<span class="token operator">*</span> md_ctx <span class="token operator">=</span> <span class="token function">EVP_MD_CTX_new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    EVP_PKEY_CTX<span class="token operator">*</span> sctx <span class="token operator">=</span> <span class="token function">EVP_PKEY_CTX_new</span><span class="token punctuation">(</span>pkey<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">EVP_PKEY_CTX_set1_id</span><span class="token punctuation">(</span>sctx<span class="token punctuation">,</span> sm2_id<span class="token punctuation">,</span> sm2_id_len<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">EVP_MD_CTX_set_pkey_ctx</span><span class="token punctuation">(</span>md_ctx<span class="token punctuation">,</span> sctx<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">EVP_DigestSignInit</span><span class="token punctuation">(</span>md_ctx<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token function">EVP_sm3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> pkey<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">size_t</span> nread              <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> buf<span class="token punctuation">[</span>BUFSIZ<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>nread <span class="token operator">=</span> <span class="token function">fread</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> BUFSIZ<span class="token punctuation">,</span> fp<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">EVP_DigestSignUpdate</span><span class="token punctuation">(</span>md_ctx<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> nread<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">fseek</span><span class="token punctuation">(</span>fp<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token constant">SEEK_SET</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">EVP_DigestSignFinal</span><span class="token punctuation">(</span>md_ctx<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> sig_len<span class="token punctuation">)</span><span class="token punctuation">;</span>    sig <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">realloc</span><span class="token punctuation">(</span>sig<span class="token punctuation">,</span> <span class="token operator">*</span>sig_len<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">EVP_DigestSignFinal</span><span class="token punctuation">(</span>md_ctx<span class="token punctuation">,</span> sig<span class="token punctuation">,</span> sig_len<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">EVP_MD_CTX_free</span><span class="token punctuation">(</span>md_ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">EVP_PKEY_CTX_free</span><span class="token punctuation">(</span>sctx<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">ds_verify</span><span class="token punctuation">(</span>EVP_PKEY<span class="token operator">*</span> pkey<span class="token punctuation">,</span> FILE<span class="token operator">*</span> fp<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token operator">*</span> sig<span class="token punctuation">,</span> <span class="token class-name">size_t</span> sig_len<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    EVP_MD_CTX<span class="token operator">*</span> md_ctx_verify <span class="token operator">=</span> <span class="token function">EVP_MD_CTX_new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    EVP_PKEY_CTX<span class="token operator">*</span> sctx        <span class="token operator">=</span> <span class="token function">EVP_PKEY_CTX_new</span><span class="token punctuation">(</span>pkey<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">EVP_PKEY_CTX_set1_id</span><span class="token punctuation">(</span>sctx<span class="token punctuation">,</span> sm2_id<span class="token punctuation">,</span> sm2_id_len<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">EVP_MD_CTX_set_pkey_ctx</span><span class="token punctuation">(</span>md_ctx_verify<span class="token punctuation">,</span> sctx<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">EVP_DigestVerifyInit</span><span class="token punctuation">(</span>md_ctx_verify<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token function">EVP_sm3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> pkey<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">size_t</span> nread              <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> buf<span class="token punctuation">[</span>BUFSIZ<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>nread <span class="token operator">=</span> <span class="token function">fread</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> BUFSIZ<span class="token punctuation">,</span> fp<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">EVP_DigestVerifyUpdate</span><span class="token punctuation">(</span>md_ctx_verify<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> nread<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">fseek</span><span class="token punctuation">(</span>fp<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token constant">SEEK_SET</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">EVP_DigestVerifyFinal</span><span class="token punctuation">(</span>md_ctx_verify<span class="token punctuation">,</span> sig<span class="token punctuation">,</span> sig_len<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Verify SM2 signature failed!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Verify SM2 signature succeeded!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">EVP_PKEY_CTX_free</span><span class="token punctuation">(</span>sctx<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">EVP_MD_CTX_free</span><span class="token punctuation">(</span>md_ctx_verify<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编译执行：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ gcc -g -Wall sm2_ds_file.c -lcrypto -std<span class="token operator">=</span>c11 -o sm2_ds_file$ ./sm2_ds_file sm2_ds_file.c Verify SM2 signature succeeded<span class="token operator">!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>相关代码位于<a href="https://gitee.com/nongguangxin/information_security.git">gitee仓库</a>，还包括其他SM2，SM3， SM4，数字信封，RSA，MD5，SHA等代码。</p>]]></content>
      
      
      <categories>
          
          <category> security </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SM2 </tag>
            
            <tag> OpenSSL </tag>
            
            <tag> EVP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>国密SM4 OpenSSL EVP接口例子</title>
      <link href="/%E5%9B%BD%E5%AF%86SM4-OpenSSL-EVP%E6%8E%A5%E5%8F%A3%E4%BE%8B%E5%AD%90.html"/>
      <url>/%E5%9B%BD%E5%AF%86SM4-OpenSSL-EVP%E6%8E%A5%E5%8F%A3%E4%BE%8B%E5%AD%90.html</url>
      
        <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>SM4算法是一个分组加密算法。该算法的分组长度为128比特，密钥长度为128比特。加密算法与密钥扩展算法都采用32轮非线性迭代结构。其密文长度等于明文长度。</p><h3 id="加密一段数据"><a href="#加密一段数据" class="headerlink" title="加密一段数据"></a>加密一段数据</h3><p>EVP提供的接口可以在一个函数中根据不同的参数来执行加密或加密计算。其主要接口：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">EVP_CipherInit_ex</span><span class="token punctuation">(</span>EVP_CIPHER_CTX <span class="token operator">*</span>ctx<span class="token punctuation">,</span> <span class="token keyword">const</span> EVP_CIPHER <span class="token operator">*</span>cipher<span class="token punctuation">,</span> ENGINE <span class="token operator">*</span>impl<span class="token punctuation">,</span>                      <span class="token keyword">const</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>key<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>iv<span class="token punctuation">,</span> <span class="token keyword">int</span> enc<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">EVP_Cipher</span><span class="token punctuation">(</span>EVP_CIPHER_CTX <span class="token operator">*</span>c<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>out<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>in<span class="token punctuation">,</span>               <span class="token keyword">unsigned</span> <span class="token keyword">int</span> inl<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>一个简单的例子：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// sm4_str.c</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;errno.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;openssl/evp.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token comment">/** * @brief 加密或解密数据 * * @param in 输入数据 * @param inl 输入数据的长度 * @param out 输出数据 * @param do_encrypt 1-加密，0-解密 * @return void  */</span><span class="token keyword">void</span> <span class="token function">do_crypt</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token operator">*</span> in<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> inlen<span class="token punctuation">,</span>             <span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token operator">*</span> out<span class="token punctuation">,</span> <span class="token keyword">int</span> do_encrypt<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token operator">*</span> key<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    EVP_CIPHER_CTX<span class="token operator">*</span> ctx <span class="token operator">=</span> <span class="token function">EVP_CIPHER_CTX_new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">EVP_CipherInit_ex</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token function">EVP_sm4_cbc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> do_encrypt<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">EVP_Cipher</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> out<span class="token punctuation">,</span> in<span class="token punctuation">,</span> inlen<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">EVP_CIPHER_CTX_free</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token keyword">const</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> key<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span>  <span class="token number">3</span><span class="token punctuation">,</span>  <span class="token number">4</span><span class="token punctuation">,</span>  <span class="token number">5</span><span class="token punctuation">,</span>  <span class="token number">6</span><span class="token punctuation">,</span>  <span class="token number">7</span><span class="token punctuation">,</span>                           <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> str     <span class="token operator">=</span> <span class="token string">"hello world"</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"origin data= %s\n"</span><span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// encrypt</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> buf<span class="token punctuation">[</span>BUFSIZ<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token function">do_crypt</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>str<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"after encrypt str(hex)= "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">12</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%2X"</span><span class="token punctuation">,</span> buf<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// decrypt</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> bufout<span class="token punctuation">[</span>BUFSIZ<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token function">do_crypt</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>buf<span class="token punctuation">)</span><span class="token punctuation">,</span> bufout<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nafter decrypt data= %s\n"</span><span class="token punctuation">,</span> bufout<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编译执行：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ gcc -g -Wall sm4_str.c -lcrypto -std<span class="token operator">=</span>c11 -o sm4_str$ ./sm4_str origin <span class="token assign-left variable">data</span><span class="token operator">=</span> hello worldafter encrypt str<span class="token punctuation">(</span>hex<span class="token punctuation">)</span><span class="token operator">=</span> 8CA754D2A26F6FC638C1953Fafter decrypt <span class="token assign-left variable">data</span><span class="token operator">=</span> hello world<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="对大数据进行加密1"><a href="#对大数据进行加密1" class="headerlink" title="对大数据进行加密1"></a>对大数据进行加密1</h3><p>OpenSSL还提供了一组接口用于对不能一次性完成加密的大数据进行加密。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">EVP_CipherInit_ex</span><span class="token punctuation">(</span>EVP_CIPHER_CTX <span class="token operator">*</span>ctx<span class="token punctuation">,</span> <span class="token keyword">const</span> EVP_CIPHER <span class="token operator">*</span>cipher<span class="token punctuation">,</span> ENGINE <span class="token operator">*</span>impl<span class="token punctuation">,</span>                      <span class="token keyword">const</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>key<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>iv<span class="token punctuation">,</span> <span class="token keyword">int</span> enc<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">EVP_CipherUpdate</span><span class="token punctuation">(</span>EVP_CIPHER_CTX <span class="token operator">*</span>ctx<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>out<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>outl<span class="token punctuation">,</span>                     <span class="token keyword">const</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>in<span class="token punctuation">,</span> <span class="token keyword">int</span> inl<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">EVP_CipherFinal_ex</span><span class="token punctuation">(</span>EVP_CIPHER_CTX <span class="token operator">*</span>ctx<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>outm<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>outl<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一个简单的例子：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// sm4_file.c</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;openssl/evp.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">static</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> key<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span>  <span class="token number">3</span><span class="token punctuation">,</span>  <span class="token number">4</span><span class="token punctuation">,</span>  <span class="token number">5</span><span class="token punctuation">,</span>  <span class="token number">6</span><span class="token punctuation">,</span>  <span class="token number">7</span><span class="token punctuation">,</span>                              <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">/** * @brief 加密或解密文件中的数据 *  * @param in 输入文件 * @param out 输出文件 * @param do_encrypt 1-加密，0-解密 * @return int 成功返回0，否则返回-1 */</span><span class="token keyword">int</span> <span class="token function">do_crypt</span><span class="token punctuation">(</span>FILE<span class="token operator">*</span> in<span class="token punctuation">,</span> FILE<span class="token operator">*</span> out<span class="token punctuation">,</span> <span class="token keyword">int</span> do_encrypt<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> inbuf<span class="token punctuation">[</span>BUFSIZ<span class="token punctuation">]</span><span class="token punctuation">,</span> outbuf<span class="token punctuation">[</span>BUFSIZ <span class="token operator">+</span> EVP_MAX_BLOCK_LENGTH<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> outlen<span class="token punctuation">;</span>    <span class="token class-name">size_t</span> inlen<span class="token punctuation">;</span>    EVP_CIPHER_CTX<span class="token operator">*</span> ctx <span class="token operator">=</span> <span class="token function">EVP_CIPHER_CTX_new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 指定SM4初始化ctx</span>    <span class="token function">EVP_CipherInit_ex</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token function">EVP_sm4_cbc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> do_encrypt<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>inlen <span class="token operator">=</span> <span class="token function">fread</span><span class="token punctuation">(</span>inbuf<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> BUFSIZ<span class="token punctuation">,</span> in<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">EVP_CipherUpdate</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> outbuf<span class="token punctuation">,</span> <span class="token operator">&amp;</span>outlen<span class="token punctuation">,</span> inbuf<span class="token punctuation">,</span> inlen<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">EVP_CIPHER_CTX_free</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">fwrite</span><span class="token punctuation">(</span>outbuf<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> outlen<span class="token punctuation">,</span> out<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">EVP_CipherFinal_ex</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> outbuf<span class="token punctuation">,</span> <span class="token operator">&amp;</span>outlen<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">EVP_CIPHER_CTX_free</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">fwrite</span><span class="token punctuation">(</span>outbuf<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> outlen<span class="token punctuation">,</span> out<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">EVP_CIPHER_CTX_free</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token keyword">const</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">!=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"usage: %s &lt;filename>\n"</span><span class="token punctuation">,</span> argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">char</span><span class="token operator">*</span> encry_file_neme <span class="token operator">=</span> <span class="token string">"/tmp/encry_file"</span><span class="token punctuation">;</span>    <span class="token keyword">char</span><span class="token operator">*</span> decry_file_name <span class="token operator">=</span> <span class="token string">"/tmp/decry_file"</span><span class="token punctuation">;</span>    FILE<span class="token operator">*</span> orig_file  <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    FILE<span class="token operator">*</span> encry_file <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span>encry_file_neme<span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// encrypt</span>    <span class="token function">do_crypt</span><span class="token punctuation">(</span>orig_file<span class="token punctuation">,</span> encry_file<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fclose</span><span class="token punctuation">(</span>orig_file<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fclose</span><span class="token punctuation">(</span>encry_file<span class="token punctuation">)</span><span class="token punctuation">;</span>    encry_file       <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span>encry_file_neme<span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    FILE<span class="token operator">*</span> decry_file <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span>decry_file_name<span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// decrypt</span>    <span class="token function">do_crypt</span><span class="token punctuation">(</span>encry_file<span class="token punctuation">,</span> decry_file<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fclose</span><span class="token punctuation">(</span>encry_file<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fclose</span><span class="token punctuation">(</span>decry_file<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"sm4 do_encry finish. see encrypt file:%s and decrypt file:%s.\n"</span><span class="token punctuation">,</span>           encry_file_neme<span class="token punctuation">,</span> decry_file_name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编译执行：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ ./sm4_file sm4_file.c sm4 do_encry finish. see encrypt file:/tmp/encry_file and decrypt file:/tmp/decry_file.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>然后就可以在<code>/tmp/encry_file</code>和<code>/tmp/decry_file</code>查看加密的文件和解密后的文件。</p><h3 id="对大数据进行加密2"><a href="#对大数据进行加密2" class="headerlink" title="对大数据进行加密2"></a>对大数据进行加密2</h3><p>OpenSSL还提供了另一组接口，将加密和解密运算分开。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">EVP_EncryptInit_ex</span><span class="token punctuation">(</span>EVP_CIPHER_CTX <span class="token operator">*</span>ctx<span class="token punctuation">,</span> <span class="token keyword">const</span> EVP_CIPHER <span class="token operator">*</span>cipher<span class="token punctuation">,</span> ENGINE <span class="token operator">*</span>impl<span class="token punctuation">,</span>                       <span class="token keyword">const</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>key<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>iv<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">EVP_EncryptUpdate</span><span class="token punctuation">(</span>EVP_CIPHER_CTX <span class="token operator">*</span>ctx<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>out<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">*</span>outl<span class="token punctuation">,</span>                      <span class="token keyword">const</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>in<span class="token punctuation">,</span> <span class="token keyword">int</span> inl<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">EVP_EncryptFinal_ex</span><span class="token punctuation">(</span>EVP_CIPHER_CTX <span class="token operator">*</span>ctx<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>out<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>outl<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">EVP_DecryptInit_ex</span><span class="token punctuation">(</span>EVP_CIPHER_CTX <span class="token operator">*</span>ctx<span class="token punctuation">,</span> <span class="token keyword">const</span> EVP_CIPHER <span class="token operator">*</span>cipher<span class="token punctuation">,</span> ENGINE <span class="token operator">*</span>impl<span class="token punctuation">,</span>                       <span class="token keyword">const</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>key<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>iv<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">EVP_DecryptUpdate</span><span class="token punctuation">(</span>EVP_CIPHER_CTX <span class="token operator">*</span>ctx<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>out<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>outl<span class="token punctuation">,</span>                      <span class="token keyword">const</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>in<span class="token punctuation">,</span> <span class="token keyword">int</span> inl<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">EVP_DecryptFinal_ex</span><span class="token punctuation">(</span>EVP_CIPHER_CTX <span class="token operator">*</span>ctx<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>outm<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>outl<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一个简单的例子：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// sm4_file1.c</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;errno.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;openssl/evp.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">BUFSIZE</span> <span class="token expression"><span class="token number">20</span></span></span><span class="token comment">/** * @brief 对文件内容进行加密 * * @param fp 要对里面的内容进行加密的文件指针 * @param out 加密后的数据输出 * @param outlen 加密后的数据长度 * @param key 秘钥,可以为NULL * @return int 函数返回值 */</span><span class="token keyword">int</span> <span class="token function">do_encrypt</span><span class="token punctuation">(</span>FILE<span class="token operator">*</span> fp<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token operator">*</span> out<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> outlen<span class="token punctuation">,</span>               <span class="token keyword">const</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token operator">*</span> key<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> tmplen          <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    EVP_CIPHER_CTX<span class="token operator">*</span> ctx <span class="token operator">=</span> <span class="token function">EVP_CIPHER_CTX_new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">EVP_EncryptInit_ex</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token function">EVP_sm4_ecb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> buf<span class="token punctuation">[</span>BUFSIZE<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token class-name">size_t</span> nread               <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>nread <span class="token operator">=</span> <span class="token function">fread</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> BUFSIZE<span class="token punctuation">,</span> fp<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">EVP_EncryptUpdate</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> out <span class="token operator">+</span> tmplen<span class="token punctuation">,</span> outlen<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> nread<span class="token punctuation">)</span><span class="token punctuation">;</span>        tmplen <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token operator">*</span>outlen<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">EVP_EncryptFinal_ex</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> out <span class="token operator">+</span> tmplen<span class="token punctuation">,</span> outlen<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">*</span>outlen <span class="token operator">+=</span> tmplen<span class="token punctuation">;</span>    <span class="token function">EVP_CIPHER_CTX_free</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * @brief 对文件的加密内容进行解密 * * @param fp 文件指针 * @param out 解密后数据 * @param outlen 解密后的数据长度 * @param key 秘钥，可以为NULL * @return int 函数返回值 */</span><span class="token keyword">int</span> <span class="token function">do_decrypt</span><span class="token punctuation">(</span>FILE<span class="token operator">*</span> fp<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token operator">*</span> out<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> outlen<span class="token punctuation">,</span>               <span class="token keyword">const</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token operator">*</span> key<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> tmplen          <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    EVP_CIPHER_CTX<span class="token operator">*</span> ctx <span class="token operator">=</span> <span class="token function">EVP_CIPHER_CTX_new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">EVP_DecryptInit_ex</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token function">EVP_sm4_ecb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> buf<span class="token punctuation">[</span>BUFSIZE<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token class-name">size_t</span> nread               <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>nread <span class="token operator">=</span> <span class="token function">fread</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> BUFSIZE<span class="token punctuation">,</span> fp<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">EVP_DecryptUpdate</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> out <span class="token operator">+</span> tmplen<span class="token punctuation">,</span> outlen<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> nread<span class="token punctuation">)</span><span class="token punctuation">;</span>        tmplen <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token operator">*</span>outlen<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">EVP_DecryptFinal_ex</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> out <span class="token operator">+</span> tmplen<span class="token punctuation">,</span> outlen<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">*</span>outlen <span class="token operator">+=</span> tmplen<span class="token punctuation">;</span>    <span class="token function">EVP_CIPHER_CTX_free</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token keyword">const</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> key<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span>  <span class="token number">3</span><span class="token punctuation">,</span>  <span class="token number">4</span><span class="token punctuation">,</span>  <span class="token number">5</span><span class="token punctuation">,</span>  <span class="token number">6</span><span class="token punctuation">,</span>  <span class="token number">7</span><span class="token punctuation">,</span>                           <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> ret             <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> outlen          <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"usage: %s &lt;file name>\n"</span><span class="token punctuation">,</span> argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    FILE<span class="token operator">*</span> fp <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// encrypt</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> out<span class="token punctuation">[</span>BUFSIZ<span class="token punctuation">]</span><span class="token punctuation">;</span>    ret <span class="token operator">=</span> <span class="token function">do_encrypt</span><span class="token punctuation">(</span>fp<span class="token punctuation">,</span> out<span class="token punctuation">,</span> <span class="token operator">&amp;</span>outlen<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fclose</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> enc_file <span class="token operator">=</span> <span class="token string">"/tmp/sm4_enc_file.txt"</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> dec_file <span class="token operator">=</span> <span class="token string">"/tmp/sm4_dec_file.txt"</span><span class="token punctuation">;</span>    FILE<span class="token operator">*</span> enc_fp         <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span>enc_file<span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fwrite</span><span class="token punctuation">(</span>out<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> outlen<span class="token punctuation">,</span> enc_fp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fclose</span><span class="token punctuation">(</span>enc_fp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"encrypt data write in %s\n"</span><span class="token punctuation">,</span> enc_file<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// decrypt</span>    enc_fp <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span>enc_file<span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ret    <span class="token operator">=</span> <span class="token function">do_decrypt</span><span class="token punctuation">(</span>fp<span class="token punctuation">,</span> out<span class="token punctuation">,</span> <span class="token operator">&amp;</span>outlen<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fclose</span><span class="token punctuation">(</span>enc_fp<span class="token punctuation">)</span><span class="token punctuation">;</span>    FILE<span class="token operator">*</span> dec_fp <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span>dec_file<span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fwrite</span><span class="token punctuation">(</span>out<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> outlen<span class="token punctuation">,</span> dec_fp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fclose</span><span class="token punctuation">(</span>dec_fp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"decrypt data write in %s\n"</span><span class="token punctuation">,</span> dec_file<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编译运行：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ gcc -g -Wall sm4_file1.c -lcrypto -std<span class="token operator">=</span>c11 -o sm4_file1$ ./sm4_file1 sm4_file1.c encrypt data <span class="token function">write</span> <span class="token keyword">in</span> /tmp/sm4_enc_file.txtdecrypt data <span class="token function">write</span> <span class="token keyword">in</span> /tmp/sm4_dec_file.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>然后可以在<code>/tmp/sm4_enc_file.txt</code>和<code>/tmp/sm4_dec_file.txt</code>查看加密和解密的内容。</p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>相关代码位于<a href="https://gitee.com/nongguangxin/information_security.git">gitee仓库</a>，还包括其他SM2，SM3， SM4，数字信封，RSA，MD5，SHA等代码。</p>]]></content>
      
      
      <categories>
          
          <category> security </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OpenSSL </tag>
            
            <tag> EVP </tag>
            
            <tag> SM4 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>国密SM3 OpenSSL EVP接口例子</title>
      <link href="/%E5%9B%BD%E5%AF%86SM3-OpenSSL-EVP%E6%8E%A5%E5%8F%A3%E4%BE%8B%E5%AD%90.html"/>
      <url>/%E5%9B%BD%E5%AF%86SM3-OpenSSL-EVP%E6%8E%A5%E5%8F%A3%E4%BE%8B%E5%AD%90.html</url>
      
        <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>国产SM3是中国国家密码管理局2010年公布的中国商用密码杂凑算法标准。SM3算法适用于商用密码应用中的数字签名和验证，是在SHA-256基础上改进实现的一种算法。SM3算法采用Merkle-Damgard结构，消息分组长度为512位，摘要值长度为256位。</p><p>EVP是OpenSSL提供的一组高级接口，使用EVP可以通过一致简单的接口调用不同的算法。</p><h3 id="单次哈希"><a href="#单次哈希" class="headerlink" title="单次哈希"></a>单次哈希</h3><p>单次哈希就是只计算一次哈希，适用于数据较短的情况，可以一次完成计算。</p><p>OpenSSL提供了接口来直接计算一段数据的哈希值：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">EVP_Digest</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>data<span class="token punctuation">,</span> <span class="token class-name">size_t</span> count<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>md<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token operator">*</span>size<span class="token punctuation">,</span>               <span class="token keyword">const</span> EVP_MD <span class="token operator">*</span>type<span class="token punctuation">,</span> ENGINE <span class="token operator">*</span>impl<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>参数都比较好理解，<code>data</code>和<code>count</code>为输入数据和数据长度，<code>md</code>和<code>size</code>分别哈希值和哈希值长度，<code>type</code>为使用的哈希算法，<code>impl</code>是要使用的计算引擎，一般设为<code>NULL</code>使用默认的引擎。</p><p>一个简单的例子，计算”hello world”的哈希值：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// sm3_str.c</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;openssl/evp.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">static</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> HASH_RESULT_LEN <span class="token operator">=</span> <span class="token number">32</span><span class="token punctuation">;</span><span class="token comment">/** * @brief 计算一段数据的哈希值 *  * @param str 数据 * @param len 数据长度 * @param hash_result 哈希值 * @return unsigned int 哈希值长度 */</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token function">hash_str</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> str<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token class-name">size_t</span> len<span class="token punctuation">,</span>                      <span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token operator">*</span> hash_result<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> ret<span class="token punctuation">;</span>    <span class="token keyword">const</span> EVP_MD<span class="token operator">*</span> alg <span class="token operator">=</span> <span class="token function">EVP_sm3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">EVP_Digest</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> len<span class="token punctuation">,</span> hash_result<span class="token punctuation">,</span> <span class="token operator">&amp;</span>ret<span class="token punctuation">,</span> alg<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token keyword">const</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">char</span><span class="token operator">*</span> str <span class="token operator">=</span> <span class="token string">"hello world"</span><span class="token punctuation">;</span>    <span class="token comment">// HASH_RESULT_LEN = EVP_MD_size(EVP_sm3());</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> hash_result<span class="token punctuation">[</span>HASH_RESULT_LEN<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> retlen <span class="token operator">=</span> <span class="token function">hash_str</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">,</span> hash_result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"hash '%s', return len=%d\nhash val="</span><span class="token punctuation">,</span> str<span class="token punctuation">,</span> retlen<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> HASH_RESULT_LEN<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%02x"</span><span class="token punctuation">,</span> hash_result<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们在代码第20行调用<code>EVP_sm3()</code>函数来使用SM3算法计算哈希，如果想使用其他的哈希算法，可以调用其他类似的函数，如：<code>EVP_md5()</code>, <code>EVP_sha256()</code>等。第28行的<code>EVP_MD_size</code>用来计算相应哈希算法的哈希值长度，如果不知道一个算法返回的哈希值长度的话可以先用次函数得到。</p><p>编译执行：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ gcc -Wall sm3_str.c -lcrypto -std<span class="token operator">=</span>c11 -o sm3_str$ ./sm3_str <span class="token builtin class-name">hash</span> <span class="token string">'hello world'</span>, <span class="token builtin class-name">return</span> <span class="token assign-left variable">len</span><span class="token operator">=</span><span class="token number">32</span><span class="token builtin class-name">hash</span> <span class="token assign-left variable">val</span><span class="token operator">=</span>44F0061E69FA6FDFC290C494654A05DC0C053DA7E5C52B84EF93A9D67D3FFF88<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>可以使用OpenSSL提供的命令行工具对结果进行验证：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token builtin class-name">echo</span> -n <span class="token string">"hello world"</span> <span class="token operator">|</span> openssl sm3<span class="token punctuation">(</span>stdin<span class="token punctuation">)</span><span class="token operator">=</span> 44f0061e69fa6fdfc290c494654a05dc0c053da7e5c52b84ef93a9d67d3fff88<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="多次哈希"><a href="#多次哈希" class="headerlink" title="多次哈希"></a>多次哈希</h3><p>有时可能数据较大或其他原因不能将所有的数据放在读入内存，可以多次读取多次计算得到数据的数据值，OpenSSL提供了一组实现这种功能的函数：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">EVP_DigestInit_ex</span><span class="token punctuation">(</span>EVP_MD_CTX <span class="token operator">*</span>ctx<span class="token punctuation">,</span> <span class="token keyword">const</span> EVP_MD <span class="token operator">*</span>type<span class="token punctuation">,</span> ENGINE <span class="token operator">*</span>impl<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">EVP_DigestUpdate</span><span class="token punctuation">(</span>EVP_MD_CTX <span class="token operator">*</span>ctx<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>d<span class="token punctuation">,</span> <span class="token class-name">size_t</span> cnt<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">EVP_DigestFinal_ex</span><span class="token punctuation">(</span>EVP_MD_CTX <span class="token operator">*</span>ctx<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>md<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token operator">*</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>一个简单的例子：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// sm3_file.c</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;openssl/evp.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token comment">// 哈希值长度（字节）</span><span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> HASH_RESULT_LEN <span class="token operator">=</span> <span class="token number">32</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token class-name">size_t</span> BUFSIZE <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span><span class="token comment">/** * @brief 计算文件中的数据哈希值 *  * @param fp 文件结构体 * @param hash_result 文件哈希值 */</span><span class="token keyword">void</span> <span class="token function">hash_file</span><span class="token punctuation">(</span>FILE<span class="token operator">*</span> fp<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token operator">*</span> hash_result<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> EVP_MD<span class="token operator">*</span> md <span class="token operator">=</span> <span class="token function">EVP_sm3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    EVP_MD_CTX<span class="token operator">*</span> ctx  <span class="token operator">=</span> <span class="token function">EVP_MD_CTX_new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> buf<span class="token punctuation">[</span>BUFSIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token class-name">size_t</span> nread <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">EVP_DigestInit_ex</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> md<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>nread <span class="token operator">=</span> <span class="token function">fread</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> BUFSIZE<span class="token punctuation">,</span> fp<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">EVP_DigestUpdate</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> nread<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">EVP_DigestFinal_ex</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> hash_result<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">EVP_MD_CTX_free</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token keyword">const</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">!=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"usage: %s &lt;file name>\n"</span><span class="token punctuation">,</span> argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    FILE<span class="token operator">*</span> fp <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>fp<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s open failed.\n"</span><span class="token punctuation">,</span> argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> hash_result<span class="token punctuation">[</span>HASH_RESULT_LEN<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">hash_file</span><span class="token punctuation">(</span>fp<span class="token punctuation">,</span> hash_result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"SM3(%s)= "</span><span class="token punctuation">,</span> argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> HASH_RESULT_LEN<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%02x"</span><span class="token punctuation">,</span> hash_result<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fclose</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们在第8行定义了每次读取8个字节，避免fread函数一次读取完文件的所有数据，达不到多次计算哈希的效果。</p><p>编译运行：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ gcc -g -Wall sm3_file.c -lcrypto -std<span class="token operator">=</span>c11 -o sm3_file$ ./sm3_file sm3_file.cSM3<span class="token punctuation">(</span>sm3_file.c<span class="token punctuation">)</span><span class="token operator">=</span> 124834c2c678680ef6ead002232f7d5acfb55778446c39719aca8821a68a7fdf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>和OpenSSL命令行的结果进行对比：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">cat</span> sm3_file.c <span class="token operator">|</span> openssl sm3<span class="token punctuation">(</span>stdin<span class="token punctuation">)</span><span class="token operator">=</span> 124834c2c678680ef6ead002232f7d5acfb55778446c39719aca8821a68a7fdf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>相关代码位于<a href="https://gitee.com/nongguangxin/information_security.git">gitee仓库</a>，还包括其他SM2，SM3， SM4，数字信封，RSA，MD5，SHA等代码。</p>]]></content>
      
      
      <categories>
          
          <category> security </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OpenSSL </tag>
            
            <tag> EVP </tag>
            
            <tag> SM3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言中的计时方式</title>
      <link href="/C%E8%AF%AD%E8%A8%80%E4%B8%AD%E7%9A%84%E8%AE%A1%E6%97%B6%E6%96%B9%E5%BC%8F.html"/>
      <url>/C%E8%AF%AD%E8%A8%80%E4%B8%AD%E7%9A%84%E8%AE%A1%E6%97%B6%E6%96%B9%E5%BC%8F.html</url>
      
        <content type="html"><![CDATA[<h2 id="零、前言"><a href="#零、前言" class="headerlink" title="零、前言"></a>零、前言</h2><p>1秒 == 1000 毫秒 (millisecond)== 1000*1000 微秒(Microseconds) 1000*1000*1000 纳秒(nanosecond)</p><p>系统环境：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">uname</span> -srvpoLinux <span class="token number">5.4</span>.0-56-generic <span class="token comment">#62-Ubuntu SMP Mon Nov 23 19:20:19 UTC 2020 x86_64 GNU/Linux</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="一、计算秒"><a href="#一、计算秒" class="headerlink" title="一、计算秒"></a>一、计算秒</h2><p>C中可以使用<code>time_t time(time_t *tloc)</code>来获取从1970-01-01 00:00:00 +0000至今所经过的秒数。</p><p>两次调用相减就可以获取时间间隔。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;time.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token keyword">const</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">time_t</span> start<span class="token punctuation">,</span> end<span class="token punctuation">;</span>    start <span class="token operator">=</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    end <span class="token operator">=</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"diff time= %fs\n"</span><span class="token punctuation">,</span> <span class="token function">difftime</span><span class="token punctuation">(</span>end<span class="token punctuation">,</span> start<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编译运行：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ gcc main.c$ ./a.out <span class="token function">diff</span> <span class="token assign-left variable">time</span><span class="token operator">=</span> <span class="token number">2</span>.000000s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>使用以上方式计算的秒数还是比较准确的。</p><h2 id="二、计算微秒"><a href="#二、计算微秒" class="headerlink" title="二、计算微秒"></a>二、计算微秒</h2><p>在C中还可以使用<code>gettimeofday(struct timeval *tv, struct timezone *tz)</code>来获取时间，时间精度达到微秒级，主要的结构体为：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* A time value that is accurate to the nearest   microsecond but also has a range of years.  */</span><span class="token keyword">struct</span> <span class="token class-name">timeval</span><span class="token punctuation">&#123;</span>  __time_t tv_sec<span class="token punctuation">;</span><span class="token comment">/* Seconds.  */</span>  __suseconds_t tv_usec<span class="token punctuation">;</span><span class="token comment">/* Microseconds.  */</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用两次就可以计算时间间隔：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/time.h></span></span><span class="token class-name">size_t</span> <span class="token function">get_millis</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">timeval</span><span class="token operator">*</span> start<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">timeval</span><span class="token operator">*</span> end<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">time_t</span> seconds <span class="token operator">=</span> end<span class="token operator">-></span>tv_sec <span class="token operator">-</span> start<span class="token operator">-></span>tv_sec<span class="token punctuation">;</span>    <span class="token class-name">suseconds_t</span> ms <span class="token operator">=</span> end<span class="token operator">-></span>tv_usec <span class="token operator">-</span> start<span class="token operator">-></span>tv_usec<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"seconds=%ld, micros=%ld\n"</span><span class="token punctuation">,</span> seconds<span class="token punctuation">,</span> ms<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> seconds<span class="token operator">*</span><span class="token number">1000</span> <span class="token operator">+</span> ms<span class="token operator">/</span><span class="token number">1000</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token keyword">const</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">timeval</span> stv<span class="token punctuation">,</span> endv<span class="token punctuation">;</span>    <span class="token function">gettimeofday</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>stv<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">usleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">gettimeofday</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>endv<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">get_millis</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>stv<span class="token punctuation">,</span> <span class="token operator">&amp;</span>endv<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在17，18行，我们使程序睡眠2000微秒和1秒。函数<code>get_millis</code>在第9行打印经过的秒数和微秒数，返回毫秒值。</p><p>编译执行：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ gcc main.c$ ./a.out <span class="token assign-left variable">seconds</span><span class="token operator">=</span><span class="token number">1</span>, <span class="token assign-left variable">micros</span><span class="token operator">=</span><span class="token number">2219</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>执行结果表明秒数准确，但是微秒值有一定的误差，这是不可避免。</p><h2 id="三、计算纳秒"><a href="#三、计算纳秒" class="headerlink" title="三、计算纳秒"></a>三、计算纳秒</h2><p>C中还可以使用<code>int timespec_get (struct timespec *__ts, int __base)</code>获取时间，精度到达纳秒。主要结构体为：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* POSIX.1b structure for a time value.  This is like a `struct timeval' but   has nanoseconds instead of microseconds.  */</span><span class="token keyword">struct</span> <span class="token class-name">timespec</span><span class="token punctuation">&#123;</span>  __time_t tv_sec<span class="token punctuation">;</span><span class="token comment">/* Seconds.  */</span>  __syscall_slong_t tv_nsec<span class="token punctuation">;</span><span class="token comment">/* Nanoseconds.  */</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用两次就可以计算时间间隔：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;time.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token class-name">size_t</span> <span class="token function">get_nanos</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">timespec</span><span class="token operator">*</span> start<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">timespec</span><span class="token operator">*</span> end<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">time_t</span> seconds <span class="token operator">=</span> end<span class="token operator">-></span>tv_sec <span class="token operator">-</span> start<span class="token operator">-></span>tv_sec<span class="token punctuation">;</span>    <span class="token keyword">long</span> nano <span class="token operator">=</span> end<span class="token operator">-></span>tv_nsec <span class="token operator">-</span> start<span class="token operator">-></span>tv_nsec<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"seconds=%ld, nano=%ld\n"</span><span class="token punctuation">,</span> seconds<span class="token punctuation">,</span> nano<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>seconds<span class="token operator">*</span><span class="token number">1000</span> <span class="token operator">+</span> nano<span class="token operator">/</span><span class="token number">1000000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token keyword">const</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">timespec</span> start<span class="token punctuation">,</span> end<span class="token punctuation">;</span>    <span class="token function">timespec_get</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>start<span class="token punctuation">,</span> TIME_UTC<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">usleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">timespec_get</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>end<span class="token punctuation">,</span> TIME_UTC<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">get_nanos</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>start<span class="token punctuation">,</span> <span class="token operator">&amp;</span>end<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在18，19行，我们使程序睡眠2000微秒和1秒。函数<code>get_nanos</code>在第9行打印经过的秒数和纳秒数，返回毫秒值。</p><p>编译执行：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ gcc main.c$ ./a.out <span class="token assign-left variable">seconds</span><span class="token operator">=</span><span class="token number">1</span>, <span class="token assign-left variable">nano</span><span class="token operator">=</span><span class="token number">2268702</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>从执行结果可以看出，秒数准确，但是纳秒值有一定的误差，这是不可避免。</p><p><strong>end</strong></p>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 时间间隔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>X86常用汇编指令--AT&amp;T格式</title>
      <link href="/X86%E5%B8%B8%E7%94%A8%E6%B1%87%E7%BC%96%E6%8C%87%E4%BB%A4-AT-T%E6%A0%BC%E5%BC%8F.html"/>
      <url>/X86%E5%B8%B8%E7%94%A8%E6%B1%87%E7%BC%96%E6%8C%87%E4%BB%A4-AT-T%E6%A0%BC%E5%BC%8F.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-AT-amp-T汇编"><a href="#1-AT-amp-T汇编" class="headerlink" title="1. AT&amp;T汇编"></a>1. AT&amp;T汇编</h2><h3 id="1-1-说明"><a href="#1-1-说明" class="headerlink" title="1.1 说明"></a>1.1 说明</h3><p>字 = 2字节； 双字 = 4字节</p><p>使用gcc编译工具链（汇编器as，链接器ld）。</p><p>64位系统<a href="https://elixir.bootlin.com/linux/v4.9.233/source/arch/x86/entry/syscalls/syscall_64.tbl">调用表</a>， 32位系统<a href="https://elixir.bootlin.com/linux/v4.9.233/source/arch/x86/entry/syscalls/syscall_32.tbl">调用表</a>。</p><hr><h3 id="1-2-通用寄存器"><a href="#1-2-通用寄存器" class="headerlink" title="1.2 通用寄存器"></a>1.2 通用寄存器</h3><table><thead><tr><th>63</th><th>31</th><th>15</th><th>7</th><th align="center">0</th></tr></thead><tbody><tr><td>%rax</td><td>%eax</td><td>%ax</td><td>%al</td><td align="center">返回值</td></tr><tr><td>%rbx</td><td>%ebx</td><td>%bx</td><td>%bl</td><td align="center">被调用者保存</td></tr><tr><td>%rcx</td><td>%ecx</td><td>%cx</td><td>%cl</td><td align="center">第4个参数</td></tr><tr><td>%rdx</td><td>%edx</td><td>%dx</td><td>%dl</td><td align="center">第3个参数</td></tr><tr><td>%rsi</td><td>%esi</td><td>%si</td><td>%sil</td><td align="center">第2个参数</td></tr><tr><td>%rdi</td><td>%edi</td><td>%di</td><td>%dil</td><td align="center">第1个参数</td></tr><tr><td>%rbp</td><td>%ebp</td><td>%bp</td><td>%bpl</td><td align="center">被调用者保存</td></tr><tr><td>%rsp</td><td>%esp</td><td>%sp</td><td>%spl</td><td align="center">栈指针</td></tr><tr><td>%r8</td><td>%r8d</td><td>%r8w</td><td>%r8b</td><td align="center">第5个参数</td></tr><tr><td>%r9</td><td>%r9d</td><td>%r9w</td><td>%r9b</td><td align="center">第6个参数</td></tr><tr><td>%r10</td><td>%r10d</td><td>%r10w</td><td>%r10b</td><td align="center">调用者保存</td></tr><tr><td>%r11</td><td>%r11d</td><td>%r11w</td><td>%r11b</td><td align="center">调用者保存</td></tr><tr><td>%r12</td><td>%12d</td><td>%r12w</td><td>%r12b</td><td align="center">被调用者保存</td></tr><tr><td>%r13</td><td>%13d</td><td>%r13w</td><td>%r13b</td><td align="center">被调用者保存</td></tr><tr><td>%r14</td><td>%r14d</td><td>%r14w</td><td>%r14b</td><td align="center">被调用者保存</td></tr><tr><td>%r15</td><td>%r15d</td><td>%r15w</td><td>%r15b</td><td align="center">被调用者保存</td></tr></tbody></table><p>上面的参数顺序是syscall和call（64位）的参数顺序。在int指令（32位）中，使用堆栈传递参数（也可以使用寄存器或全局变量）</p><p>在int中断中：</p><ul><li>EBX - 第一个参数</li><li>ECX - 第二个参数</li><li>EDX - 第三个参数</li><li>ESI - 第四个参数</li><li>EDI - 第五个参数</li><li>R9 - 第六个参数</li></ul><p>六个以外的参数将通过栈传递</p><p>在细节方面，AX、BX、CX、DX 可以再向下进行划分</p><ul><li><code>AX(Accumulator Register)</code> ：累加寄存器，它主要用于输入/输出和大规模的指令运算。</li><li><code>BX(Base Register)</code>：基址寄存器，用来存储基础访问地址</li><li><code>CX(Count Register)</code>：计数寄存器，CX 寄存器在迭代的操作中会循环计数</li><li><code>DX(data Register)</code>：数据寄存器，它也用于输入/输出操作。它还与 AX 寄存器以及 DX 一起使用，用于涉及大数值的乘法和除法运算。</li></ul><p>这四种寄存器可以分为上半部分和下半部分，用作八个 8 位数据寄存器</p><ul><li><strong>「AX 寄存器可以分为两个独立的 8 位的 AH 和 AL 寄存器；」</strong></li><li><strong>「BX 寄存器可以分为两个独立的 8 位的 BH 和 BL 寄存器；」</strong></li><li><strong>「CX 寄存器可以分为两个独立的 8 位的 CH 和 CL 寄存器；」</strong></li><li><strong>「DX 寄存器可以分为两个独立的 8 位的 DH 和 DL 寄存器；」</strong></li></ul><hr><h3 id="1-3-段寄存器"><a href="#1-3-段寄存器" class="headerlink" title="1.3 段寄存器"></a>1.3 段寄存器</h3><p>CPU 包含四个段寄存器，用作程序指令，数据或栈的基础位置。实际上，对 IBM PC 上所有内存的引用都包含一个段寄存器作为基本位置。</p><p>段寄存器主要包含</p><ul><li><code>CS(Code Segment)</code> ：代码寄存器，程序代码的基础位置</li><li><code>DS(Data Segment)</code>：数据寄存器，变量的基本位置</li><li><code>SS(Stack Segment)</code>：栈寄存器，栈的基础位置</li><li><code>ES(Extra Segment)</code>：其他寄存器，内存中变量的其他基本位置。</li><li><code>FS</code>：其他寄存器，内存中变量的其他基本位置。</li><li><code>GS</code>：其他寄存器，内存中变量的其他基本位置。</li></ul><hr><h3 id="1-4-控制寄存器"><a href="#1-4-控制寄存器" class="headerlink" title="1.4 控制寄存器"></a>1.4 控制寄存器</h3><p>用于确定处理器的操作模式，还有当前正在执行的任务的特性。</p><p>不能直接访问控制寄存器中的值，但是可以把控制寄存器中包含的数据传送到通用寄存器，或改动通用寄存器的数据然后传送给控制寄存器。</p><ul><li><code>CR0</code>:控制曹组模式和处理器状态的系统标志</li><li><code>CR1</code>:当前没有使用</li><li><code>CR2</code>:内存页面错误信息</li><li><code>CR3</code>:内存页面目录信息</li><li><code>CR4</code>:支持处理器特性和说明处理器特性能力的标志。</li></ul><hr><h3 id="1-5-索引寄存器"><a href="#1-5-索引寄存器" class="headerlink" title="1.5 索引寄存器"></a>1.5 索引寄存器</h3><p>索引寄存器主要包含段地址的偏移量，索引寄存器主要分为</p><ul><li><code>RBP(Base Pointer)</code>：基指指针，它是栈寄存器上的偏移量，用来定位栈上变量</li><li><code>RSP(Stack Pointer)</code>: 栈指针，它是栈寄存器上的偏移量，用来定位栈顶</li><li><code>RSI(Source Index)</code>: 变址寄存器，用来拷贝源字符串</li><li><code>RDI(Destination Index)</code>: 目标变址寄存器，用来复制到目标字符串</li><li><code>RIP(Instruction Pointer)</code>: 指令寄存器，存放下一条指令的地址、</li></ul><hr><h3 id="1-6-标志寄存器"><a href="#1-6-标志寄存器" class="headerlink" title="1.6 标志寄存器"></a>1.6 标志寄存器</h3><p>汇编确定操作是否成功的唯一方法。</p><h4 id="状态标志"><a href="#状态标志" class="headerlink" title="状态标志"></a>状态标志</h4><table><thead><tr><th align="center">名称</th><th align="center">标志</th><th align="center">位</th><th>说明</th></tr></thead><tbody><tr><td align="center">进位</td><td align="center">CF</td><td align="center">0</td><td>说明运算是否发生进位，进位=1</td></tr><tr><td align="center">偶校验</td><td align="center">PF</td><td align="center">2</td><td>用于指示最后一个字节是否有偶数个1，偶数=1</td></tr><tr><td align="center">辅助进位</td><td align="center">AF</td><td align="center">4</td><td>用于支持二进制编码的十进制运算（BCD），进位=1</td></tr><tr><td align="center">零标志</td><td align="center">ZF</td><td align="center">6</td><td>运算结果为0=1</td></tr><tr><td align="center">符号标志</td><td align="center">SF</td><td align="center">7</td><td>运算结果为负数=1</td></tr><tr><td align="center">方向标志</td><td align="center">DF</td><td align="center">10</td><td>减少=1</td></tr><tr><td align="center">溢出标志</td><td align="center">OF</td><td align="center">11</td><td>指示运算结果有没有溢出，溢出=1。</td></tr><tr><td align="center">身份标志</td><td align="center">ID</td><td align="center">21</td><td>指示是否存在CPUID指令</td></tr></tbody></table><table><thead><tr><th>指令</th><th>描述</th></tr></thead><tbody><tr><td>CLC</td><td>清空进位标志（设为0）</td></tr><tr><td>CMC</td><td>对进位标志求反</td></tr><tr><td>STC</td><td>设置进位标志（设为1）</td></tr><tr><td>CLD</td><td>将DF标志清零</td></tr><tr><td>STD</td><td>设置DF标志</td></tr></tbody></table><h4 id="系统标志"><a href="#系统标志" class="headerlink" title="系统标志"></a>系统标志</h4><p>用于控制操作系统级别的操作。应用程序绝不应该试图修改系统标志。</p><table><thead><tr><th>名称</th><th>标志</th><th>位</th><th>说明</th></tr></thead><tbody><tr><td>陷阱标志</td><td>TF</td><td>8</td><td>置1时，启用单步模式，处理器一次只执行一条指令</td></tr><tr><td>中断使能标志</td><td>IF</td><td>9</td><td>控制处理器如何相应从外部源接收到的信号</td></tr><tr><td>I/O特权级别标志</td><td>IOPL</td><td>12-13</td><td>表明当前正在运行的任务的I/O特权级别。</td></tr><tr><td>嵌套任务标志</td><td>NT</td><td>14</td><td>控制当前正在运行的任务是否链接到前一个执行的任务</td></tr><tr><td>恢复标志</td><td>RF</td><td>16</td><td>控制处理器在调试模式中如何相应异常</td></tr><tr><td>虚拟8086模式标志</td><td>VM</td><td>17</td><td>表明处理器在8086模式中进行操作，而不是保护模式或时模式</td></tr><tr><td>对准检查标志</td><td>AC</td><td>18</td><td>用于启用内存引用的对准检查</td></tr><tr><td>虚拟中断标志</td><td>VIF</td><td>19</td><td>当处理器在虚拟模式中进行操作时，VIF起IF标志的作用</td></tr><tr><td>虚拟中断挂起标志</td><td>VIP</td><td>20</td><td>当处理器在虚拟模式中进行操作时，VIP表示一个中断正在被挂起</td></tr><tr><td>识别标志</td><td>ID</td><td>21</td><td>表示处理器是否支持CPUID指令</td></tr></tbody></table><hr><h3 id="1-7-专用寄存器"><a href="#1-7-专用寄存器" class="headerlink" title="1.7 专用寄存器"></a>1.7 专用寄存器</h3><p>用于大整数和浮点运算。</p><p>MMX （Multimedia Extension）为一种 SIMD 技术，即可通过一条指令执行多个数据运算；</p><p>SSE（Streaming SIMD Extension，流化SIMD拓展）</p><h4 id="XMM寄存器"><a href="#XMM寄存器" class="headerlink" title="XMM寄存器"></a>XMM寄存器</h4><p>和SSE技术一起引入。提供用于处理打包数据的16个128位XMM寄存器（`XMM0 - XMM15）。</p><p>提供4种额外的打包带符号整数数据类型：</p><ul><li>128位打包字节整数，即16个8字节整数。</li><li>128位打包字整数，即8个16位整数。</li><li>128位打包双字整数，即4个32位整数。</li><li>128位打包四字整数，即2个64位整数。</li></ul><p>提供2种额外的打包浮点数据类型：</p><ul><li>128位打包单精度浮点，即4个32位单精度浮点。</li><li>128位打包双精度浮点，即2个64位双精度浮点。</li></ul><p><code>movdqa</code>和<code>movdqu</code>指令用于把128位数据传送到XMM寄存器中。</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">movdqasrc, des<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>助记符A和U分别代表对准和不对准，他们表示数据是如何存储在内存中的。对于对准16个字节边界的数据，就使用A选项；否则，使用U选项。</p><h4 id="MMX寄存器"><a href="#MMX寄存器" class="headerlink" title="MMX寄存器"></a>MMX寄存器</h4><p>也是FPU寄存器。共有8个64位寄存器，分别为<code>MM0 – MM7</code>他们直接映射到FPU寄存器的R0到R7.但是，和FPU寄存器不同，MM寄存器是静态的，他们不能作为堆栈使用。</p><p>提供三种新的整形：</p><ul><li>64位打包字节整数，即8个8字节整数。</li><li>64位打包字整数，即4个16位整数。</li><li>64位打包双字整数，即2个32位整数。</li></ul><p>可以使用<code>movq</code>指令把数据传送到MMX寄存器</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">movqsrc, des<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>浮点类型：</p><table><thead><tr><th>数据类型</th><th>长度</th><th>精度（位）</th><th>小数位数精度</th><th>小数范围</th></tr></thead><tbody><tr><td>单精度</td><td>32</td><td>24</td><td>7</td><td>1.18 * 10 ^ -38至3.40 * 10 ^ 38</td></tr><tr><td>双精度</td><td>64</td><td>53</td><td>15</td><td>2.23 * 10 ^ -308至1.79 * 10 ^ 308</td></tr><tr><td>扩展精度</td><td>80</td><td>64</td><td>19</td><td>3.37 * 10 ^ -4932至1.18 * 10 ^ 4932</td></tr></tbody></table><hr><h3 id="1-8-寻址模式"><a href="#1-8-寻址模式" class="headerlink" title="1.8 寻址模式"></a>1.8 寻址模式</h3><table><thead><tr><th align="center">类型</th><th>格式</th><th>操作数值</th><th>名称</th></tr></thead><tbody><tr><td align="center">立即数</td><td>$Imm</td><td>Imm</td><td>立即数寻址</td></tr><tr><td align="center">寄存器</td><td>$ r_a $</td><td>$R[r_a]$</td><td>寄存器寻址</td></tr><tr><td align="center">存储器</td><td>Imm</td><td>M[ Imm ]</td><td>绝对寻址</td></tr><tr><td align="center">存储器</td><td>($r_a$)</td><td>M[ R[$r_a$] ]</td><td>间接寻址</td></tr><tr><td align="center">存储器</td><td>Imm($r_a$)</td><td>M[ Imm + R[$r_a$] ]</td><td>(基址+偏移量)寻址</td></tr><tr><td align="center">存储器</td><td>($r_b, r_i$)</td><td>M[ R[$r_b$] + R[$r_i$] ]</td><td>变址寻址</td></tr><tr><td align="center">存储器</td><td>Imm($r_b, r_i$)</td><td>M[ Imm + R[$r_b$] + R[$r_i$] ]</td><td>变址寻址</td></tr><tr><td align="center">存储器</td><td>($, r_i, s$)</td><td>M[ R[$r_i$] * s ]</td><td>比例变址寻址</td></tr><tr><td align="center">存储器</td><td>Imm($, r_i, s$)</td><td>M[ Imm + R[$r_i$] * s ]</td><td>比例变址寻址</td></tr><tr><td align="center">存储器</td><td>($r_b, r_i, s$)</td><td>M[ R[$r_b$] + R[$r_i$] * s ]</td><td>比例变址寻址</td></tr><tr><td align="center">存储器</td><td>Imm($r_b, r_i, s$)</td><td>M[ Imm + R[$r_b$] + R[$r_i$] * s ]</td><td>比例变址寻址</td></tr></tbody></table><p>符号r_a表示任意寄存器a，用R[r_a]来表示它的值。</p><p>M_b[Addr]表示对存储在内存中从地址开始的b个字节值的引用，为了简便，我们通常省去下标b。</p><hr><h3 id="1-9-常用段"><a href="#1-9-常用段" class="headerlink" title="1.9 常用段"></a>1.9 常用段</h3><p>数据段</p><p><code>.data</code>, <code>.rodata</code></p><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">&#x2F;&#x2F; 设置变量.section .datapi:.float 3.14159sizes:.long 100, 150, 200numer:.int 62,35,47buffer:.fill 10000 # 创建10000字节的缓冲区，并用零填充。&#x2F;&#x2F; 设置常量.equ factor, 3.equ MAXLEN, 100.equ LINUX_SYS_CALL, 0x80<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>BSS段</p><p><code>.comm</code>:声明未初始化的数据的通用内存区域</p><p><code>.lcomm</code>:声明未初始化的数据本地通用内存区域（static）</p><p>格式：<code>.comm symbol, length</code></p><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">.section .bss.lcomm buffer, 1000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>bss段声明的数据不包含在可执行程序中。</p><p>文本段</p><p>程序指令、代码的位置</p><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">.section .text.globl _start_start:...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="1-10-基本数据类型"><a href="#1-10-基本数据类型" class="headerlink" title="1.10 基本数据类型"></a>1.10 基本数据类型</h3><table><thead><tr><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>.ascii</td><td>非空字符’\0’(即:二进制0)结束的字符串</td></tr><tr><td>.asciz</td><td>以空字符’\0’(即:二进制0)结束的字符串</td></tr><tr><td>.string</td><td>以空字符’\0’(即:二进制0)结束的字符串</td></tr><tr><td>.byte</td><td>定长1字节整型,8位</td></tr><tr><td>.short</td><td>定长2字节整型,16位</td></tr><tr><td>.word</td><td>定长2字节整型,16位</td></tr><tr><td>.hword</td><td>定长2字节整型,16位</td></tr><tr><td>.int</td><td>定长4字节整型,32位</td></tr><tr><td>.long</td><td>定长4字节整型,32位</td></tr><tr><td>.quad</td><td>定长8字节整型,64位</td></tr><tr><td>.octa</td><td>定长16字节整型,128位</td></tr><tr><td>.uleb128</td><td>变长无符号整数,最多128位(16字节)</td></tr><tr><td>.sleb128</td><td>变长有符号整数,最多128位(16字节)</td></tr><tr><td>.single</td><td>定长单精度浮点数,4字节(32位)</td></tr><tr><td>.float</td><td>定长单精度浮点数,4字节(32位)</td></tr><tr><td>.double</td><td>定长双精度浮点数,8字节(64位)</td></tr></tbody></table><hr><h3 id="1-11-汇编指令"><a href="#1-11-汇编指令" class="headerlink" title="1.11 汇编指令"></a>1.11 汇编指令</h3><p>AT&amp;T格式：&lt;汇编指令&gt;  &lt;源操作数&gt;  &lt;目标操作数&gt;</p><p>​                    &lt;汇编指令&gt;  &lt;操作数&gt;</p><h4 id="数据传送指令"><a href="#数据传送指令" class="headerlink" title="数据传送指令"></a>数据传送指令</h4><table><thead><tr><th>指令</th><th>描述</th></tr></thead><tbody><tr><td>movb</td><td>传送1字节</td></tr><tr><td>movw</td><td>传送字（2字节）</td></tr><tr><td>movl</td><td>传送双字（4字节）</td></tr><tr><td>movq</td><td>传送四字（8字节）</td></tr></tbody></table><p>不能从内存传送到内存。</p><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">movl %eax, %ebxmovl $0, %eax.section .datavalue:.int 1list:.int 1,2,3,4,5movl value, %eax  # 传数据movl %eax, value  # 将数据传到对应的内存位置movl $value, %eax  # 传送地址movl %eax, (%edi) # 将数据传到%edi保存的内存地址movl %eax, 4(%edi) # 地址偏移movl $2,%edimovl list(, %edi, 4), %eax # 变址寻址<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>变址寻址: <code>movl base(off, index, size), %eax == (%eax = base + off + index*size)</code></p><h5 id="拓展整数"><a href="#拓展整数" class="headerlink" title="拓展整数"></a>拓展整数</h5><h6 id="拓展无符号整数"><a href="#拓展无符号整数" class="headerlink" title="拓展无符号整数"></a>拓展无符号整数</h6><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">movzxsrc, des<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>把长度小的无符号整数传送给长度大的无符号整数。</p><h6 id="拓展有符号整数"><a href="#拓展有符号整数" class="headerlink" title="拓展有符号整数"></a>拓展有符号整数</h6><p>把长度小的带符号整数传送给长度大的带符号整数。</p><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">movsxsrc, des<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="传送BCD值"><a href="#传送BCD值" class="headerlink" title="传送BCD值"></a>传送BCD值</h5><p><code>FBLD</code>和<code>FBSTP</code>指令把80位打包BCD值加载到FPU寄存器堆栈中以及从FPU寄存器堆栈获取这些值。</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">fbldsrc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="传送浮点值"><a href="#传送浮点值" class="headerlink" title="传送浮点值"></a>传送浮点值</h5><p><code>FLD</code>指令用于把浮点值传送入FPU堆栈，<code>FLDS</code>用于单精度浮点数，<code>FLDL</code>用于双精度浮点。</p><p><code>FST</code>指令用于从FPU堆栈获取浮点值，<code>FSTS</code>用于单精度浮点数，<code>FSTL</code>用于双精度浮点。</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">fldssrc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="传送SSE浮点值"><a href="#传送SSE浮点值" class="headerlink" title="传送SSE浮点值"></a>传送SSE浮点值</h5><p>用于打包单精度浮点数据</p><table><thead><tr><th>指令</th><th>描述</th></tr></thead><tbody><tr><td>MOVAPS</td><td>把4个对准的打包单精度值传送到XMM寄存器或内存</td></tr><tr><td>MOVUPS</td><td>把4个不对准的打包单精度值传送到XMM寄存器或内存</td></tr><tr><td>MOVSS</td><td>把1个单精度值传送到寄存器或内存的低双字</td></tr><tr><td>MOVLPS</td><td>把2个单精度值传送到寄存器或内存的低四字</td></tr><tr><td>MOVHPS</td><td>把2个单精度值传送到寄存器或内存的高四字</td></tr><tr><td>MOVLHPS</td><td>把2个单精度值从低四字传送到高四字</td></tr><tr><td>MOVHLPS</td><td>把2个单精度值从高四字传送到低四字</td></tr></tbody></table><h5 id="传送SSE2浮点值"><a href="#传送SSE2浮点值" class="headerlink" title="传送SSE2浮点值"></a>传送SSE2浮点值</h5><p>用于打包双精度浮点数据类型</p><table><thead><tr><th>指令</th><th>描述</th></tr></thead><tbody><tr><td>MOVAPD</td><td>把2个对准的双精度值传送到XMM寄存器或内存</td></tr><tr><td>MOVUPD</td><td>把2个不对准的双精度值传送到XMM寄存器或内存</td></tr><tr><td>MOVSD</td><td>把1个双精度值传送到XMM寄存器或内存的低四字</td></tr><tr><td>MOVHPD</td><td>把1个双精度值传送到XMM寄存器或内存的高四字</td></tr><tr><td>MOVLPD</td><td>把1个双精度值传送到XMM寄存器或内存的低四字</td></tr></tbody></table><h5 id="SSE3"><a href="#SSE3" class="headerlink" title="SSE3"></a>SSE3</h5><table><thead><tr><th>指令</th><th>描述</th></tr></thead><tbody><tr><td>MOVSHDUP</td><td>从内存或XMM寄存器传送128位值，复制第2和第4个32位元素(DCBA –&gt; DDBB)</td></tr><tr><td>MOVSLDUP</td><td>从内存或XMM寄存器传送128位值，复制第1和第3个32位元素(DCBA –&gt; CCAA)</td></tr><tr><td>MOVDDUP</td><td>从内存或XMM寄存器传送64位双精度浮点值，把它复制到128位XMM寄存器(A –&gt; AA)</td></tr></tbody></table><h4 id="条件传送指令"><a href="#条件传送指令" class="headerlink" title="条件传送指令"></a>条件传送指令</h4><p>cmov 根据标志寄存器的值触发跳转操作。</p><h6 id="无符号传送指令"><a href="#无符号传送指令" class="headerlink" title="无符号传送指令"></a>无符号传送指令</h6><table><thead><tr><th>指令对</th><th>描述</th><th>ELAGES状态</th></tr></thead><tbody><tr><td>cmova / comvnbe</td><td>大于/不小于或等于</td><td>(CF or ZF) = 0</td></tr><tr><td>cmovae / cmovnb</td><td>大于或等于/不小于</td><td>CF = 0</td></tr><tr><td>cmovnc</td><td>无进位</td><td>CF = 0</td></tr><tr><td>cmovb / cmovnae</td><td>小于/不大于或等于</td><td>CF = 1</td></tr><tr><td>cmovc</td><td>进位</td><td>CF = 1</td></tr><tr><td>cmovbe / cmovna</td><td>小于或等于/不大于</td><td>(CF or ZF) = 1</td></tr><tr><td>cmove / cmovz</td><td>等于 / 零</td><td>ZF  = 1</td></tr><tr><td>cmovne / cmovnz</td><td>不等于/不为零</td><td>ZF = 0</td></tr><tr><td>cmovp / cmovpe</td><td>奇偶校验/偶校验</td><td>PF = 1</td></tr><tr><td>cmovnp / cmovpo</td><td>非奇偶校验/偶校验</td><td>PF = 0</td></tr></tbody></table><h6 id="带符号传送指令"><a href="#带符号传送指令" class="headerlink" title="带符号传送指令"></a>带符号传送指令</h6><table><thead><tr><th>指令对</th><th>描述</th><th>EFLAGS状态</th></tr></thead><tbody><tr><td>cmovge / cmovnl</td><td>大于或者等于/不小于</td><td>(SF 亦或 OF) = 0</td></tr><tr><td>cmovl / cmovnge</td><td>小于 / 不大于或等于</td><td>(SF 亦或 OF) = 1</td></tr><tr><td>cmovle / cmovng</td><td>小于或者等于 / 不大于</td><td>((SF 亦或 OF) 或 ZF) = 1</td></tr><tr><td>cmovo</td><td>溢出</td><td>OF = 1</td></tr><tr><td>cmovno</td><td>未溢出</td><td>OF = 1</td></tr><tr><td>cmovs</td><td>带符号（负）</td><td>SF = 1</td></tr><tr><td>cmovns</td><td>无符号（非负）</td><td>SF = 0</td></tr></tbody></table><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">movl  value, %ecxcmp   %ebx, %ecxcmova %ecx, %ebx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>把value加载到ecx，然后使用cmp指令把这个值和ebx中的值比较。cmp指令从第二个操作数减去第一个操作数并设置EFLAGS寄存器。如果ecx中的值大于ebx中的值，就是用cmova指令把ebx中的值替换为ecx中的值。</p><h4 id="数据交换指令"><a href="#数据交换指令" class="headerlink" title="数据交换指令"></a>数据交换指令</h4><table><thead><tr><th>指令</th><th>描述</th></tr></thead><tbody><tr><td>xchg</td><td>在两个寄存器之间或者寄存器和内存位置之间交换值</td></tr><tr><td>bswap</td><td>反转一个32位寄存器中的字节顺序</td></tr><tr><td>xadd</td><td>交换两个值并把总和存储在目标操作数中</td></tr><tr><td>cmpxchg</td><td>把一个值和一个外部值进行比较，并且交换它和另一个值</td></tr><tr><td>cmpxchg8b</td><td>比较两个64位值，并且交换它们。</td></tr></tbody></table><h5 id="1-xchg"><a href="#1-xchg" class="headerlink" title="1. xchg"></a>1. xchg</h5><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">xchgopd1, opd2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>opd1,opd2不能都是内存位置，长度必须相同。当其中一个操作数是内存位置时，处理器的lock信号被自动表明，防止在交换过程中任何其他处理器访问这个内存位置。这个指令比较耗时，可能对程序性能有不良的影响。</p><h5 id="2-bswap"><a href="#2-bswap" class="headerlink" title="2. bswap"></a>2. bswap</h5><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">bswapopd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>反转一个32位寄存器中的字节顺序，比如将小端转换为大端（或大端转换为小端）。</p><h5 id="3-xadd"><a href="#3-xadd" class="headerlink" title="3. xadd"></a>3. xadd</h5><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">xaddsrc, des<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>src必须是寄存器，des包含相加的结果。</p><h5 id="4-cmpxchg"><a href="#4-cmpxchg" class="headerlink" title="4. cmpxchg"></a>4. cmpxchg</h5><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">cmpxchgsrc, des<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>比较目标操作数和eax，ax或al寄存器的值。如果两个值相等，就把源操作数的值加载到目标操作数中。如果两个值不等，就把目标操作数加载到eax，ax，或者al寄存器中。</p><h5 id="5-cmpxchg8b"><a href="#5-cmpxchg8b" class="headerlink" title="5. cmpxchg8b"></a>5. cmpxchg8b</h5><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">cmpxchg8b des<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>des引用一个内存位置，其中的8字节值会与EDX和EAX寄存器的值进行比较，（EDX是高位寄存器，EAX是低位寄存器）。如果目标值和EDX:EAX寄存器的值匹配，就把位于ECX:EBX寄存器的值存送给目标内存位置。如果不匹配，就把目标内存位置地址中的值加载到EDX:EAX寄存器对中。</p><h4 id="数据转换指令"><a href="#数据转换指令" class="headerlink" title="数据转换指令"></a>数据转换指令</h4><p>用于不同数据类型之间的转换</p><table><thead><tr><th>指令</th><th>转换</th></tr></thead><tbody><tr><td>CVTDQ2PD</td><td>打包双字整数到打包双精度FP（XMM）</td></tr><tr><td>CVTDQ2PS</td><td>打包双字整数到打包单精度FP（XMM）</td></tr><tr><td>CVTPD2DQ</td><td>打包双精度FP到打包双字整数（XMM）</td></tr><tr><td>CVTPD2PI</td><td>打包双精度FP到打包双字整数（MMX）</td></tr><tr><td>CVTPD2PS</td><td>打包双精度FP到打包单精度FP（XMM）</td></tr><tr><td>CVTPI2DP</td><td>打包双字整数到打包双精度FP（XMM）</td></tr><tr><td>CVTPI2PS</td><td>打包双字整数到打包单精度FP（XMM）</td></tr><tr><td>CVTPS2DQ</td><td>打包单精度FP到打包双字整数（XMM）</td></tr><tr><td>CVTPS2PD</td><td>打包单精度FP到打包双精度FP（XMM）</td></tr><tr><td>CVTPS2PI</td><td>打包单精度FP到打包双字整数（MMX）</td></tr><tr><td>CVTTPD2PI</td><td>打包双精度FP到打包双字整数（MMX，截断）</td></tr><tr><td>CVTTPD2DQ</td><td>打包双精度FP到打包双字整数（XMM，截断）</td></tr><tr><td>CVTTPS2DQ</td><td>打包单精度FP到打包双字整数（XMM，截断）</td></tr><tr><td>CVTTPS2PI</td><td>打包单精度FP到打包双字整数（MMX，截断）</td></tr></tbody></table><h4 id="压入和弹出所有寄存器"><a href="#压入和弹出所有寄存器" class="headerlink" title="压入和弹出所有寄存器"></a>压入和弹出所有寄存器</h4><table><thead><tr><th>指令</th><th>描述</th></tr></thead><tbody><tr><td>PUSHA / POPA</td><td>压入或弹出所有16位通用寄存器</td></tr><tr><td>PUSHAD / POPAD</td><td>压入或弹出所有32位通用寄存器</td></tr><tr><td>PUSHF / POPF</td><td>压入或弹出EFLAGS寄存器的低16位</td></tr><tr><td>PUSHFD / POPFD</td><td>压入或弹出EFLAGS寄存器的全部32位</td></tr></tbody></table><h4 id="无条件分支"><a href="#无条件分支" class="headerlink" title="无条件分支"></a>无条件分支</h4><h5 id="跳转"><a href="#跳转" class="headerlink" title="跳转"></a>跳转</h5><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">jmp  location<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>jmp， je， jne， </p><p>signed：jl，jle，jg，jge，</p><p>unsigned：jb，jbe，ja，jae</p><h5 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h5><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">call addr<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">function_lable:pushl %ebpmovl%esp, %ebp&lt; todo &gt;movl%ebp, %esppopl%ebpret<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="中断"><a href="#中断" class="headerlink" title="中断"></a>中断</h5><p>硬件中断</p><p>软件中断</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">int$0x80<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="条件分支"><a href="#条件分支" class="headerlink" title="条件分支"></a>条件分支</h4><h5 id="条件跳转指令"><a href="#条件跳转指令" class="headerlink" title="条件跳转指令"></a>条件跳转指令</h5><p>条件分支只和EFLAGS寄存器中的五位有关：</p><ul><li>进位（CF）- 第0位</li><li>溢出（OF）- 第11位</li><li>奇偶校验（PF） - 第2位</li><li>符号（SF）- 第7位</li><li>零（ZF） - 第6位</li></ul><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">jxxaddr<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><table><thead><tr><th>指令</th><th>描述</th><th>EFLAGS</th></tr></thead><tbody><tr><td>ja</td><td>如果大于（above），则跳转</td><td>CF = 0 and ZF = 0</td></tr><tr><td>jae</td><td>大于（above）或等于</td><td>CF = 0</td></tr><tr><td>jb</td><td>小于（above）</td><td>CF = 1</td></tr><tr><td>jbe</td><td>小于（above）等于</td><td>CF = 1 or ZF = 1</td></tr><tr><td>jc</td><td>进位</td><td>CF = 1</td></tr><tr><td>jcxz</td><td>如果CX寄存器为0，则跳转</td><td></td></tr><tr><td>jecxz</td><td>如果ECX寄存器为0，则跳转</td><td></td></tr><tr><td>je</td><td>如果相等，则跳转</td><td>ZF = 1</td></tr><tr><td>jg</td><td>大于（greater）</td><td>ZF = 0 and SF = 0F</td></tr><tr><td>jge</td><td>大于（greater）或等于</td><td>SF = OF</td></tr><tr><td>jl</td><td>小于（less）</td><td>SF &lt;&gt; OF</td></tr><tr><td>jle</td><td>小于（less）或等于</td><td>ZF = 1 or SF &lt;&gt; OF</td></tr><tr><td>jna</td><td>不大于（above）</td><td>CF = 1 or ZF = 1</td></tr><tr><td>jnae</td><td>不大于（above）或等于</td><td>CF = 1</td></tr><tr><td>jnb</td><td>不小于（below）</td><td>CF = 0</td></tr><tr><td>jnbe</td><td>不小于（below）或等于</td><td>CF = 0 and ZF = 0</td></tr><tr><td>jnc</td><td>无进位</td><td>CF = 0</td></tr><tr><td>jne</td><td>不等于</td><td>ZF = 0</td></tr><tr><td>jng</td><td>不大于（greater）</td><td>ZF = 1 or SF &lt;&gt; OF</td></tr><tr><td>gnge</td><td>不大于（greater）或等于</td><td>SF &lt;&gt; OF</td></tr><tr><td>jnl</td><td>不小于（less）</td><td>SF = OF</td></tr><tr><td>jnle</td><td>不小于（less）或等于</td><td>ZF = 0 and SF = 0F</td></tr><tr><td>jno</td><td>不溢出</td><td>OF = 0</td></tr><tr><td>JNP</td><td>不奇偶校验</td><td>PF = 0</td></tr><tr><td>jns</td><td>无符号</td><td>SF = 0</td></tr><tr><td>jnz</td><td>非零</td><td>ZF = 0</td></tr><tr><td>jo</td><td>溢出</td><td>OF = 1</td></tr><tr><td>jp</td><td>奇偶校验</td><td>PF = 1</td></tr><tr><td>jpe</td><td>偶校验</td><td>PF = 1</td></tr><tr><td>jpo</td><td>奇校验</td><td>PF = 0</td></tr><tr><td>js</td><td>带符号</td><td>SF = 1</td></tr><tr><td>jz</td><td>为零</td><td>ZF = 1</td></tr></tbody></table><p>无符号使用above和below，有符号使用greater和less.</p><h5 id="高级条件分支"><a href="#高级条件分支" class="headerlink" title="高级条件分支"></a>高级条件分支</h5><p>if、else、while、for等反汇编查看代码。</p><h5 id="优化分支指令"><a href="#优化分支指令" class="headerlink" title="优化分支指令"></a>优化分支指令</h5><h6 id="消除分支"><a href="#消除分支" class="headerlink" title="消除分支"></a>消除分支</h6><p>使用条件数据传送指令，或减少跳转。</p><h6 id="首先编写可预测分支的代码"><a href="#首先编写可预测分支的代码" class="headerlink" title="首先编写可预测分支的代码"></a>首先编写可预测分支的代码</h6><p>把最可能采用的代码安排在向前跳转的顺序执行语句中</p><h6 id="展开循环"><a href="#展开循环" class="headerlink" title="展开循环"></a>展开循环</h6><p>尽可能地消除小型循环</p><h4 id="循环指令"><a href="#循环指令" class="headerlink" title="循环指令"></a>循环指令</h4><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">loopaddr<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><table><thead><tr><th>指令</th><th>描述</th></tr></thead><tbody><tr><td>LOOP</td><td>循环直到ECX寄存器为零</td></tr><tr><td>LOOPE / LOOPZ</td><td>循环直到ECX寄存器为0，或没有设置ZF标志</td></tr><tr><td>LOOPNE / LOOPNZ</td><td>循环直到ECX寄存器为0，或设置了ZF标志</td></tr></tbody></table><h4 id="比较指令"><a href="#比较指令" class="headerlink" title="比较指令"></a>比较指令</h4><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">cmp opd1, opd2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>把第二个操作数和第一个操作数比较。在幕后执行减法操作(<code>opd2 - opd1</code>).</p><h4 id="整数运算指令"><a href="#整数运算指令" class="headerlink" title="整数运算指令"></a>整数运算指令</h4><p>整数运算包括加，减，乘，除</p><h5 id="加"><a href="#加" class="headerlink" title="加"></a>加</h5><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">addsrc des<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>运算结果：<code>des = src + des</code></p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">adcsrc des<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>adc指令执行两个整数加法，并且把前一个add指令产生的进位标志的值包含其中。</p><h5 id="减"><a href="#减" class="headerlink" title="减"></a>减</h5><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">sub src, des<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>运算结果：<code>des = des - src</code></p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">sbb src, des<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>利用进位执行大的无符号整数减法操作，进位标志被添加到src值。</p><h6 id="递增和递减"><a href="#递增和递减" class="headerlink" title="递增和递减"></a>递增和递减</h6><p>主要用于无符号整数</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">dec desinc des<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="乘"><a href="#乘" class="headerlink" title="乘"></a>乘</h5><h6 id="无符号"><a href="#无符号" class="headerlink" title="无符号"></a>无符号</h6><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">mul src<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>默认目标操作数为eax寄存器</p><p>由于乘法可能产生很大的值，所以MUL指令的目标位置必须是源操作数的两倍长度。</p><table><thead><tr><th>源操作数长度</th><th>目标操作数</th><th>目标位置</th></tr></thead><tbody><tr><td>8</td><td>AL</td><td>AX</td></tr><tr><td>16位</td><td>AX</td><td>DX：AX</td></tr><tr><td>32位</td><td>EAX</td><td>EDX：AX</td></tr></tbody></table><h6 id="带符号"><a href="#带符号" class="headerlink" title="带符号"></a>带符号</h6><ul><li>第一种格式:</li></ul><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">imul src<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其他规则同mul.</p><ul><li>第二种格式：</li></ul><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">imul src, des<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意溢出。</p><ul><li>第三种格式</li></ul><pre class="line-numbers language-none"><code class="language-none">imul mul, src, des<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>mul - 立即数，src - 寄存器或内存中的值，des - 必须是寄存器。</p><p>运算结果：<code>des = mul * src</code> </p><h5 id="除"><a href="#除" class="headerlink" title="除"></a>除</h5><h6 id="无符号除法"><a href="#无符号除法" class="headerlink" title="无符号除法"></a>无符号除法</h6><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">div divisor<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>divisor - 除数，被除数位于EAX.商和余数存储在被除数使用的相同寄存器中。</p><table><thead><tr><th>被除数</th><th>被除数长度</th><th>商</th><th>余数</th></tr></thead><tbody><tr><td>AX</td><td>16位</td><td>AL</td><td>AH</td></tr><tr><td>DX：AX</td><td>32位</td><td>AX</td><td>DX</td></tr><tr><td>EDX：EAX</td><td>64位</td><td>EAX</td><td>EDX</td></tr></tbody></table><p>tip：此操作会改变DX或EDX寄存器的值.</p><h6 id="带符号除法"><a href="#带符号除法" class="headerlink" title="带符号除法"></a>带符号除法</h6><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">idiv divisor<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>规则同上。</p><h5 id="位移"><a href="#位移" class="headerlink" title="位移"></a>位移</h5><ul><li>左移</li></ul><p>SAL - 算术左移， SHL - 逻辑左移。这两个指令执行相同的操作，并且可以互换。格式：</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">saldessal%cl, dessal shifter, des<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>第一种格式把des的值向左移1位；第二种格式把des的值左移CL寄存器中指定的位数；第三个格式左移shifter值指定的位数。</p><h6 id="右移"><a href="#右移" class="headerlink" title="右移"></a>右移</h6><p>SHR - 用于无符号整数</p><p>SAR - 用于带符号整数</p><p>格式同上。</p><h6 id="循环移位"><a href="#循环移位" class="headerlink" title="循环移位"></a>循环移位</h6><p>溢出的位放回另一端，而不是丢弃。</p><table><thead><tr><th>指令</th><th>描述</th></tr></thead><tbody><tr><td>ROL</td><td>循环左移</td></tr><tr><td>ROR</td><td>循环右移</td></tr><tr><td>RCL</td><td>循环左移，包含进位标志</td></tr><tr><td>RCR</td><td>循环右移，包含进位标志</td></tr></tbody></table><p>最后两条指令使用进位标志作为附加位的位置，来支持9位移位。</p><p>循环位移指令格式同上。</p><h5 id="十进制运算"><a href="#十进制运算" class="headerlink" title="十进制运算"></a>十进制运算</h5><h5 id="不打包BCD运算"><a href="#不打包BCD运算" class="headerlink" title="不打包BCD运算"></a>不打包BCD运算</h5><p>用于把二进制运算结果转换为不打包BCD格式</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">AAA&#x2F;&#x2F; 调整加法操作的结果AAS&#x2F;&#x2F; 调整减法操作的结果AAM&#x2F;&#x2F; 调整乘法操作的结果AAD&#x2F;&#x2F; 准备除法操作的被除数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这些指令必须和一般的无符号整数指令ADD，ADC，SUB，SBB，MUL，DIV组合在一起使用。AAA，AAS，AAM指令在他们各自的操作之后使用，把二进制结果转换为不打包BCD格式。AAD指令有些不同，在DIV指令之前使用它，用于准备被除数以便生成不打包BCD结果。</p><p>这些指令都使用一个隐含的操作数 – AL寄存器。</p><h5 id="打包BCD运算"><a href="#打包BCD运算" class="headerlink" title="打包BCD运算"></a>打包BCD运算</h5><p>用于把二进制运算结果转换为打包BCD格式</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">DAA&#x2F;&#x2F; 调整ADD或者ADC指令的结果DAS&#x2F;&#x2F; 调整USB或者SBB指令的结果<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="逻辑指令"><a href="#逻辑指令" class="headerlink" title="逻辑指令"></a>逻辑指令</h4><h5 id="布尔逻辑"><a href="#布尔逻辑" class="headerlink" title="布尔逻辑"></a>布尔逻辑</h5><p>AND, NOT, OR,XOR</p><p>格式：</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">and  src,des<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>计算结果：<code>des = des &amp; src</code></p><p>使用XOR对寄存器进行清零操作比使用MOV要快。</p><h5 id="位测试"><a href="#位测试" class="headerlink" title="位测试"></a>位测试</h5><p>确定值内的单一位是否被测试为1，比如EFLAGS寄存器的某一位</p><h4 id="MMX指令"><a href="#MMX指令" class="headerlink" title="MMX指令"></a>MMX指令</h4><h5 id="加法-减法指令"><a href="#加法-减法指令" class="headerlink" title="加法/减法指令"></a>加法/减法指令</h5><table><thead><tr><th>MMX指令</th><th>描述</th></tr></thead><tbody><tr><td>paddb</td><td>使用环绕的打包字节整数加法</td></tr><tr><td>paddw</td><td>使用环绕的打包字整数加法</td></tr><tr><td>paddd</td><td>使用环绕的打包双字整数加法</td></tr><tr><td>paddsb</td><td>使用带符号饱和的打包字节整数加法</td></tr><tr><td>paddsw</td><td>使用带符号饱和的打包字整数加法</td></tr><tr><td>paddusb</td><td>使用无符号饱和的打包字节整数加法</td></tr><tr><td>paddusw</td><td>使用无符号饱和的打包字整数加法</td></tr><tr><td>psubb</td><td>使用环绕的打包字节整数减法</td></tr><tr><td>psubw</td><td>使用环绕的打包字整数减法</td></tr><tr><td>psybd</td><td>使用环绕的打包双字整数减法</td></tr><tr><td>psubsb</td><td>使用带符号饱和的打包字节整数减法</td></tr><tr><td>psubsw</td><td>使用带符号饱和的打包字整数减法</td></tr><tr><td>psubusb</td><td>使用无符号饱和的打包字节整数减法</td></tr><tr><td>psubusw</td><td>使用无符号饱和的打包字整数减法</td></tr></tbody></table><p>每个MMX数学操作都有相同的格式：</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">paddsb src, des<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>src可以是MMX寄存器或64位内存位置，des是MMX寄存器。运算结果：<code>des = src + des</code></p><h5 id="乘法指令"><a href="#乘法指令" class="headerlink" title="乘法指令"></a>乘法指令</h5><p>带符号整数值乘法：PMULLW，PMULHW</p><p>无符号整数值乘法：PMULLUW，PMULHUW</p><p>附加指令：PMADDWD</p><h5 id="逻辑和位移指令"><a href="#逻辑和位移指令" class="headerlink" title="逻辑和位移指令"></a>逻辑和位移指令</h5><table><thead><tr><th>指令</th><th>描述</th></tr></thead><tbody><tr><td>pand</td><td>按位与运算</td></tr><tr><td>pandn</td><td>按位先非后与运算</td></tr><tr><td>por</td><td>按位或运算</td></tr><tr><td>pxor</td><td>按位异或运算</td></tr><tr><td>psll</td><td>逻辑左移，用0填充空位</td></tr><tr><td>psra</td><td>逻辑右移，用0填充空位</td></tr></tbody></table><p>格式：</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">paddsb src, des<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>src可是是MMX寄存器或64位内存位置，des必须是MMX寄存器，左移可以使用字，双字，或四字操作数，还有要位移的位置数量；右移可以使用字或双字操作数，还有要位移的位置数量。</p><h5 id="比较指令-1"><a href="#比较指令-1" class="headerlink" title="比较指令"></a>比较指令</h5><table><thead><tr><th align="left">指令</th><th>描述</th></tr></thead><tbody><tr><td align="left">pcmpeqb</td><td>比较打包字节整数值的相等性</td></tr><tr><td align="left">pcmpeqw</td><td>比较打包字整数值的相等性</td></tr><tr><td align="left">pcmpeqd</td><td>比较打包双字整数值的相等性</td></tr><tr><td align="left">pcmpgtb</td><td>判断打包字节整数值是否大于另一个</td></tr><tr><td align="left">pcmpgtw</td><td>判断打包字整数值是否大于另一个</td></tr><tr><td align="left">pcmpgtd</td><td>判断打包双字整数值是否大于另一个</td></tr></tbody></table><h4 id="SSE指令"><a href="#SSE指令" class="headerlink" title="SSE指令"></a>SSE指令</h4><h5 id="传送数据"><a href="#传送数据" class="headerlink" title="传送数据"></a>传送数据</h5><table><thead><tr><th>指令</th><th>描述</th></tr></thead><tbody><tr><td>movaps</td><td>把4个对准的单精度值传送到XMM寄存器或者内存</td></tr><tr><td>movups</td><td>把4个不对准的单精度值传送到XMM寄存器或者内存</td></tr><tr><td>movss</td><td>把1个单精度值传送到XMM寄存器或者内存的低位双字</td></tr><tr><td>movlps</td><td>把2个单精度值传送到XMM寄存器或者内存的低四字</td></tr><tr><td>movhps</td><td>把2个单精度值传送到XMM寄存器或者内存的高双字</td></tr><tr><td>movlhps</td><td>把2个单精度值从低四字传送到高四字</td></tr><tr><td>movhlps</td><td>把2个单精度值从高四字传送到低四字</td></tr></tbody></table><h5 id="处理数据"><a href="#处理数据" class="headerlink" title="处理数据"></a>处理数据</h5><h6 id="运算指令"><a href="#运算指令" class="headerlink" title="运算指令"></a>运算指令</h6><table><thead><tr><th>指令</th><th>描述</th></tr></thead><tbody><tr><td>addps</td><td>将两个打包值相加</td></tr><tr><td>subps</td><td>将两个打包值相减</td></tr><tr><td>mulps</td><td>将两个打包值相乘</td></tr><tr><td>divps</td><td>将两个打包值相除</td></tr><tr><td>rcpps</td><td>计算打包值的倒数</td></tr><tr><td>sqrtps</td><td>计算打包值的平方根</td></tr><tr><td>rsqrtps</td><td>计算打包值的平方根倒数</td></tr><tr><td>maxps</td><td>计算两个打包值中的最大值</td></tr><tr><td>minps</td><td>计算两个打包值中的最小值</td></tr><tr><td>andps</td><td>计算两个打包值的按位逻辑与</td></tr><tr><td>andnps</td><td>计算两个打包值的按位逻辑与非</td></tr><tr><td>orps</td><td>计算两个打包值的按位逻辑或</td></tr><tr><td>xorps</td><td>计算两个打包值的按位异或</td></tr></tbody></table><p>这些指令都使用两个操作数，源操作数可以是128位内存或XMM寄存器。目标寄存器必须是寄存器，结果保存在XMM0。</p><h6 id="比较指令-2"><a href="#比较指令-2" class="headerlink" title="比较指令"></a>比较指令</h6><table><thead><tr><th>指令</th><th>描述</th></tr></thead><tbody><tr><td>cmpps</td><td>比较打包值</td></tr><tr><td>cmpss</td><td>比较标量值</td></tr><tr><td>comiss</td><td>比较标量值并且设置EFLAGS寄存器</td></tr><tr><td>ucomiss</td><td>比较标量值（包括非法值）并且设置EFLAGS寄存器</td></tr></tbody></table><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">smpps  imp, src, des<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>des必须是XMM寄存器，src可以是128位内存位置或XMM寄存器，imp是一个无符号整数值，它确定将指令执行什么类型的比较。</p><table><thead><tr><th>执行值</th><th>描述</th></tr></thead><tbody><tr><td>0</td><td>等于</td></tr><tr><td>1</td><td>小于</td></tr><tr><td>2</td><td>小于或等于</td></tr><tr><td>3</td><td>无序</td></tr><tr><td>4</td><td>不等于</td></tr><tr><td>5</td><td>不小于</td></tr><tr><td>6</td><td>不小于或等于</td></tr><tr><td>7</td><td>有序</td></tr></tbody></table><p>比较结果为真时，XMM0中是位掩码（全1为真，全0为假）。</p><h5 id="整数指令"><a href="#整数指令" class="headerlink" title="整数指令"></a>整数指令</h5><table><thead><tr><th>指令</th><th>描述</th></tr></thead><tbody><tr><td>pavgb</td><td>计算打包无符号字节整数的平均值</td></tr><tr><td>pavgw</td><td>计算打包无符号字整数的平均值</td></tr><tr><td>pextrw</td><td>把一个字从MMX寄存器复制到通用寄存器</td></tr><tr><td>pinsrw</td><td>把一个字从通用寄存器复制到MMX寄存器</td></tr><tr><td>pmaxub</td><td>计算打包无符号字节整数的最大值</td></tr><tr><td>pmaxsw</td><td>计算打包带符号字整数的最大值</td></tr><tr><td>pminub</td><td>计算打包无符号字节整数的最小值</td></tr><tr><td>pminsw</td><td>计算打包带符号字整数的最小值</td></tr><tr><td>pmulhuw</td><td>将打包无符号字整数相乘并且存储高位结果</td></tr><tr><td>psadbw</td><td>计算无符号字节整数的绝对差的总和</td></tr></tbody></table><h4 id="SSE2指令"><a href="#SSE2指令" class="headerlink" title="SSE2指令"></a>SSE2指令</h4><h5 id="传送数据-1"><a href="#传送数据-1" class="headerlink" title="传送数据"></a>传送数据</h5><table><thead><tr><th>指令</th><th>描述</th></tr></thead><tbody><tr><td>movapd</td><td>把2个对准的双精度值传送到XMM寄存器或内存</td></tr><tr><td>movupd</td><td>把2个不对准的双精度值传送到XMM寄存器或内存</td></tr><tr><td>movdqa</td><td>把2个对准的四字整数值传送到XMM寄存器或内存</td></tr><tr><td>movdqu</td><td>把2个不对准的四字整数值传送到XMM寄存器或内存</td></tr><tr><td>movsd</td><td>把1个双精度值传送到XMM寄存器或内存的低位四字</td></tr><tr><td>movhpd</td><td>把1个双精度值传送到XMM寄存器或内存的高位四字</td></tr><tr><td>movlpd</td><td>把1个双精度值传送到XMM寄存器或内存的低位四字</td></tr></tbody></table><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">movapd  packedvalued, %xmm0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="处理数据-1"><a href="#处理数据-1" class="headerlink" title="处理数据"></a>处理数据</h5><table><thead><tr><th>指令</th><th>描述</th></tr></thead><tbody><tr><td>addpd</td><td>将打包双精度浮点值相加</td></tr><tr><td>addsd</td><td>将标量双精度浮点值相加</td></tr><tr><td>paddsb</td><td>将打包带符号字节整数值相加</td></tr><tr><td>paddsw</td><td>将打包带符号字整数值相加</td></tr><tr><td>paddd</td><td>将打包双字整数值相加</td></tr><tr><td>paddq</td><td>将打包四字整数值相加</td></tr></tbody></table><p>这些选项也存在与乘法和除法中（MULPD，MULSD，DIVPD，DIVSD等），和SSE一样。SSE2也提供专门的数学操作：SQRT，MAX，MIN。</p><h4 id="SSE3指令"><a href="#SSE3指令" class="headerlink" title="SSE3指令"></a>SSE3指令</h4><table><thead><tr><th>指令</th><th>描述</th></tr></thead><tbody><tr><td>fisttp</td><td>把1个FPU寄存器的值转换为整数（使用舍入）并且从FPU堆栈中弹出</td></tr><tr><td>lddqu</td><td>快速地从内存加载128位不对准的数据</td></tr><tr><td>movshdup</td><td>传送128位值，复制第2个和第4个32位数据元素</td></tr><tr><td>movsldup</td><td>传送128位值，复制第1个和第4个32位数据元素</td></tr><tr><td>movddup</td><td>传送64位值，复制值，使之称为128位</td></tr><tr><td>addsubps</td><td>对一个打包单精度浮点值的第2和第4个32位值做加法，对第1和第3个32位值做减法</td></tr><tr><td>addsubpd</td><td>对1个打包双精度浮点值，对第一对64位值执行减法，对第2对执行加法。</td></tr><tr><td>haddps</td><td>对操作数的相邻的数据元素执行单精度浮点加法操作</td></tr><tr><td>haddpd</td><td>对操作数的相邻的数据元素执行双精度浮点加法操作</td></tr><tr><td>hsubps</td><td>对操作数的相邻的数据元素执行单精度浮点减法操作</td></tr><tr><td>hsubpd</td><td>对操作数的相邻的数据元素执行双精度浮点减法操作</td></tr></tbody></table><h4 id="其他指令"><a href="#其他指令" class="headerlink" title="其他指令"></a>其他指令</h4><table><thead><tr><th>指令</th><th>描述</th></tr></thead><tbody><tr><td>PUSH src</td><td>将src的值压入栈</td></tr><tr><td>POP dest</td><td>将位于栈顶部的数据弹出到dest</td></tr><tr><td>CALL addr</td><td>在addr处调用函数</td></tr><tr><td>LEAVE</td><td>在退出函数之前清除栈帧 =（mov esp,ebp ； pop ebp）</td></tr><tr><td>RET</td><td>从函数返回</td></tr><tr><td>INT num</td><td>软件中断访问操作系统函数</td></tr><tr><td>NOP</td><td>不操作或不执行任何命令</td></tr></tbody></table><h5 id="cpuid指令"><a href="#cpuid指令" class="headerlink" title="cpuid指令"></a>cpuid指令</h5><table><thead><tr><th>EAX值</th><th>CPUID输出</th></tr></thead><tbody><tr><td>0</td><td>厂商ID字符串和支持的最大CPUID选项值</td></tr><tr><td>1</td><td>处理器类型，系列，型号和分步信息</td></tr><tr><td>2</td><td>处理器缓存配置</td></tr><tr><td>3</td><td>处理器序列号</td></tr><tr><td>4</td><td>缓存配置</td></tr><tr><td>5</td><td>监视信息</td></tr><tr><td>80000000h</td><td>拓展的厂商ID字符串和支持的级别</td></tr><tr><td>80000001h</td><td>拓展的处理器类型，系列，型号和分步信息</td></tr><tr><td>80000002h-4h</td><td>拓展的处理器名称字符串</td></tr></tbody></table><p>处理器把厂商ID返回到EBX,EDX和ECX寄存器中。</p><hr><h3 id="1-12-预置浮点值指令"><a href="#1-12-预置浮点值指令" class="headerlink" title="1.12 预置浮点值指令"></a>1.12 预置浮点值指令</h3><table><thead><tr><th>指令</th><th>描述</th></tr></thead><tbody><tr><td>FLD1</td><td>把+1.0压入FPU堆栈中</td></tr><tr><td>FLDL2T</td><td>把10的对数（底数2）压入FPU堆栈中</td></tr><tr><td>FLDL2E</td><td>把e的对数（底数2）压入FPU堆栈中</td></tr><tr><td>FLDPI</td><td>把pi的值压入堆栈中</td></tr><tr><td>FLDLG2</td><td>把2的对数（底数10）压入FPU堆栈中</td></tr><tr><td>FLDLN2</td><td>把2的对数（底数e）压入FPU堆栈中</td></tr><tr><td>FLDZ</td><td>把+0.0压入堆栈中</td></tr></tbody></table><p>在浮点数据类型中，+0.0 和 -0.0是有区别的。对于大多数操作，他们被认为是相同的值，但是在除法中，一个产生正无穷大，一个产生负无穷大。</p><hr><h2 id="2-FPU环境"><a href="#2-FPU环境" class="headerlink" title="2. FPU环境"></a>2. FPU环境</h2><p>FPU是一个自持的单元，有一组与标准处理器寄存器分离的一组寄存器处理浮点操作。</p><p>附加的寄存器包括8个80位数据寄存器和3个16位寄存器，称为控制，状态，和标记寄存器。    </p><p>控制字：控制FPU如何操作</p><p>状态字：表明FPU中发生了什么</p><p>标记字：定义FPU寄存器堆栈中包含的值</p><h3 id="2-1-状态寄存器"><a href="#2-1-状态寄存器" class="headerlink" title="2.1 状态寄存器"></a>2.1 状态寄存器</h3><p>用于确定FPU的状态</p><table><thead><tr><th>状态位</th><th>描述</th></tr></thead><tbody><tr><td>0</td><td>非法操作异常标志</td></tr><tr><td>1</td><td>非规格化操作数异常标志</td></tr><tr><td>2</td><td>除数为零异常标志</td></tr><tr><td>3</td><td>溢出异常标志</td></tr><tr><td>4</td><td>下溢溢出标志</td></tr><tr><td>5</td><td>精度异常标志</td></tr><tr><td>6</td><td>堆栈错误</td></tr><tr><td>7</td><td>错误汇总状态</td></tr><tr><td>8</td><td>条件代码位0（C0）</td></tr><tr><td>9</td><td>条件代码位1（C1）</td></tr><tr><td>10</td><td>条件代码位2（C2）</td></tr><tr><td>11 - 13</td><td>堆栈顶部指针</td></tr><tr><td>14</td><td>条件代码位3（C3）</td></tr><tr><td>15</td><td>FPU繁忙状态</td></tr></tbody></table><p>读取状态寄存器到AX寄存器或一个双字内存位置：</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">.section .bss.lcomm status, 2fstsw%axfstswstatus<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-控制寄存器"><a href="#2-2-控制寄存器" class="headerlink" title="2.2 控制寄存器"></a>2.2 控制寄存器</h3><p>控制FPU内的浮点功能。</p><table><thead><tr><th>控制位</th><th>描述</th></tr></thead><tbody><tr><td>0</td><td>非法操作异常掩码</td></tr><tr><td>1</td><td>非规格化操作数异常掩码</td></tr><tr><td>2</td><td>除数为零异常掩码</td></tr><tr><td>3</td><td>溢出异常掩码</td></tr><tr><td>4</td><td>精度异常掩码</td></tr><tr><td>5</td><td>下溢异常掩码</td></tr><tr><td>6-7</td><td>保留</td></tr><tr><td>8-9</td><td>精度控制</td></tr><tr><td>10-11</td><td>舍入控制</td></tr><tr><td>12</td><td>无穷大控制</td></tr><tr><td>13-15</td><td>保留</td></tr></tbody></table><p>控制寄存器的前六位用于控制使用状态寄存器中的哪些异常标志，当这些位中的一位被设置的时候，就会防止状态寄存器中对应的异常标志被设置，默认情况下，所有掩码位都被设置，即屏蔽所有异常。</p><p>控制寄存器的默认值是0x037F，使用<code>FSTCW</code>可以把控制寄存器的设置加载到双字内存位置中查看设置的内容。也可以使用FLDCW指令改变设置。</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">.section .bss.lcomm control, 2fstcwcontrolfldcwnewvalue<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-3-标记寄存器"><a href="#2-3-标记寄存器" class="headerlink" title="2.3 标记寄存器"></a>2.3 标记寄存器</h3><p>标记寄存器用于标识8个80位FPU数据寄存器中的值，标记寄存器使用16位（每个寄存器两位）标识每个FPU数据寄存器的内容。</p><table>    <tr>        <td colspan="4">15</td>        <td colspan="4" align="right">0</td>    </tr>    <tr>        <td>R7</td>        <td>R6</td>        <td>R5</td>        <td>R4</td>        <td>R3</td>        <td>R2</td>        <td>R1</td>        <td>R0</td>    </tr></table><p>每个寄存器对应一个物理的FPU寄存器。每个寄存器对应的2位值可以包含表明寄存器内容的4个特殊吗之一。在任何给定的时刻，FPU数据寄存器可以包含下面的内容：</p><ul><li>一个合法的拓展双精度值（00）</li><li>零值（01）</li><li>特殊的浮点值（10）</li><li>无内容（11）</li></ul><h3 id="2-4-寄存器操作指令"><a href="#2-4-寄存器操作指令" class="headerlink" title="2.4 寄存器操作指令"></a>2.4 寄存器操作指令</h3><p>后跟长度指示符（sb表示单精度，l表示双精度）</p><table><thead><tr><th>指令</th><th>描述</th></tr></thead><tbody><tr><td>finit</td><td>初始化FPU，把控制寄存器和状态寄存器都设为默认值</td></tr><tr><td>fstcw   des</td><td>将控制寄存器的值复制到des</td></tr><tr><td>fstsw   des</td><td>将状态寄存器的值复制到des</td></tr><tr><td>filds   src</td><td>将双字整数src加载到FPU寄存器堆栈中。</td></tr><tr><td>fists   des</td><td>获取寄存器栈顶的值，保存到des</td></tr><tr><td>flds   src</td><td>将单精度浮点值加载到FPU寄存器</td></tr><tr><td>fldl   src</td><td>将双精度浮点值加载到FPU寄存器</td></tr><tr><td>fst   des</td><td>将数据从ST0复制到内存位置或另一个FPU寄存器</td></tr><tr><td>fxxh   des</td><td>交换ST0和另一个FPU寄存器的值（des）</td></tr><tr><td>fstp</td><td>将数据从ST0弹出到内存位置</td></tr></tbody></table><h3 id="2-5-浮点运算指令"><a href="#2-5-浮点运算指令" class="headerlink" title="2.5 浮点运算指令"></a>2.5 浮点运算指令</h3><table><thead><tr><th>指令</th><th>描述</th></tr></thead><tbody><tr><td>fadd</td><td>浮点加法</td></tr><tr><td>fdiv</td><td>浮点减法</td></tr><tr><td>fdivr</td><td>反向浮点减法</td></tr><tr><td>fmul</td><td>浮点乘法</td></tr><tr><td>fsub</td><td>浮点减法</td></tr><tr><td>fsubr</td><td>反向浮点减法</td></tr></tbody></table><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">fadd  src &#x2F;&#x2F; 内存中的32位或64位值和ST0寄存器相加，结果存到ST0fadd%st(x), %st(0) &#x2F;&#x2F; st(x)和st(0)相加，结果保存到st(0)faddp   %st(0), %st(x) &#x2F;&#x2F; st(0)和st(x)相加，结果保存到st(x),并弹出st(0)faddp &#x2F;&#x2F; st(0)和st(1)相加，结果保存到st(1),并弹出st(0)fiaddsrc  &#x2F;&#x2F; 16位或32位整数值和ST0寄存器相加，结果存到ST0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其他的指令都有类似的格式。</p><h3 id="2-6-高级浮点指令"><a href="#2-6-高级浮点指令" class="headerlink" title="2.6 高级浮点指令"></a>2.6 高级浮点指令</h3><table><thead><tr><th>指令</th><th>描述</th></tr></thead><tbody><tr><td>fabs</td><td>计算ST0的绝对值</td></tr><tr><td>fchs</td><td>改变ST0的符号</td></tr><tr><td>fcos</td><td>计算ST0的余弦</td></tr><tr><td>fsin</td><td>计算ST0的正弦</td></tr><tr><td>fsincos</td><td>计算ST0的正弦和余弦（余弦值位于ST0，正弦值位于ST1）</td></tr><tr><td>fptan</td><td>计算ST0的部分正切</td></tr><tr><td>fpatan</td><td>计算ST0的部分反正切</td></tr><tr><td>fprem</td><td>计算ST0除以ST1的部分余数(向零舍入)</td></tr><tr><td>fprem1</td><td>计算ST0除以ST1的IEEE部分余数（向上舍入）</td></tr><tr><td>frndint</td><td>把ST0舍入到最近的整数</td></tr><tr><td>fscale</td><td>计算ST0乘以2的ST1次乘方</td></tr><tr><td>f2xm1</td><td>计算2的乘方（次数为ST0中的值）减1</td></tr><tr><td>fsqrt</td><td>计算ST0的平方根</td></tr><tr><td>fyl2x</td><td>计算  $ST1*log_2ST0$</td></tr><tr><td>fyl2xp1</td><td>计算  $ST1*log_2(ST0+1)$</td></tr></tbody></table><p>以上所有计算三角函数的指令全都使用弧度作为源操作数的单位。计算结果存放到ST0寄存器。</p><h3 id="2-7-浮点条件分支"><a href="#2-7-浮点条件分支" class="headerlink" title="2.7 浮点条件分支"></a>2.7 浮点条件分支</h3><h4 id="fcom系列指令"><a href="#fcom系列指令" class="headerlink" title="fcom系列指令"></a>fcom系列指令</h4><p>用于在FPU中比较两个浮点值。</p><table><thead><tr><th>指令</th><th>描述</th></tr></thead><tbody><tr><td>fcom</td><td>比较ST0寄存器和ST1寄存器</td></tr><tr><td>fcom  ST(x)</td><td>比较ST0和另一个FPU寄存器</td></tr><tr><td>fcom  src</td><td>比较ST0和32或64位内存值</td></tr><tr><td>fcomp</td><td>比较ST0和ST1寄存器，并弹出堆栈</td></tr><tr><td>fcomp  ST(x)</td><td>比较ST0和另一个FPU寄存器寄存器，并弹出堆栈</td></tr><tr><td>fcomp  src</td><td>比较ST0和32或64位内存值，并弹出堆栈</td></tr><tr><td>fcompp</td><td>比较ST0和ST1寄存器，并两次弹出堆栈</td></tr><tr><td>ftst</td><td>比较ST0和值0.0</td></tr></tbody></table><p>比较的结果设置在状态寄存器的C0，C2， C3条件代码位中，比较可能产生的值：</p><table><thead><tr><th align="center">条件</th><th align="center">C3</th><th align="center">C2</th><th align="center">C0</th></tr></thead><tbody><tr><td align="center">ST0 &gt; src</td><td align="center">0</td><td align="center">0</td><td align="center">0</td></tr><tr><td align="center">ST0 &lt; src</td><td align="center">0</td><td align="center">0</td><td align="center">1</td></tr><tr><td align="center">ST0 = src</td><td align="center">1</td><td align="center">0</td><td align="center">0</td></tr></tbody></table><h4 id="fcomi系列指令"><a href="#fcomi系列指令" class="headerlink" title="fcomi系列指令"></a>fcomi系列指令</h4><p>执行浮点比较并把结果存放到EFLAGS寄存器中的进位，奇偶校验和零标志。</p><table><thead><tr><th>指令</th><th>描述</th></tr></thead><tbody><tr><td>fcomi   ST(x)</td><td>比较ST0和ST(x)寄存器</td></tr><tr><td>fcomi  ST(x)</td><td>比较ST0和ST(x)寄存器,并弹出堆栈</td></tr><tr><td>fucomi</td><td>在比较之间检查无序值</td></tr><tr><td>fucomip</td><td>在比较之间检查无序值，并在比较之后弹出堆栈。</td></tr></tbody></table><p>fcomi系列指令只能比较FPU寄存器中的两个值，不能比较FPU寄存器和内存中的值。</p><p>fcomi指令的输出使用ELFAGS寄存器:</p><table><thead><tr><th align="center">条件</th><th align="center">ZF</th><th align="center">PF</th><th align="center">CF</th></tr></thead><tbody><tr><td align="center">ST0 &gt; ST(x)</td><td align="center">0</td><td align="center">0</td><td align="center">0</td></tr><tr><td align="center">ST0 &lt; ST(x)</td><td align="center">0</td><td align="center">0</td><td align="center">1</td></tr><tr><td align="center">ST0 = ST(x)</td><td align="center">1</td><td align="center">0</td><td align="center">0</td></tr></tbody></table><h4 id="fcmov指令系列"><a href="#fcmov指令系列" class="headerlink" title="fcmov指令系列"></a>fcmov指令系列</h4><p>类似整数的CMOV指令。根据EFLGS寄存器的值，FCOMV系列的指令（如果条件为true）把FPU寄存器ST(x)中的源操作数产生到ST(0)。</p><table><thead><tr><th>指令</th><th>描述</th></tr></thead><tbody><tr><td>fcmovb</td><td>如果ST(0)小于ST(x),则进行传送。</td></tr><tr><td>fcmove</td><td>如果ST(0)等于ST(x),则进行传送。</td></tr><tr><td>fcmovbe</td><td>如果ST(0)小于等于ST(x),则进行传送。</td></tr><tr><td>fcmovu</td><td>如果ST(0)无序,则进行传送。</td></tr><tr><td>fcmovnb</td><td>如果ST(0)不小于ST(x),则进行传送。</td></tr><tr><td>fcmovne</td><td>如果ST(0)不等于ST(x),则进行传送。</td></tr><tr><td>fcmovnbe</td><td>如果ST(0)不小于或等于ST(x),则进行传送。</td></tr><tr><td>fcmovnu</td><td>如果ST(0)非无序,则进行传送。</td></tr></tbody></table><p>指令的格式：</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">fcmovxx src,des<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中，src是ST(x)寄存器，des是ST(0)寄存器。</p><h3 id="2-8-保存和恢复FPU状态"><a href="#2-8-保存和恢复FPU状态" class="headerlink" title="2.8 保存和恢复FPU状态"></a>2.8 保存和恢复FPU状态</h3><p>现在的处理器使用FPU数据寄存器完成双重工作，MMX技术使用FPU寄存器作为MMX数据寄存器，存储80位打包整数值用于计算，如果在同一个程序中使用FPU和MMX功能，就有可能破坏数据寄存器。</p><p>FSTENV指令用于把FPU环境存储到一个28字节的内存块中。</p><p>FLDENV指令用于把内存块的值加载回FPU环境中。</p><p>小面的FPU寄存器被保存：</p><ul><li>控制寄存器</li><li>状态寄存器</li><li>标记寄存器</li><li>FPU指令寄存器</li><li>FPU数据指针</li><li>FPU最后执行的操作码</li></ul><p>上述的两个命令没有保存数据，为此：</p><p>FSAVE指令把所有FPU寄存器复制到一个108字节的内存地址，</p><p>FRSTOR指令恢复FPU到执行FSAVE指令是时的状态。</p><p>FXSAVE和FXRSTOR指令保存FPU，MMX和SSE状态。</p><p>MMX操作完成时，应该使用EMMS指令清除FPU的标记寄存器，以确保FPU指令正确地执行。</p><h3 id="2-9-和非等待指令"><a href="#2-9-和非等待指令" class="headerlink" title="2.9 和非等待指令"></a>2.9 和非等待指令</h3><p>大多数浮点指令在执行之前必须等待以便确保前面的指令没有抛出异常，如果出现异常，在执行下一条指令之前必须先处理异常。</p><p>一些指令包含非等待版本，他们不等待浮点异常的检查。这些指令允许程序保存或者复位当前的FPU状态，而不处理任何悬而未决的异常。</p><table><thead><tr><th>指令</th><th>描述</th></tr></thead><tbody><tr><td>fnclex</td><td>清空浮点异常标志</td></tr><tr><td>fnsave</td><td>把FPU状态保存到内存</td></tr><tr><td>fnstcw</td><td>保存FPU控制寄存器</td></tr><tr><td>fnstenv</td><td>把FPU操作环境保存到内存中</td></tr><tr><td>fnstsw</td><td>把FPU状态寄存器保存到内存或AX寄存器中</td></tr></tbody></table><h3 id="2-10-优化浮点运算"><a href="#2-10-优化浮点运算" class="headerlink" title="2.10 优化浮点运算"></a>2.10 优化浮点运算</h3><ul><li>确保浮点值不会上溢或下溢出数据元素</li><li>把精度控制位设置为单精度</li><li>使用查找表实现简单的三角函数</li><li>在可能的情况下，断开依赖连。例如，不计算y =a+b+c+d ,而是计算 x = a+b,y=c+d,z = x+y</li><li>在FPU寄存器中尽可能多地保留方程式的值。</li><li>在处理整数和浮点值时，把整数加载到FPU寄存器中并且执行运算，这样比对整数使用浮点指令要快。例如，不适用FIDIV，而是使用FILD加载整数，然后对FPU寄存器的值执行FDIVP指令。</li><li>尽可能使用FCOMI指令，而不使用FCOM指令。</li></ul><hr><h2 id="3-字符串处理"><a href="#3-字符串处理" class="headerlink" title="3. 字符串处理"></a>3. 字符串处理</h2><p>字符串指令也可以应用于非字符串数据。传送，修改和比较数字数据块的操作也可以通过IA-32字符串指令来完成。</p><h3 id="3-1-传送字符串"><a href="#3-1-传送字符串" class="headerlink" title="3.1 传送字符串"></a>3.1 传送字符串</h3><h4 id="MOVS指令"><a href="#MOVS指令" class="headerlink" title="MOVS指令"></a>MOVS指令</h4><p>可以把字符串从一个内存位置传送到另一个内存位置（MOV不能）。</p><table><thead><tr><th>指令</th><th>格式</th></tr></thead><tbody><tr><td>movsb</td><td>传送一个字节</td></tr><tr><td>movsw</td><td>传送一个字（2字节）</td></tr><tr><td>movsl</td><td>传送一个双字（4字节）</td></tr></tbody></table><p>Intel文档使用MOVSD传送双字，GUN汇编器决定使用movsl</p><p>格式：</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">movsl<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>指令使用隐含源ESI寄存器，目标EDI寄存器。</p><h4 id="rep前缀"><a href="#rep前缀" class="headerlink" title="rep前缀"></a>rep前缀</h4><p>rep指令用于按照特定次数重复执行字符串指令，有ECX寄存器中的值进行控制。和循环类似，但是不需要额外的loop指令。</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">rep movsb<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>根据零标志（ZF）状态执行的REP指令</p><table><thead><tr><th>指令</th><th>描述</th></tr></thead><tbody><tr><td>repe</td><td>等于时重复</td></tr><tr><td>repne</td><td>不等于时重复</td></tr><tr><td>repnz</td><td>不为零时重复</td></tr><tr><td>repz</td><td>为零时重复</td></tr></tbody></table><h3 id="3-2-存储和加载字符串"><a href="#3-2-存储和加载字符串" class="headerlink" title="3.2 存储和加载字符串"></a>3.2 存储和加载字符串</h3><h4 id="lods指令"><a href="#lods指令" class="headerlink" title="lods指令"></a>lods指令</h4><p>用于把内存中的字符串值传送到EAX寄存器中。</p><table><thead><tr><th>指令</th><th>描述</th></tr></thead><tbody><tr><td>lodsb</td><td>把一个字节加载到AL寄存器</td></tr><tr><td>lodsw</td><td>把一个字加载到AX寄存器</td></tr><tr><td>lodsl</td><td>把一个双字加载到EAX寄存器</td></tr></tbody></table><p>lods使用ESI寄存器作为隐含的源操作数。ESI寄存器必须包含要加载的字符串所在的内存地址。</p><h4 id="stos指令"><a href="#stos指令" class="headerlink" title="stos指令"></a>stos指令</h4><p>用于把字符串存放到内存位置中</p><table><thead><tr><th>指令</th><th>描述</th></tr></thead><tbody><tr><td>stosb</td><td>存储AL寄存器中的一个字节的数据</td></tr><tr><td>stosw</td><td>存储AL寄存器中的一个字的数据</td></tr><tr><td>stosl</td><td>存储AL寄存器中的一个双字的数据</td></tr></tbody></table><h3 id="3-3-比较字符串"><a href="#3-3-比较字符串" class="headerlink" title="3.3 比较字符串"></a>3.3 比较字符串</h3><h4 id="cmps指令"><a href="#cmps指令" class="headerlink" title="cmps指令"></a>cmps指令</h4><table><thead><tr><th>指令</th><th>描述</th></tr></thead><tbody><tr><td>cmpsb</td><td>比较字节值</td></tr><tr><td>cmpsw</td><td>比较字值</td></tr><tr><td>cmpsl</td><td>比较双字值</td></tr></tbody></table><p>隐含的源和目标操作数是ESI个EDI寄存器。cmps指令从源字符串减去目标字符串，并适当地设置EFLAGS寄存器。</p><h3 id="3-4-扫描字符串"><a href="#3-4-扫描字符串" class="headerlink" title="3.4 扫描字符串"></a>3.4 扫描字符串</h3><table><thead><tr><th>指令</th><th>描述</th></tr></thead><tbody><tr><td>scasb</td><td>比较内存中一个字节和AL寄存器的值</td></tr><tr><td>scasw</td><td>比较内存中一个字和AX寄存器的值</td></tr><tr><td>scasl</td><td>比较内存中的一个双字和EAX寄存器的值</td></tr></tbody></table><p>SCAS指令使用EDI寄存器作为隐含的目标操作数。</p><hr><h2 id="4-内联汇编约束说明"><a href="#4-内联汇编约束说明" class="headerlink" title="4. 内联汇编约束说明"></a>4. 内联汇编约束说明</h2><p>只针对GCC编译器</p><table><thead><tr><th align="center">约束</th><th>描述</th></tr></thead><tbody><tr><td align="center">a</td><td>使用EAX，AX或Al寄存器</td></tr><tr><td align="center">b</td><td>使用EBX，BX或BL寄存器</td></tr><tr><td align="center">c</td><td>使用ECX，CX或CL寄存器</td></tr><tr><td align="center">d</td><td>使用EDX，DX或DL寄存器</td></tr><tr><td align="center">S</td><td>使用ESI或SI寄存器</td></tr><tr><td align="center">D</td><td>使用EDI或DI寄存器</td></tr><tr><td align="center">r</td><td>使用任何可用寄存器</td></tr><tr><td align="center">q</td><td>使用EAX，EBX，ECX或EDX寄存器之一</td></tr><tr><td align="center">A</td><td>对于64位值使用EAX和EDX寄存器</td></tr><tr><td align="center">f</td><td>使用浮点寄存器</td></tr><tr><td align="center">t</td><td>使用第一个（顶部）浮点寄存器</td></tr><tr><td align="center">u</td><td>使用第二个浮点寄存器</td></tr><tr><td align="center">m</td><td>使用变量的内存位置</td></tr><tr><td align="center">o</td><td>使用偏移内存位置</td></tr><tr><td align="center">V</td><td>只使用直接内存位置</td></tr><tr><td align="center">i</td><td>使用立即整数值</td></tr><tr><td align="center">n</td><td>使用值已知的立即整数值</td></tr><tr><td align="center">g</td><td>使用任何可用的寄存器或者内存位置</td></tr></tbody></table><p>输出约束修饰符：</p><table><thead><tr><th>输出修饰符</th><th>描述</th></tr></thead><tbody><tr><td>+</td><td>可以读取和写入操作数</td></tr><tr><td>=</td><td>只能写入操作数</td></tr><tr><td>%</td><td>如果必要，操作数可以和下一个操作数切换</td></tr><tr><td>&amp;</td><td>在内联函数完成之前，可以删除或者重新使用操作数</td></tr></tbody></table><h2 id="5-附"><a href="#5-附" class="headerlink" title="5. 附"></a>5. 附</h2><h3 id="5-1-文件模式"><a href="#5-1-文件模式" class="headerlink" title="5.1 文件模式"></a>5.1 文件模式</h3><table><thead><tr><th align="center">模式</th><th align="center">值</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">O_RDONLY</td><td align="center">0</td><td align="center">只读</td></tr><tr><td align="center">O_WRONLY</td><td align="center">1</td><td align="center">只写</td></tr><tr><td align="center">O_RDWR</td><td align="center">2</td><td align="center">可读写</td></tr><tr><td align="center">S_IRWXU</td><td align="center">00700q</td><td align="center">用户有读、写、执行权限</td></tr><tr><td align="center">S_IRUSR</td><td align="center">00400q</td><td align="center">用户有读权限</td></tr><tr><td align="center">S_IWUSR</td><td align="center">00200q</td><td align="center">用户有写权限</td></tr><tr><td align="center">S_IXUSR</td><td align="center">00100q</td><td align="center">用户有执行权限</td></tr><tr><td align="center">S_IRWXG</td><td align="center">00070q</td><td align="center">组有读写执行权限</td></tr><tr><td align="center">S_IRGRP</td><td align="center">00040q</td><td align="center">组有读权限</td></tr><tr><td align="center">S_IWGRP</td><td align="center">00020q</td><td align="center">组有写权限</td></tr><tr><td align="center">S_IXGRP</td><td align="center">00010q</td><td align="center">组有执行权限</td></tr><tr><td align="center">S_IRWXO</td><td align="center">00007q</td><td align="center">其他用户有读写执行权限</td></tr><tr><td align="center">S_IROTH</td><td align="center">00004q</td><td align="center">其他用户有读权限</td></tr><tr><td align="center">S_IWOTH</td><td align="center">00002q</td><td align="center">其他用户有写权限</td></tr><tr><td align="center">S_IXOTH</td><td align="center">00001q</td><td align="center">其他用户有执行权限</td></tr></tbody></table><h3 id="5-2-宏"><a href="#5-2-宏" class="headerlink" title="5.2 宏"></a>5.2 宏</h3><p>单行：</p><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">%define mulby4(x) shl x, 2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">mulby4 (rax)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>多行：</p><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">%macro abs 1cmp %1, 0jge %%doneneg %1%%done:%endmacroabs eax<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-参考"><a href="#6-参考" class="headerlink" title="6. 参考"></a>6. 参考</h2><p>《汇编语言程序设计》<a href="https://gitee.com/nongguangxin/professional-assembly-language">代码</a></p><p><a href="https://elixir.bootlin.com/linux/v5.4.71/source/include/uapi/asm-generic/errno-base.h#L5">错误代码</a>：/include/uapi/asm-generic/errno-base.h</p><p><a href="http://www.lxhp.in-berlin.de/lhpsysc0.html">System call</a></p><p><a href="https://www.cs.yale.edu/flint/cs421/papers/x86-asm/asm.html">x86 Assembly Guide</a></p><p><a href="https://software.intel.com/content/www/us/en/develop/articles/introduction-to-x64-assembly.html">Introduction to x64 Assembly</a></p><p> <a href="https://software.intel.com/sites/default/files/managed/39/c5/325462-sdm-vol-1-2abcd-3abcd.pdf">Intel® 64 and IA-32 Architectures Software Developer’s Manual</a></p>]]></content>
      
      
      <categories>
          
          <category> AT&amp;T汇编 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AT&amp;T </tag>
            
            <tag> x86 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++内联汇编</title>
      <link href="/C-%E5%86%85%E8%81%94%E6%B1%87%E7%BC%96.html"/>
      <url>/C-%E5%86%85%E8%81%94%E6%B1%87%E7%BC%96.html</url>
      
        <content type="html"><![CDATA[<h3 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h3><p>绝大多数情况下，我们不会在编程中使用汇编，但是在一些特殊的情况下，汇编还是能完成一些平常难以实现的功能。</p><p>以下代码在<code>Ubuntu2004</code>，g++ 10.2 上测试通过。</p><h3 id="2-内联汇编基本格式"><a href="#2-内联汇编基本格式" class="headerlink" title="2. 内联汇编基本格式"></a>2. 内联汇编基本格式</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">asm</span> <span class="token punctuation">(</span> <span class="token string">" asm code "</span>    <span class="token operator">:</span> output operands                  <span class="token comment">/* optional */</span>    <span class="token operator">:</span> input operands                   <span class="token comment">/* optional */</span>    <span class="token operator">:</span> list of clobbered registers      <span class="token comment">/* optional */</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>内联汇编以<code>asm</code>关键字声明，括号中的内容由汇编指令，输出，输入和被破坏的寄存器列表。</p><h3 id="3-汇编示例"><a href="#3-汇编示例" class="headerlink" title="3. 汇编示例"></a>3. 汇编示例</h3><h4 id="3-1-标准内联汇编"><a href="#3-1-标准内联汇编" class="headerlink" title="3.1 标准内联汇编"></a>3.1 标准内联汇编</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// main.cc</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token keyword">const</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">asm</span><span class="token punctuation">(</span><span class="token string">"mov $60, %rax;"</span>     <span class="token comment">// Linux 上的“退出”的系统调用序号</span>        <span class="token string">"mov $2,  %rdi\n\t"</span>  <span class="token comment">// 此程序返回 2</span>        <span class="token string">"syscall"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因为内联汇编都是文本字符串，我们必须显式使用换行符或分号说明一条指令的结束。上面的代码和下面的一样：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// main.cc</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token keyword">const</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编译运行之后，可以看到程序的返回值：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ g++ main.cc -o main <span class="token operator">&amp;&amp;</span> ./main$ <span class="token builtin class-name">echo</span> <span class="token variable">$?</span><span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="3-2-拓展内联汇编"><a href="#3-2-拓展内联汇编" class="headerlink" title="3.2 拓展内联汇编"></a>3.2 拓展内联汇编</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// main.cc</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token keyword">const</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> b<span class="token punctuation">;</span>    <span class="token keyword">asm</span><span class="token punctuation">(</span><span class="token string">"movl %1, %%eax;"</span>        <span class="token string">"movl %%eax, %0;"</span>        <span class="token operator">:</span> <span class="token string">"=r"</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token comment">/* output */</span>        <span class="token operator">:</span> <span class="token string">"r"</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>  <span class="token comment">/* input */</span>        <span class="token operator">:</span> <span class="token string">"%eax"</span>  <span class="token comment">/* clobbered register */</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"b="</span> <span class="token operator">&lt;&lt;</span> b <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的汇编基本上包含了内联汇编的所有要素。程序完成的功能是把a的值复制给b。</p><p><code>%0</code>和<code>%1</code>表示我们声明的第一个和第二个变量，并以此类推，在上面的程序中分别是输出值b，输入值a。冒号和输入输出之间的是声明约束,<code>r</code>表明让编译器自动选择可用的寄存器，详细的约束说明可以看另一篇文章–<a href="https://nongguangxin.cn/x86-chang-yong-hui-bian-zhi-ling-at-t-ge-shi.html#toc-heading-111">X86常用汇编指令</a>中的内联汇编约束说明部分。内联汇编的最后部分是被破坏的寄存器列表，由于我们的运算需要使用EAX寄存器做中间变量，我们需要告诉编译器帮我们保存和在事后恢复EAX的值。</p><p>执行上面的代码，输出如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ g++ main.cc -o main <span class="token operator">&amp;&amp;</span> ./main<span class="token assign-left variable">b</span><span class="token operator">=</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>指定输入输出别名：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> b<span class="token punctuation">;</span>    <span class="token keyword">asm</span><span class="token punctuation">(</span><span class="token string">"movl %[in], %%eax;"</span>        <span class="token string">"movl %%eax, %[out];"</span>        <span class="token operator">:</span> <span class="token punctuation">[</span> out <span class="token punctuation">]</span> <span class="token string">"=r"</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token comment">/* output */</span>        <span class="token operator">:</span> <span class="token punctuation">[</span> in <span class="token punctuation">]</span> <span class="token string">"r"</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>   <span class="token comment">/* input */</span>        <span class="token operator">:</span> <span class="token string">"%eax"</span>          <span class="token comment">/* clobbered register */</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"b:"</span> <span class="token operator">&lt;&lt;</span> b <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的程序中，指定输出的别名为out，输入的别名为a，然后就可以在汇编指令直接引用这两个名字（称为占位符），使代码更加易读。</p><p><strong>其他例子：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// main.cc</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token keyword">const</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">asm</span><span class="token punctuation">(</span><span class="token string">"leal (%0,%0,4), %0"</span>        <span class="token operator">:</span> <span class="token string">"=r"</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>        <span class="token operator">:</span> <span class="token string">"0"</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"b="</span> <span class="token operator">&lt;&lt;</span> b <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>&quot;0&quot; </code>表示使用和第一个操作数一样的寄存器，上面的程序计算 <code>b = b * 5</code>；在没有显示使用其他寄存器的情况下，不需要声明被破坏的寄存器，声明后反而会导致编译错误。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ g++ main.cc -o main <span class="token operator">&amp;&amp;</span> ./main<span class="token assign-left variable">b</span><span class="token operator">=</span><span class="token number">5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="3-3-指定寄存器"><a href="#3-3-指定寄存器" class="headerlink" title="3.3 指定寄存器"></a>3.3 指定寄存器</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// main.cc</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token keyword">const</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token comment">// res =  a + b</span>    <span class="token keyword">int</span> res<span class="token punctuation">;</span>    <span class="token keyword">asm</span><span class="token punctuation">(</span><span class="token string">"add %%rbx, %%rax;"</span>        <span class="token operator">:</span> <span class="token string">"=a"</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>        <span class="token operator">:</span> <span class="token string">"a"</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"res="</span> <span class="token operator">&lt;&lt;</span> res <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面的程序中，我们通过约束声明指定使用EAX寄存器作为输出，同事使用EAX和EBX寄存器作为输入。更多的约束可以看这篇<a href="https://nongguangxin.cn/x86-chang-yong-hui-bian-zhi-ling-at-t-ge-shi.html#toc-heading-111">文章</a>中的内联汇编约束说明部分。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ g++ main.cc -o main <span class="token operator">&amp;&amp;</span> ./main<span class="token assign-left variable">res</span><span class="token operator">=</span><span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="3-4-在汇编指令中调用普通函数"><a href="#3-4-在汇编指令中调用普通函数" class="headerlink" title="3.4 在汇编指令中调用普通函数"></a>3.4 在汇编指令中调用普通函数</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// main.cc</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">extern</span> <span class="token string">"C"</span><span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token keyword">const</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> res<span class="token punctuation">;</span>    <span class="token keyword">asm</span><span class="token punctuation">(</span><span class="token string">"call add;"</span> <span class="token operator">:</span> <span class="token string">"=a"</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token string">"D"</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"S"</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token operator">:</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"res="</span> <span class="token operator">&lt;&lt;</span> res <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面的程序中，使用call指令调用add函数。而且根据ABI约定，将第一个参数放在了RDI寄存器，将第二个参数放在了RSI寄存器，函数返回值放在了RAX寄存器。</p><p>需要注意的是由于C++支持函数重载，所以就算函数声明一致，函数签名和C语言中的函数签名也不一致，在C++中需要在函数声明中加上<code>extern &quot;C&quot;</code>让函数使用C语言的方式编译和链接。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ g++ main.cc -o main <span class="token operator">&amp;&amp;</span> ./main<span class="token assign-left variable">res</span><span class="token operator">=</span><span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="3-5-在代码中调用汇编函数"><a href="#3-5-在代码中调用汇编函数" class="headerlink" title="3.5 在代码中调用汇编函数"></a>3.5 在代码中调用汇编函数</h4><p>更常用的一种情况是在代码中调用使用汇编语言实现的函数。</p><p>我们用汇编实现一个add函数</p><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">&#x2F;&#x2F; add.s.section .text.type add, @function.globl addadd:    push    %rbp    mov     %rsp, %rbp    mov     %rdi, %rax    add     %rsi, %rax    mov     %rbp, %rsp    pop     %rbp    ret<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在C++代码或单独的头文件中声明add函数，在main函数中调用它。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">extern</span> <span class="token string">"C"</span> <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"add = "</span> <span class="token operator">&lt;&lt;</span> <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编译时加上汇编函数的代码文件，就可以在C++代码中调用汇编实现的函数。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ g++ main.cc add.s -o main <span class="token operator">&amp;&amp;</span> ./main<span class="token function">add</span> <span class="token operator">=</span> <span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="3-6-运算溢出检测"><a href="#3-6-运算溢出检测" class="headerlink" title="3.6 运算溢出检测"></a>3.6 运算溢出检测</h4><p>正常情况下我们很难知道一个运算是否溢出，但是借助汇编就比较容易。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span>      a  <span class="token operator">=</span> INT32_MAX <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span>      b  <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">int</span>      c  <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>    <span class="token keyword">uint64_t</span> OF <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">asm</span><span class="token punctuation">(</span><span class="token string">"pushf;"</span>        <span class="token string">"pop %0"</span>        <span class="token operator">:</span> <span class="token string">"=r"</span><span class="token punctuation">(</span>OF<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"overflow="</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">bool</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> OF<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"a+b="</span> <span class="token operator">&lt;&lt;</span> c <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>    <span class="token comment">// 还可以使用and和test指令，只是test指令不返回结果。</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token keyword">const</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>CPU的溢出标志位于<code>EFLAGS</code>寄存器的第11位，我们只要将<code>EFLAGS</code>寄存器的值复制出来，就可以方便获取运算的状态。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ g++ overflow_detect.cc -o overflow_detect <span class="token operator">&amp;&amp;</span> ./overflow_detect<span class="token assign-left variable">overflow</span><span class="token operator">=</span><span class="token number">1</span>a+b<span class="token operator">=</span>-2147483648<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="4-参考"><a href="#4-参考" class="headerlink" title="4. 参考"></a>4. 参考</h3><p>《汇编语言程序设计》</p><p>《汇编语言程序设计》<a href="https://gitee.com/nongguangxin/professional-assembly-language">代码</a></p>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 内联汇编 </tag>
            
            <tag> AT&amp;T </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用GDB调试汇编代码</title>
      <link href="/%E7%94%A8GDB%E8%B0%83%E8%AF%95%E6%B1%87%E7%BC%96%E4%BB%A3%E7%A0%81.html"/>
      <url>/%E7%94%A8GDB%E8%B0%83%E8%AF%95%E6%B1%87%E7%BC%96%E4%BB%A3%E7%A0%81.html</url>
      
        <content type="html"><![CDATA[<h3 id="1-常用命令"><a href="#1-常用命令" class="headerlink" title="1.  常用命令"></a>1.  常用命令</h3><p>启动gdb</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">$ gdb .&#x2F;a.out... ...Reading symbols from .&#x2F;a.out...(gdb)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>可以直接输入start开始调试，gdb会自动停在main函数开始执行的地方：</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">(gdb) start<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>也可以先指定断点再执行：</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">(gdb) break main# 在main函数处打一个断点(gdb) break5  # 在源文件的第五行第一个断点<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>使用run可以直接执行到断点处：</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">(gdb) run<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>单步调试：</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">(gdb) s# step 单步执行，遇到函数时进入函数内部(gdb) n# next 单步执行，遇到函数不进入函数内部<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>查看寄存器：</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">(gdb) p $rsp      # 显示$rsp寄存器的地址(gdb) x $rsp      # 显示$rsp寄存器的地址和值(gdb) info registers  # 显示所有寄存器的地址和值(gdb) x $rsp + 8    # 显示$rsp+8的地址和值(gdb) l        # 显示源代码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果定义了字符串常量，如：msg，可以使用如下命令查看</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">(gdb) p (char*)msg<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>(gdb) x</code>格式化输出选项：x/nxy</p><ul><li>n：输出的字段数</li><li>x：c（字符）， d（十进制），x（十六进制）</li><li>y：显示的字段的长度——b（字节），h（16位字），w（32位字）</li></ul><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">(gdb) x&#x2F;13cb &amp;msg# 输出13位以字节编码的字符<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">(gdb) x&#x2F;20x $rsp# 输出从$rsp开始的连续20个地址的值<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-实际例子"><a href="#2-实际例子" class="headerlink" title="2.  实际例子"></a>2.  实际例子</h3><p>使用以下代码为例：</p><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm"># 目标： 了解函数的工作原理#       这个程序将计算2^3+5^2的值## main中的所有东西都存在寄存器中，所以data字段没有任何东西.section .data.section .textmsg:    .asciz &quot;output: %lld\n&quot;#   .string &quot;output: %lld\n&quot;    # 这是另一种定义方法 .globl mainmain:    push    $3          # push第二个参数    push    $2          # push第一个参数    call    power       # 调用函数    add     $16, %rsp   # 移回栈指针    push    %rax        # 保存第一个运算结果    push    $2          # push第二个参数    push    $5          # push第一个参数    call    power       # 调用函数    add     $16, %rsp   # 移回栈指针    pop     %rbx        # 将第一个运算结果从栈中                        # 弹出到%rbx中    add     %rax, %rbx  # 将两个结果相加，保存到%ebx    # printf(&quot;output: %lld\n&quot;, %rsi)    mov     $0, %rax    mov     $msg, %rdi    mov     %rbx, %rsi    call    printf    # exit(0)    mov     $0, %rdi        call    exit# 目标： 计算数的N次方## 输入： 第一个参数 - 底数#       第二个参数 - 指数## 输出： 计算结果## NOTES： 指数必须大于等于1## 变量：#       %rbx - 保存底数#       %rcx - 保存指数#       -8(%rbp) - 保存当前结果#       %rax - 临时变量.type power, @functionpower:    push    %rbp            # 保存旧的基址寄存器    mov     %rsp, %rbp      # 使栈指针为基址指针    sub     $8, %esp        # 开辟空间存储本地变量    mov     16(%rbp), %rbx  # 保存第一个参数到%rbx    mov     24(%rbp), %rcx  # 保存第二个参数到%rcx    mov     %rbx, -8(%rbp)  # 保存当前结果power_loop_start:    cmp     $1, %rcx        # 如果指数为1，结束    je      end_power    mov     -8(%rbp), %rax  # 将当前结果保存移到%rax    imul    %rbx, %rax      # 当前结果乘以底数    mov     %rax, -8(%rbp)  # 保存当前结果    dec     %rcx            # 指数减一    jmp     power_loop_startend_power:    mov     -8(%rbp), %rax  # 返回值移到%rax    mov     %rbp, %rsp      # 重置栈指针    pop     %rbp            # 重置基址指针    ret# to run this file, follow the commands below# $ gcc -no-pie power.s# $ .&#x2F;a.out# output: 33<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h4><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">$ gcc -g -no-pie power.s -o power<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用<code>-g</code>选项生成调试信息。</p><h4 id="开始调试"><a href="#开始调试" class="headerlink" title="开始调试"></a>开始调试</h4><p>运行<code>sudo gdb ./power</code>，进入调试命令行：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ gdb powerGNU gdb <span class="token punctuation">(</span>Ubuntu <span class="token number">9.1</span>-0ubuntu1<span class="token punctuation">)</span> <span class="token number">9.1</span>Copyright <span class="token punctuation">(</span>C<span class="token punctuation">)</span> <span class="token number">2020</span> Free Software Foundation, Inc.License GPLv3+: GNU GPL version <span class="token number">3</span> or later <span class="token operator">&lt;</span>http://gnu.org/licenses/gpl.html<span class="token operator">></span>This is <span class="token function">free</span> software: you are <span class="token function">free</span> to change and redistribute it.There is NO WARRANTY, to the extent permitted by law.Type <span class="token string">"show copying"</span> and <span class="token string">"show warranty"</span> <span class="token keyword">for</span> details.This GDB was configured as <span class="token string">"x86_64-linux-gnu"</span><span class="token builtin class-name">.</span>Type <span class="token string">"show configuration"</span> <span class="token keyword">for</span> configuration details.For bug reporting instructions, please see:<span class="token operator">&lt;</span>http://www.gnu.org/software/gdb/bugs/<span class="token operator">></span>.Find the GDB manual and other documentation resources online at:    <span class="token operator">&lt;</span>http://www.gnu.org/software/gdb/documentation/<span class="token operator">></span>.For help, <span class="token builtin class-name">type</span> <span class="token string">"help"</span><span class="token builtin class-name">.</span>Type <span class="token string">"apropos word"</span> to search <span class="token keyword">for</span> commands related to <span class="token string">"word"</span><span class="token punctuation">..</span>.Reading symbols from power<span class="token punctuation">..</span>.<span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>打断点：</p><p>使用 break main 在main符号处打断点或 break 16 在第十六行打断点。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> <span class="token builtin class-name">break</span> mainBreakpoint <span class="token number">1</span> at 0x401144: <span class="token function">file</span> power.s, line <span class="token number">16</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>或</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> <span class="token builtin class-name">break</span> <span class="token number">16</span>Breakpoint <span class="token number">1</span> at 0x401144: <span class="token function">file</span> power.s, line <span class="token number">16</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>运行至断点处：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> runStarting program: /home/ngx/NoteBook/programing_from_the_ground_up/power Breakpoint <span class="token number">1</span>, main <span class="token punctuation">(</span><span class="token punctuation">)</span> at power.s:16<span class="token number">16</span>    push    <span class="token variable">$3</span>          <span class="token comment"># push第二个参数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>列出代码:</p><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">(gdb) list11    .string &quot;output: %lld\n&quot;1213.globl main1415main:16    push    $3          # push第二个参数17    push    $2          # push第一个参数18    call    power       # 调用函数19    add     $16, %rsp   # 移回栈指针20    push    %rax        # 保存第一个运算结果<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看rsp寄存器的地址：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> print <span class="token variable">$rsp</span><span class="token variable">$1</span> <span class="token operator">=</span> <span class="token punctuation">(</span>void *<span class="token punctuation">)</span> 0x7fffffffde38<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>单步执行，next：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> nmain <span class="token punctuation">(</span><span class="token punctuation">)</span> at power.s:17<span class="token number">17</span>    push    <span class="token variable">$2</span>          <span class="token comment"># push第一个参数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>查看rsp寄存器的值：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> x <span class="token variable">$rsp</span>0x7fffffffde30:0x00000003<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>查看所有寄存器的值：</p><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">(gdb) info registers rax            0x401144            4198724rbx            0x4011c0            4198848rcx            0x4011c0            4198848rdx            0x7fffffffdf38      140737488346936rsi            0x7fffffffdf28      140737488346920rdi            0x1                 1rbp            0x0                 0x0rsp            0x7fffffffde30      0x7fffffffde30r8             0x0                 0r9             0x7ffff7fe0d50      140737354009936r10            0x5                 5r11            0x0                 0r12            0x401050            4198480r13            0x7fffffffdf20      140737488346912r14            0x0                 0r15            0x0                 0rip            0x401146            0x401146 &lt;main+2&gt;eflags         0x246               [ PF ZF IF ]cs             0x33                51ss             0x2b                43ds             0x0                 0es             0x0                 0fs             0x0                 0gs             0x0                 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>单步执行后，显示$rsp+8的地址和值：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> nmain <span class="token punctuation">(</span><span class="token punctuation">)</span> at power.s:18<span class="token number">18</span>    call    power       <span class="token comment"># 调用函数</span><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> x <span class="token variable">$rsp</span>+80x7fffffffde30:0x00000003<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出定义的字符串：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> x/13cb <span class="token operator">&amp;</span>msg0x401136 <span class="token operator">&lt;</span>msg<span class="token operator">></span>:<span class="token number">111</span> <span class="token string">'o'</span><span class="token number">117</span> <span class="token string">'u'</span><span class="token number">116</span> <span class="token string">'t'</span><span class="token number">112</span> <span class="token string">'p'</span><span class="token number">117</span> <span class="token string">'u'</span><span class="token number">116</span> <span class="token string">'t'</span><span class="token number">58</span> <span class="token string">':'</span><span class="token number">32</span> <span class="token string">' '</span>0x40113e <span class="token operator">&lt;</span>msg+<span class="token operator"><span class="token file-descriptor important">8</span>></span>:<span class="token number">37</span> <span class="token string">'%'</span><span class="token number">108</span> <span class="token string">'l'</span><span class="token number">108</span> <span class="token string">'l'</span><span class="token number">100</span> <span class="token string">'d'</span><span class="token number">10</span> <span class="token string">'\n'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p> 或</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> x/s msg0x401136 <span class="token operator">&lt;</span>msg<span class="token operator">></span>:<span class="token string">"output: %lld<span class="token entity" title="\n">\n</span>"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>x格式化输出 – x/nxy</p><ul><li>n – 输出的地段数</li><li>x – c（字符），d（十进制）， x（十六进制）</li><li>y – 显示的字段的长度，b（字节），h（16位字），w（32位字）</li></ul><p>退出：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> qA debugging session is active.Inferior <span class="token number">1</span> <span class="token punctuation">[</span>process <span class="token number">23560</span><span class="token punctuation">]</span> will be killed.Quit anyway? <span class="token punctuation">(</span>y or n<span class="token punctuation">)</span> uy<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> AT&amp;T汇编 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GDB </tag>
            
            <tag> AT&amp;T汇编 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AT&amp;T汇编调用系统调用的三种方式</title>
      <link href="/AT-T%E6%B1%87%E7%BC%96%E8%B0%83%E7%94%A8%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E5%BC%8F.html"/>
      <url>/AT-T%E6%B1%87%E7%BC%96%E8%B0%83%E7%94%A8%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E5%BC%8F.html</url>
      
        <content type="html"><![CDATA[<h2 id="0-系统环境"><a href="#0-系统环境" class="headerlink" title="0.  系统环境"></a>0.  系统环境</h2><p>内核和系统版本</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">$ uname -srvpoLinux 5.4.0-48-generic #52-Ubuntu SMP Thu Sep 10 10:58:49 UTC 2020 x86_64 GNU&#x2F;Linux<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>GCC版本</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">$ gcc -vgcc version 9.3.0 (Ubuntu 9.3.0-10ubuntu2)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>汇编器版本</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">$ as --versionGNU assembler (GNU Binutils for Ubuntu) 2.34<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>32位系统系统调用表：<br>/usr/include/x86_64-linux-gnu/asm/unistd_32.h</p><p>64位系统系统调用表：<br>/usr/include/x86_64-linux-gnu/asm/unistd_64.h</p><p>这里以一个简单的helloworld程序来说明</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"hello world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-int-中断"><a href="#1-int-中断" class="headerlink" title="1.  int 中断"></a>1.  int 中断</h2><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm"># helloworld_int.s.data                           # 数据段声明# 系统调用号.equ SYS_WRITE, 4.equ SYS_EXIT,  1# 定义要输出的字符串msg : .string &quot;Hello World!\n&quot;  # 要输出的字符串len &#x3D; . - msg                   # 字符串长度.text                           # 代码段声明.global _start                  # 指定入口函数_start:    # write(1, msg, len)    mov     $SYS_WRITE, %rax    # 系统调用号（sys_write）    mov     $1, %rbx            # 参数一：文件描述符（stdout）    mov     $msg, %rcx          # 参数二：要显示的字符串    mov     $len, %rdx          # 参数三：字符串长度    int     $0x80    # exit(0)    mov     $SYS_EXIT, %rax     # 系统调用号（sys_exit）    mov     $0, %rbx            # 参数一：退出代码    int     $0x80               # 调用内核功能<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>汇编执行：</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">$ as helloworld_int.s -o helloworld.o$ ld helloworld.o -o helloworld$ .&#x2F;helloworld Hello World!<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在上面的汇编代码中，%rax存放系统的调用号，%rbx，%rcx，%rdx分别存放第一，第二，第三个参数。</p><p>使用这种方式调用系统调用的时候要注意，系统调用表的编号对应的是32位的系统系统对应表.</p><h2 id="2-syscall"><a href="#2-syscall" class="headerlink" title="2.  syscall"></a>2.  syscall</h2><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm"># helloworld_syscall.s.data                           # 数据段声明# 系统调用号.equ SYS_WRITE, 1.equ SYS_EXIT,  60# 定义要输出的字符串msg : .string &quot;Hello World!\n&quot;  # 要输出的字符串len &#x3D; . - msg                   # 字符串长度.text                           # 代码段声明.global _start                  # 指定入口函数_start:    # write(1, msg, len)        mov     $len, %rdx          # 参数三：字符串长度    mov     $msg, %rsi          # 参数二：要显示的字符串    mov     $1, %rdi            # 参数一：文件描述符（stdout）    mov     $SYS_WRITE, %rax    # 系统调用号（sys_write）    syscall                     # 调用内核功能    # exit(0)    mov     $0, %rdi            # 参数一：退出代码    mov     $SYS_EXIT, %rax     # 系统调用号（sys_exit）    syscall                     # 调用内核功能<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>汇编执行：</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">$ as helloworld_syscall.s -o helloworld_syscall.o$ ld helloworld_syscall.o -o helloworld_syscall$ .&#x2F;helloworld_syscall Hello World!<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>需要注意的是syscall和int参数的存放位置是不一样的。在上面的汇编代码中，%rax存放系统的调用号，%rdi，%rsi，%rdx分别存放第一，第二，第三个参数。</p><p>使用这种方式的时候使用的是64位系统对应的系统调用表.</p><h2 id="3-CALL-libc库"><a href="#3-CALL-libc库" class="headerlink" title="3.  CALL libc库"></a>3.  CALL libc库</h2><p>前面的方法只能输出固定的字符串，如果想输出格式化字符串，我们可以链接C库从而调用大量的C库函数。</p><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm"># helloworld_lib.s.section .datanumber:    .ascii &quot;number:%d\n\0&quot;.section .text.globl  _start_start:    mov     $number, %rdi    mov$99, %rsi    call    printf    mov     $0, %rdi    call    exit# -lc : 使用库c# -I  : 加载链接库，并链接到程序<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用以下命令汇编和链接到C库：</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">$ as helloworld_lib.s -o helloworld_lib.o$ ld -I &#x2F;lib64&#x2F;ld-linux-x86-64.so.2 -o helloworld_lib helloworld_lib.o -lc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>以上的命令中 ：<code>-I /lib64/ld-linux-x86-64.so.2</code> 表示使用<code>ld-linux-x86-64.so.2</code>作为动态链接器，<code>-lc</code>表示链接到C库</p><p>执行：</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">$ .&#x2F;helloworld_lib number:99<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="4-GCC"><a href="#4-GCC" class="headerlink" title="4.  GCC"></a>4.  GCC</h2><p>使用GCC编译汇编代码可以自动链接C库。</p><p>使用GCC编译和上面的方法没有太大的区别。<br>但是有两点需要注意：</p><ul><li>用GCC汇编时需要指定入口函数为main，否则会报错。</li><li>用GCC编译时，GCC会在main函数执行前调用libc库进行一些初始化操作，会修改一些程序的初始栈帧，比如程序的启动参数等，可能会导致无法正确获取程序的启动参数。</li></ul><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm"># helloworld_syscall_gcc.s.section .data.section .textmsg:    .string &quot;hello world\n&quot;.globl mainmain:    # printf(&quot;hello world\n&quot;)    mov     $0, %rax        # 必须将eax置零才能成功 call printf    mov     $msg, %rdi    call    printf    # exit(0)     mov     $0, %rdi         call    exit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>汇编运行</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">$ gcc -no-pie helloworld_syscall_gcc.s $ .&#x2F;a.out hello world<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>三种方式各有特点，个人推荐第二种，需要输出格式化数据的时候可以使用第三种。</p>]]></content>
      
      
      <categories>
          
          <category> AT&amp;T汇编 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 汇编语言 </tag>
            
            <tag> int中断 </tag>
            
            <tag> syscall </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown合并单元格的办法</title>
      <link href="/Markdown%E5%90%88%E5%B9%B6%E5%8D%95%E5%85%83%E6%A0%BC%E7%9A%84%E5%8A%9E%E6%B3%95.html"/>
      <url>/Markdown%E5%90%88%E5%B9%B6%E5%8D%95%E5%85%83%E6%A0%BC%E7%9A%84%E5%8A%9E%E6%B3%95.html</url>
      
        <content type="html"><![CDATA[<h2 id="Typora-合并单元格的办法"><a href="#Typora-合并单元格的办法" class="headerlink" title="Typora 合并单元格的办法"></a>Typora 合并单元格的办法</h2><h3 id="1-使用插件支持"><a href="#1-使用插件支持" class="headerlink" title="1.  使用插件支持"></a>1.  使用插件支持</h3><p>使用 <a href="https://madmaxchow.gitee.io/vlook/index.html">VLOOK</a> 插件不仅可以实现单元格合并，还可以实现许多拓展功能。</p><p>但是 该插件目前只支持 Typora，将文件拷贝到其他的地方需要导出为HTML才能实现相同的效果，在其他的Markdown渲染器无法实现相同的效果。安装使用也比较复杂。</p><hr><h2 id="2-编辑HTML标签实现"><a href="#2-编辑HTML标签实现" class="headerlink" title="2.编辑HTML标签实现"></a>2.编辑HTML标签实现</h2><h4 id="2-1-简介"><a href="#2-1-简介" class="headerlink" title="2.1  简介"></a>2.1  简介</h4><p>如果只需要进行单元格合并，使用HTML标签是一个比较简便的方法。</p><p>在Markdown中可以直接渲染HTML代码。如下面的代码和它对应的最简单的三行四列的表格。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>第一行<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>a<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>b<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>c<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>第二行<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>a<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>b<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>c<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>第三行<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>a<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>b<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>c<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table>    <tr>         <td>第一行</td>           <td>a</td>        <td>b</td>        <td>c</td>    </tr>    <tr>        <td>第二行</td>        <td>a</td>        <td>b</td>        <td>c</td>    </tr>    <tr>        <td>第三行</td>        <td>a</td>        <td>b</td>        <td>c</td>    </tr></table><p>在上面的代码中<code> &lt;table&gt;</code>标签表示一个表格。<code>&lt;tr&gt;</code> 和 <code>&lt;td&gt;</code>标签分别表示表格的行和列。</p><h4 id="2-2-标题和居中"><a href="#2-2-标题和居中" class="headerlink" title="2.2 标题和居中"></a>2.2 标题和居中</h4><p>有时我们想对表格的内容居中放置，并加上标题。只要加上相应的属性就可以实现。如下面所示的代码和表格：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>caption</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>这是一个测试表格<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>caption</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>第一行<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>a<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>b<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>c<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>第二行<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>a<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>b<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>c<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>第三行<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>a<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>b<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>c<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table style="text-align: center;">    <caption align="center">这是一个测试表格</caption>    <tr>         <td>第一行</td>           <td>a</td>        <td>b</td>        <td>c</td>    </tr>    <tr>        <td>第二行</td>        <td>a</td>        <td>b</td>        <td>c</td>    </tr>    <tr>        <td>第三行</td>        <td>a</td>        <td>b</td>        <td>c</td>    </tr></table><p>我们用style属性控制表格内容居中，用<code>&lt;caption&gt;</code>标签设置表格的标题并居中显示。</p><h4 id="2-3-表格合并"><a href="#2-3-表格合并" class="headerlink" title="2.3 表格合并"></a>2.3 表格合并</h4><p>在HTML中，使用<code>colspan</code>和<code>rowspan</code>来控制合并单元格。控制它们的值就可以控制相应的行列数。</p><ul><li><code>colspan</code>：规定单元格可横跨的列数</li><li><code>rowspan</code>：规定单元格可横跨的行数</li></ul><p>示例1: 让第一个单元格占据两行</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>caption</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>这是一个测试表格<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>caption</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">rowspan</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>第一行<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>a<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>b<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>c<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>a<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>b<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>c<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>第三行<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>a<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>b<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>c<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table style="text-align: center;">    <caption align="center">这是一个测试表格</caption>    <tr>         <td rowspan="2">第一行</td>           <td>a</td>        <td>b</td>        <td>c</td>    </tr>    <tr>        <td>a</td>        <td>b</td>        <td>c</td>    </tr>    <tr>        <td>第三行</td>        <td>a</td>        <td>b</td>        <td>c</td>    </tr></table><p>实例2：让(1,3)单元格占据两列</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>caption</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>这是一个测试表格<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>caption</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">rowspan</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>第一行<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>a<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">colspan</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>b<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>a<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>b<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>c<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>第三行<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>a<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>b<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>c<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table style="text-align: center;">    <caption align="center">这是一个测试表格</caption>    <tr>         <td rowspan="2">第一行</td>           <td>a</td>        <td colspan="2">b</td>    </tr>    <tr>        <td>a</td>        <td>b</td>        <td>c</td>    </tr>    <tr>        <td>第三行</td>        <td>a</td>        <td>b</td>        <td>c</td>    </tr></table>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typora </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>atoi函数的问题及解决方法</title>
      <link href="/atoi%E5%87%BD%E6%95%B0%E7%9A%84%E9%97%AE%E9%A2%98%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95.html"/>
      <url>/atoi%E5%87%BD%E6%95%B0%E7%9A%84%E9%97%AE%E9%A2%98%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95.html</url>
      
        <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>在最近的一个项目中需要对传入的字符串参数转换成<code>int</code>类型，并对转换后的值进行判断，看是否在<code>0-7</code>内，最直接的办法就是调用函数：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token keyword">int</span> <span class="token function">atoi</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>nptr<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>但是这个函数有一个明显的问题，对于非法的输入，返回值都为零，而且不进行错误检查。<br>这就造成当函数返回零的时候无法判断输入的是字符<code>0</code>还是非法字符。</p><p>如下面的输入和对应的输出：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">atoi</span><span class="token punctuation">(</span><span class="token string">"aaa"</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token function">atoi</span><span class="token punctuation">(</span><span class="token string">"0"</span><span class="token punctuation">)</span>   <span class="token operator">=</span> <span class="token number">0</span><span class="token function">atoi</span><span class="token punctuation">(</span><span class="token string">"123abc"</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">123</span><span class="token function">atoi</span><span class="token punctuation">(</span><span class="token string">"abc123"</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>第一行和第二行输出一样但是输入不一样，造成程序无法区别非法输入和<code>0</code>， 第三行在我们的需求中属于非法输入，但却切断字符返回正常整数。这就造成如果输入的是<code>3a</code>，返回值则为<code>3</code>，和我们期望的返回不一致。</p><p>下面给出针对这个项目需求的改进方法。</p><hr><h2 id="使用atoi转换前进行检查"><a href="#使用atoi转换前进行检查" class="headerlink" title="使用atoi转换前进行检查"></a>使用atoi转换前进行检查</h2><p>既然atoi函数本身的功能不能满足我们的要求，那我们就自己进行检查。</p><p>在下面的代码中，我们用返回值来指示传入的字符是否非法，如果非法，返回1，否则返回零。字符串的转换结果使用函数参数返回。</p><p>转换函数在第3行检测空指针和空字符；第6行的循环跳过所有前面的空格；第8行检测是否有正负号；第10行的循环遍历剩下的字符，如果有非数字字符，则返回1。否则调用atoi函数进行转换。现在这个函数可以满足我们项目的全部要求。</p><p>但是，这个函数的代码比较比较复杂，各种检查不容易理解和维护。进一步的改进请往下看。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">atoi_c</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> buf<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> result<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> offset <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>buf <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">||</span> <span class="token operator">*</span>buf <span class="token operator">==</span> <span class="token char">'\0'</span><span class="token punctuation">)</span>         <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>buf<span class="token punctuation">[</span>offset<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">' '</span><span class="token punctuation">)</span>        offset<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>buf<span class="token punctuation">[</span>offset<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'+'</span> <span class="token operator">||</span> buf<span class="token punctuation">[</span>offset<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'-'</span><span class="token punctuation">)</span>        offset<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>buf<span class="token punctuation">[</span>offset<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token char">'\0'</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>buf<span class="token punctuation">[</span>offset<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token char">'9'</span> <span class="token operator">||</span> buf<span class="token punctuation">[</span>offset<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token char">'0'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>            offset<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token operator">*</span>result <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="使用strtol检查非法字符"><a href="#使用strtol检查非法字符" class="headerlink" title="使用strtol检查非法字符"></a>使用strtol检查非法字符</h2><p>通过查阅man手册，发现<code>strtol</code>函数可以通过对参数进行检查来判断输入的字符是否是合法的字符。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token keyword">long</span> <span class="token keyword">int</span> <span class="token function">strtol</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>nptr<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>endptr<span class="token punctuation">,</span> <span class="token keyword">int</span> base<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>第一个参数就是要转换的字符串；第二个参数非<code>NULL</code>时，储存第一个非法的转换字符；第三个参数是转换的进制。有了第二个参数我们可以通过检查它是不是字符串的最后一个字符(<code>\0</code>)来判断整个字符串是不是合法的。</p><p>改进之后的代码如下所示：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">atoi_c</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> buf<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> result<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">char</span><span class="token operator">*</span> invalid<span class="token punctuation">;</span>    <span class="token operator">*</span>result <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">strtol</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token operator">&amp;</span>invalid<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">*</span>invalid <span class="token operator">!=</span> <span class="token char">'\0'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是这个代码还是有一点问题，当我们将<code>long int</code>类型的值强制转换成<code>int</code>时，就有可能发生溢出，导致最后的转换结果出错。而且我们只需要对<code>0-7</code>的值进行判定，所以使用<code>unsigned int</code>足够了。</p><p>我们继续对代码进行改进。</p><hr><h2 id="使用strtoumax改进代码"><a href="#使用strtoumax改进代码" class="headerlink" title="使用strtoumax改进代码"></a>使用strtoumax改进代码</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;inttypes.h></span></span><span class="token class-name">intmax_t</span> <span class="token function">strtoimax</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>nptr<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>endptr<span class="token punctuation">,</span> <span class="token keyword">int</span> base<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在上面的函数原型中，各个参数的作用和<code>strtol</code>的一样但是这个函数有控制溢出的能力，更多的信息可以查看<code>man 3 strtoumax</code> 。</p><p>函数的返回值<code>intmax_t</code>在 <code>Ubuntu2004</code> 中的定义是<code>unsigned long int</code>，为了适应返回值，我们可以对返回值先进行比较，如果大于<code>unsigned int</code>的最大值的话，返回错误。最后的代码如下：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;inttypes.h></span></span><span class="token keyword">int</span> <span class="token function">atoi_c</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> buf<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token operator">*</span> result<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>buf <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">||</span> <span class="token operator">*</span>buf <span class="token operator">==</span> <span class="token char">'\0'</span><span class="token punctuation">)</span>         <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">char</span><span class="token operator">*</span> invalid<span class="token punctuation">;</span>    <span class="token class-name">uintmax_t</span> ret<span class="token punctuation">;</span>    ret <span class="token operator">=</span> <span class="token function">strtoumax</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token operator">&amp;</span>invalid<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">*</span>invalid <span class="token operator">!=</span> <span class="token char">'\0'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>ret<span class="token operator">></span> UINT32_MAX<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token operator">*</span>result <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span>ret<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
            <tag> atoi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言测试框架--cmocka 使用</title>
      <link href="/C%E8%AF%AD%E8%A8%80%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6-cmocka-%E4%BD%BF%E7%94%A8.html"/>
      <url>/C%E8%AF%AD%E8%A8%80%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6-cmocka-%E4%BD%BF%E7%94%A8.html</url>
      
        <content type="html"><![CDATA[<h2 id="cmocka简介"><a href="#cmocka简介" class="headerlink" title="cmocka简介"></a>cmocka简介</h2><p>cmocka是一个面向C语言的，支持mock的测试框架。</p><p>本文的所有代码可以在<a href="https://gitee.com/nongguangxin/cmocka_example">这里</a>找到。</p><hr><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>从<a href="https://cmocka.org/">官网</a>直接下载源码安装即可。<br>具体的过程为：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">wget</span> https://cmocka.org/files/1.1/cmocka-1.1.5.tar.xz$ <span class="token function">tar</span> vxf cmocka-1.1.5.tar.xz$ <span class="token builtin class-name">cd</span> cmocka-1.1.5$ <span class="token function">sed</span> -i <span class="token string">'s/cmake_minimum_required(VERSION 3.5.0)/cmake_minimum_required(VERSION 2.8.0)/g'</span> CMakeLists.txt$ <span class="token function">mkdir</span> build$ cmake <span class="token punctuation">..</span>$ <span class="token function">make</span>$ <span class="token function">sudo</span> <span class="token function">make</span> <span class="token function">install</span>$ <span class="token function">sudo</span> ldconfig<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用wget下载源码，解压，进入源码目录，新建build文件夹，使用cmake生成makefile，安装，刷新链接库。</p><p>其中sed语句是为了能在更低版本的cmake上构建作出的修改，实测如果在debian9上构建需要运行sed语句。</p><p>也可以使用这个<a href="https://gitee.com/nongguangxin/cmocka_example/blob/master/install_cmocka.sh">shell脚本</a>直接安装：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">wget</span> https://gitee.com/nongguangxin/cmocka_example/blob/master/install_cmocka.sh$ <span class="token function">sudo</span> ./install_cmocka.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><hr><h2 id="示例1–入门示例"><a href="#示例1–入门示例" class="headerlink" title="示例1–入门示例"></a>示例1–入门示例</h2><p>这里用一个简单的数学库来作例子，<br>代码结构：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token builtin class-name">.</span>├── include│   └── mymath.h├── Makefile├── README.md├── src│   ├── main.c│   └── mymath.c└── <span class="token builtin class-name">test</span>    └── test_mymath.c<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>include</code>： 库头文件</p><p><code>src</code>：库的实现和main函数</p><p><code>test</code>：测试代码</p><p>完整代码请查看<a href="https://gitee.com/nongguangxin/cmocka_example/tree/master/example">gittee</a></p><p>直接在代码目录中运行 <code>make</code> 即可生成测试程序，结果如下所示：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">xxx@xxx$ ./test_suit <span class="token punctuation">[</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token punctuation">]</span> Running <span class="token number">4</span> test<span class="token punctuation">(</span>s<span class="token punctuation">)</span>.<span class="token punctuation">[</span> RUN      <span class="token punctuation">]</span> test_add<span class="token punctuation">[</span>       OK <span class="token punctuation">]</span> test_add<span class="token punctuation">[</span> RUN      <span class="token punctuation">]</span> test_sub<span class="token punctuation">[</span>       OK <span class="token punctuation">]</span> test_sub<span class="token punctuation">[</span> RUN      <span class="token punctuation">]</span> test_div<span class="token punctuation">[</span>  ERROR   <span class="token punctuation">]</span> --- Test failed with exception: Floating point exception<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">[</span>  FAILED  <span class="token punctuation">]</span> test_div<span class="token punctuation">[</span> RUN      <span class="token punctuation">]</span> test_mul<span class="token punctuation">[</span>       OK <span class="token punctuation">]</span> test_mul<span class="token punctuation">[</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token punctuation">]</span> <span class="token number">4</span> test<span class="token punctuation">(</span>s<span class="token punctuation">)</span> run.<span class="token punctuation">[</span>  PASSED  <span class="token punctuation">]</span> <span class="token number">3</span> test<span class="token punctuation">(</span>s<span class="token punctuation">)</span>.<span class="token punctuation">[</span>  FAILED  <span class="token punctuation">]</span> <span class="token number">1</span> test<span class="token punctuation">(</span>s<span class="token punctuation">)</span>, listed below:<span class="token punctuation">[</span>  FAILED  <span class="token punctuation">]</span> test_div <span class="token number">1</span> FAILED TEST<span class="token punctuation">(</span>S<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="示例2-–-mock示例"><a href="#示例2-–-mock示例" class="headerlink" title="示例2 – mock示例"></a>示例2 – mock示例</h2><p>mock机制可以让我们对从不可及的函数或对象进行测试，在很多时候是必不可少的。</p><p>代码结构：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token builtin class-name">.</span>├── ex_mock.c└── Makefile<span class="token number">0</span> directories, <span class="token number">2</span> files<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里代码比较简单，只用一个函数展示了mock的简单用法。<br>完整的代码可以从<a href="https://gitee.com/nongguangxin/cmocka_example/tree/master/mock">这里</a>下载</p><hr><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li>参考<a href="https://blog.csdn.net/benkaoya/article/details/100933141#t6">博客</a> 推荐先看这个。</li><li>cmocka <a href="https://cmocka.org/">官网</a></li><li>cmocka API <a href="https://api.cmocka.org/group__cmocka.html">官网</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
            <tag> 单元测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git使用笔记</title>
      <link href="/git%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0.html"/>
      <url>/git%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0.html</url>
      
        <content type="html"><![CDATA[<h3 id="0-git-init"><a href="#0-git-init" class="headerlink" title="0.  git init"></a>0.  git init</h3><p>初始化本地仓库推送到远程空仓库</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">mkdir</span> NoteBook$ <span class="token builtin class-name">cd</span> NoteBook$ <span class="token function">git</span> init$ <span class="token function">touch</span> README.md$ <span class="token function">git</span> <span class="token function">add</span> README.md$ <span class="token function">git</span> commit -m <span class="token string">"first commit"</span>$ <span class="token function">git</span> remote <span class="token function">add</span> origin https://gitee.com/nongguangxin/NoteBook.git$ <span class="token function">git</span> push -u origin master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>初始化本地仓库拉取远程仓库</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">mkdir</span> NoteBook$ <span class="token builtin class-name">cd</span> NoteBook$ <span class="token function">git</span> init$ <span class="token function">git</span> remote <span class="token function">add</span> origin https://gitee.com/xxx/xxx.git$ <span class="token function">git</span> pull origin master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>origin :仓库的名称，可以根据意愿更改。</p><hr><h3 id="1-start-a-working-area-开始一个工作区"><a href="#1-start-a-working-area-开始一个工作区" class="headerlink" title="1.  start a working area (开始一个工作区)"></a>1.  start a working area (开始一个工作区)</h3><h4 id="1-1-clone-—-克隆仓库到一个新的目录"><a href="#1-1-clone-—-克隆仓库到一个新的目录" class="headerlink" title="1.1  clone — 克隆仓库到一个新的目录"></a>1.1  clone — 克隆仓库到一个新的目录</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">git</span> clone https://gitee.com/xxx/xxx.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>git clone 指定分支：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">git</span> clone https://gitee.com/xxx/xxx.git -b <span class="token operator">&lt;</span>branch_name<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="1-2-init-—-创建一个空的Git仓库或重新初始化一个存在的仓库"><a href="#1-2-init-—-创建一个空的Git仓库或重新初始化一个存在的仓库" class="headerlink" title="1.2  init — 创建一个空的Git仓库或重新初始化一个存在的仓库"></a>1.2  <code>init</code> — 创建一个空的Git仓库或重新初始化一个存在的仓库</h4><p>在<code>github</code>或<code>gitee</code>上创建一个空的仓库后。在本地执行如下操作即可开始一个新的开发。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">mkdir</span> NoteBook$ <span class="token builtin class-name">cd</span> NoteBook$ <span class="token function">git</span> init$ <span class="token function">touch</span> README.md$ <span class="token function">git</span> <span class="token function">add</span> README.md$ <span class="token function">git</span> commit -m <span class="token string">"first commit"</span>$ <span class="token function">git</span> remote <span class="token function">add</span> origin https://gitee.com/xxx/xxx.git$ <span class="token function">git</span> push -u origin master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="2-work-on-the-current-change-处理当前的改动"><a href="#2-work-on-the-current-change-处理当前的改动" class="headerlink" title="2.  work on the current change (处理当前的改动)"></a>2.  work on the current change (处理当前的改动)</h3><h4 id="2-1-add-—-更新索引文件，以追踪文件改动。"><a href="#2-1-add-—-更新索引文件，以追踪文件改动。" class="headerlink" title="2.1  add — 更新索引文件，以追踪文件改动。"></a>2.1  add — 更新索引文件，以追踪文件改动。</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">git</span> <span class="token function">add</span> test1<span class="token comment"># or add all file</span>$ <span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="2-2-mv-—-移动或重命名文件，目录或链接"><a href="#2-2-mv-—-移动或重命名文件，目录或链接" class="headerlink" title="2.2  mv — 移动或重命名文件，目录或链接"></a>2.2  <code>mv</code> — 移动或重命名文件，目录或链接</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">git</span> <span class="token function">mv</span> test1 <span class="token builtin class-name">test</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2-3-restore-—-还原上一次提交以来对文件的更改"><a href="#2-3-restore-—-还原上一次提交以来对文件的更改" class="headerlink" title="2.3  restore — 还原上一次提交以来对文件的更改"></a>2.3  restore — 还原上一次提交以来对文件的更改</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">git</span> restore test1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>恢复git rm 删除的文件。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">git</span> restore --staged <span class="token builtin class-name">test</span>$ <span class="token function">git</span> restore <span class="token builtin class-name">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>恢复 rm 删除的文件</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">git</span> restore <span class="token builtin class-name">test</span><span class="token comment"># or restore all file</span>$ <span class="token function">git</span> restore <span class="token builtin class-name">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="2-4-rm-—-删除文件"><a href="#2-4-rm-—-删除文件" class="headerlink" title="2.4  rm — 删除文件"></a>2.4  rm — 删除文件</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">git</span> <span class="token function">rm</span> <span class="token builtin class-name">test</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h3 id="3-examine-the-history-and-state-检查历史和状态"><a href="#3-examine-the-history-and-state-检查历史和状态" class="headerlink" title="3.  examine the history and state (检查历史和状态)"></a>3.  examine the history and state (检查历史和状态)</h3><h4 id="3-1-bisect-—-使用二分搜索查找导致错误的提交"><a href="#3-1-bisect-—-使用二分搜索查找导致错误的提交" class="headerlink" title="3.1  bisect  —  使用二分搜索查找导致错误的提交"></a>3.1  bisect  —  使用二分搜索查找导致错误的提交</h4><h4 id="3-2-diff-—-显示改动"><a href="#3-2-diff-—-显示改动" class="headerlink" title="3.2  diff — 显示改动"></a>3.2  <code>diff</code> — 显示改动</h4><p>显示上次提交以来的改动</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">git</span> <span class="token function">diff</span> HEAD<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>显示两次提交之间的改动</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">git</span> <span class="token function">diff</span> d439cb7b 8a74c825<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="3-3-grep-—-打印匹配的行"><a href="#3-3-grep-—-打印匹配的行" class="headerlink" title="3.3  grep — 打印匹配的行"></a>3.3  <code>grep</code> — 打印匹配的行</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">git</span> <span class="token function">grep</span> <span class="token string">"xxx"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="3-4-log-—-显示提交日志"><a href="#3-4-log-—-显示提交日志" class="headerlink" title="3.4  log — 显示提交日志"></a>3.4  log — 显示提交日志</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">git</span> log<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">git</span> -p -2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>-p</code>展开显示每次提交的内容差异，<code>-2</code>仅显示最近的两次更新。<br><code>--stat</code>仅显示简要的增改行数统计。</p><h4 id="3-5-show-—-显示各种信息"><a href="#3-5-show-—-显示各种信息" class="headerlink" title="3.5  show — 显示各种信息"></a>3.5  show — 显示各种信息</h4><p>包括提交信息，修改记录等</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">git</span> show<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="3-6-status-—-显示工作树当前的状态"><a href="#3-6-status-—-显示工作树当前的状态" class="headerlink" title="3.6  status — 显示工作树当前的状态"></a>3.6  status — 显示工作树当前的状态</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">git</span> status<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h3 id="4-grow-mark-and-tweak-your-common-history（增加，标记和调整你的历史）"><a href="#4-grow-mark-and-tweak-your-common-history（增加，标记和调整你的历史）" class="headerlink" title="4.  grow, mark and tweak your common history（增加，标记和调整你的历史）"></a>4.  grow, mark and tweak your common history（增加，标记和调整你的历史）</h3><h4 id="4-1-branch-—-列出，创建，删除分支"><a href="#4-1-branch-—-列出，创建，删除分支" class="headerlink" title="4.1  branch — 列出，创建，删除分支"></a>4.1  branch — 列出，创建，删除分支</h4><ul><li>-d, –delete</li><li>-l, –list</li><li>–show-current</li></ul><p>从master分支创建一个新的分支<code>gxnong</code></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">git</span> branch gxnong master<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看当前所在的分支</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">git</span> branch --show-current<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看远程分支</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">git</span> branch -r<span class="token comment"># or show all branch</span>$ <span class="token function">git</span> branch -a<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>切换到其他分支</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">git</span> switch gxong<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">git</span> checkout gxong<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将分支push到远程仓库的master分支</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">git</span> push --set-upstream origin master<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>第一次push需要设定上游分支，第二次就可以直接push</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">git</span> push<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果远程gxnong分支已存在，则可以将当前分支<code>push</code>到远程仓库<code>origin</code>的<code>gxnong</code>分支</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">git</span> push origin gxong<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将A分支push到master分支</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">git</span> push origin A:master<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>强制用本地的代码去覆盖掉远程仓库的代码</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">git</span> push -f origin gxong<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>删除分支</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">git</span> branch -d gxong<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>删除远程分支</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">git</span> branch -d -r origin/test3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>删除不存在对应远程分支的本地分支</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">git</span> remote prune origin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此时查看登陆远程仓库发现分支还在，使用下面的方法删除。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">git</span> push origin --delete test3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="4-2-commit-—-记录改动到仓库"><a href="#4-2-commit-—-记录改动到仓库" class="headerlink" title="4.2  commit — 记录改动到仓库"></a>4.2  commit — 记录改动到仓库</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">git</span> commit -m <span class="token string">"message"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">git</span> commit -a -s -m <span class="token string">"mssage"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>-a, -add</code> 自动添加已追踪的文件;<br><code>git -s</code> 签署sign-of-by</p><p>撤销上次提交，重新提交。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">git</span> commit --amend<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="4-3-merge-—-合并两个或多个开发历史"><a href="#4-3-merge-—-合并两个或多个开发历史" class="headerlink" title="4.3  merge — 合并两个或多个开发历史"></a>4.3  merge — 合并两个或多个开发历史</h4><p>将分支<code>test3</code>合并到当前分支</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">git</span> merge test3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="4-4-reset-—-重置当前-HEAD-到指定的状态"><a href="#4-4-reset-—-重置当前-HEAD-到指定的状态" class="headerlink" title="4.4  reset — 重置当前 HEAD 到指定的状态"></a>4.4  reset — 重置当前 HEAD 到指定的状态</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">git</span> reset --hard HEAD^<span class="token comment"># 回到上一个版本</span>$ <span class="token function">git</span> reset --hard HEAD^^<span class="token comment"># 回到上上一个版本</span>$ <span class="token function">git</span> reset --hard HEAD~20<span class="token comment"># 回到20个版本之前</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果想回到某个版本，可以用<code>git reflog</code>查看记录，然后选择回到的版本</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">git</span> reset --hard 8a74c82<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="4-5-checkout-—-从某次提交中新建分支"><a href="#4-5-checkout-—-从某次提交中新建分支" class="headerlink" title="4.5  checkout — 从某次提交中新建分支"></a>4.5  checkout — 从某次提交中新建分支</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">git</span> checkout 38bed85 -b <span class="token builtin class-name">test</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="4-6-switch-—-切换分支"><a href="#4-6-switch-—-切换分支" class="headerlink" title="4.6  switch — 切换分支"></a>4.6  switch — 切换分支</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">git</span> switch test3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="4-7-rebase-—-修改历史"><a href="#4-7-rebase-—-修改历史" class="headerlink" title="4.7  rebase — 修改历史"></a>4.7  <code>rebase</code> — 修改历史</h4><p><code>git rebase</code> 允许大修改历史，谨慎使用。</p><hr><h3 id="5-collaborate-协作"><a href="#5-collaborate-协作" class="headerlink" title="5.  collaborate (协作 )"></a>5.  collaborate (协作 )</h3><h4 id="5-1-fetch-—-拉取远程仓库的最新改动"><a href="#5-1-fetch-—-拉取远程仓库的最新改动" class="headerlink" title="5.1  fetch — 拉取远程仓库的最新改动"></a>5.1  fetch — 拉取远程仓库的最新改动</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">git</span> fetch<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看改动</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">git</span> <span class="token function">diff</span> FETCH_HEAD<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>合并改动</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">git</span> merge<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="5-2-pull-—-拉取并合并"><a href="#5-2-pull-—-拉取并合并" class="headerlink" title="5.2  pull — 拉取并合并"></a>5.2  pull — 拉取并合并</h4><p>其本上等于 fetch + merge</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">git</span> pull<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="5-3-push-—-更新远程库"><a href="#5-3-push-—-更新远程库" class="headerlink" title="5.3  push — 更新远程库"></a>5.3  push — 更新远程库</h4><p>将改动推送到远程分支</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">git</span> push<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="5-4-fork-和-pull-request"><a href="#5-4-fork-和-pull-request" class="headerlink" title="5.4  fork 和 pull request"></a>5.4  fork 和 pull request</h4><p>如果想向某个开源项目做贡献或者自己修改某个开源项目，可以将项目fork后，pull到本地，修改完成后如果想贡献自己的代码到源仓库，可以提交pull request请求。</p><hr><h3 id="6-杂项"><a href="#6-杂项" class="headerlink" title="6.  杂项"></a>6.  杂项</h3><h4 id="修改最近一次提交的信息"><a href="#修改最近一次提交的信息" class="headerlink" title="修改最近一次提交的信息"></a>修改最近一次提交的信息</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">git</span> commit --amend <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="修改git默认编辑器"><a href="#修改git默认编辑器" class="headerlink" title="修改git默认编辑器"></a>修改git默认编辑器</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">git</span> config –global core.editor <span class="token function">vim</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="显示文件的修改者，修改时间和修改记录"><a href="#显示文件的修改者，修改时间和修改记录" class="headerlink" title="显示文件的修改者，修改时间和修改记录"></a>显示文件的修改者，修改时间和修改记录</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">git</span> blame test2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="更多详细内容可以查看git帮助"><a href="#更多详细内容可以查看git帮助" class="headerlink" title="更多详细内容可以查看git帮助"></a>更多详细内容可以查看git帮助</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">git</span> <span class="token builtin class-name">help</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="远程仓重命名"><a href="#远程仓重命名" class="headerlink" title="远程仓重命名"></a>远程仓重命名</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> remote <span class="token function">rename</span> origin <span class="token builtin class-name">test</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="移除远程仓库"><a href="#移除远程仓库" class="headerlink" title="移除远程仓库"></a>移除远程仓库</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">git</span> remote <span class="token function">rm</span> <span class="token builtin class-name">test</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="补丁"><a href="#补丁" class="headerlink" title="补丁"></a>补丁</h4><p>使用<code>git diff</code> 生成<code>unix</code>标准补丁，相关选项查看手册</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">git</span> <span class="token function">diff</span> <span class="token operator">></span> test.diff<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用git format-patch 生成git标准的补丁，相关选项查看手册</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">git</span> format-patch HEAD^<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>检查补丁是否能够干净顺利地应用到当前分支中</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">git</span> apply --check test.patch<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>应用<code>diff</code>补丁</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">git</span> apply test.patch<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或应用patch补丁</p><pre class="line-numbers language-none"><code class="language-none">$ git am test.patch<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h3 id="7-参考"><a href="#7-参考" class="headerlink" title="7.  参考"></a>7.  参考</h3><p><a href="http://www-cs-students.stanford.edu/~blynn/gitmagic/intl/zh_cn/">git magic</a></p><p><a href="https://gitee.com/progit/">pro git</a></p><p>git help 手册</p>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/hello-world.html"/>
      <url>/hello-world.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h3 id="1-前期准备"><a href="#1-前期准备" class="headerlink" title="1. 前期准备"></a>1. 前期准备</h3><p>因为hexo依赖nodejs环境，所以要先<a href="https://nodejs.org/en/download/">安装node</a>,<br>如果你需要部署到github上，你还要<a href="https://git-scm.com/downloads">安装git</a>,<br>最后安装hexo并初始化你的Blog：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">npm</span> <span class="token function">install</span> -g hexo-cli$ hexo init <span class="token operator">&lt;</span>folder<span class="token operator">></span>$ <span class="token builtin class-name">cd</span> <span class="token operator">&lt;</span>folder<span class="token operator">></span>$ <span class="token function">npm</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>新建完成后，指定文件夹的目录如下：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token builtin class-name">.</span>├── _config.yml├── package.json├── scaffolds├── <span class="token builtin class-name">source</span><span class="token operator">|</span>   ├── _drafts<span class="token operator">|</span>   └── _posts└── themes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-创建新文章"><a href="#2-创建新文章" class="headerlink" title="2. 创建新文章"></a>2. 创建新文章</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token punctuation">[</span>post <span class="token operator">|</span> page <span class="token operator">|</span> draft<span class="token punctuation">]</span> <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>更多信息: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="3-生成静态文件"><a href="#3-生成静态文件" class="headerlink" title="3. 生成静态文件"></a>3. 生成静态文件</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span class="token comment"># or </span>$ hexo g<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>更多信息: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="4-启动本地服务"><a href="#4-启动本地服务" class="headerlink" title="4. 启动本地服务"></a>4. 启动本地服务</h3><p>可以在部署之前查看博客网站的效果</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span class="token comment"># or </span>$ hexo s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>更多信息: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="5-部署"><a href="#5-部署" class="headerlink" title="5. 部署"></a>5. 部署</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span class="token comment"># or</span>$ hexo d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>更多信息: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><h3 id="6-清理无用文件"><a href="#6-清理无用文件" class="headerlink" title="6. 清理无用文件"></a>6. 清理无用文件</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo clean<span class="token comment"># or</span>$ hexo cl<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="7-参考"><a href="#7-参考" class="headerlink" title="7. 参考"></a>7. 参考</h3><p><a href="https://hexo.bootcss.com/">Hexo 官网</a></p><h3 id="8-其他"><a href="#8-其他" class="headerlink" title="8. 其他"></a>8. 其他</h3><p>重新配置时在blog目录中执行</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> node_modules themes<span class="token function">npm</span> <span class="token function">install</span><span class="token builtin class-name">cd</span> themes<span class="token comment"># clone theme to here</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typora </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>404</title>
      <link href="/404/index.html"/>
      <url>/404/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>about</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>categories</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
